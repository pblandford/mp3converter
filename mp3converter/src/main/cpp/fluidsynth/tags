!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_CTRL_OFF	fluid_midi.h	/^  ALL_CTRL_OFF = 0x79,$/;"	e	enum:fluid_midi_control_change
ALL_NOTES_OFF	fluid_midi.h	/^  ALL_NOTES_OFF = 0x7B,$/;"	e	enum:fluid_midi_control_change
ALL_SOUND_OFF	fluid_midi.h	/^  ALL_SOUND_OFF = 0x78,$/;"	e	enum:fluid_midi_control_change
ALSA_PCM_NEW_HW_PARAMS_API	fluid_alsa.c	35;"	d	file:
ALSA_PCM_SCHED_PRIORITY	fluid_alsa.c	53;"	d	file:
ALSA_RAWMIDI_SCHED_PRIORITY	fluid_alsa.c	54;"	d	file:
ALSA_SEQ_SCHED_PRIORITY	fluid_alsa.c	55;"	d	file:
APP_ABI	Application.mk	/^APP_ABI := armeabi-v7a x86$/;"	m
APP_OPTIM	Application.mk	/^APP_OPTIM := release$/;"	m
APP_PLATFORM	Application.mk	/^APP_PLATFORM=android-21$/;"	m
APP_STL	Application.mk	/^APP_STL := c++_static$/;"	m
BALANCE_LSB	fluid_midi.h	/^  BALANCE_LSB = 0x28,$/;"	e	enum:fluid_midi_control_change
BALANCE_MSB	fluid_midi.h	/^  BALANCE_MSB = 0x08,$/;"	e	enum:fluid_midi_control_change
BANK_SELECT_LSB	fluid_midi.h	/^  BANK_SELECT_LSB = 0x20,$/;"	e	enum:fluid_midi_control_change
BANK_SELECT_MSB	fluid_midi.h	/^  BANK_SELECT_MSB = 0x00,$/;"	e	enum:fluid_midi_control_change
BREATH_LSB	fluid_midi.h	/^  BREATH_LSB = 0x22,$/;"	e	enum:fluid_midi_control_change
BREATH_MSB	fluid_midi.h	/^  BREATH_MSB = 0x02,$/;"	e	enum:fluid_midi_control_change
BUFFER_LENGTH	fluid_alsa.c	50;"	d	file:
BUFFER_LENGTH	fluid_oss.c	46;"	d	file:
BUFFER_LENGTH	fluid_winmidi.c	36;"	d	file:
BufferParms	fluid_dart.c	/^    MCI_BUFFER_PARMS BufferParms;               \/* Device buffer parms     *\/$/;"	m	struct:__anon10	file:
Bypass	fluid_ladspa.h	/^  fluid_LADSPA_BypassState Bypass;$/;"	m	struct:__anon36
CHANNEL_PRESSURE	fluid_midi.h	/^  CHANNEL_PRESSURE = 0xd0,$/;"	e	enum:fluid_midi_event_type
CHNKIDSTR	fluid_defsfont.h	236;"	d
CONTROL_CHANGE	fluid_midi.h	/^  CONTROL_CHANGE = 0xb0,$/;"	e	enum:fluid_midi_event_type
COREAUDIO_SUPPORT	config_macosx_pb.h	27;"	d
COREMIDI_SUPPORT	config_macosx_pb.h	28;"	d
DARWIN	config_macosx.h	20;"	d
DARWIN	config_macosx_pb.h	7;"	d
DATA_ENTRY_DECR	fluid_midi.h	/^  DATA_ENTRY_DECR = 0x61,$/;"	e	enum:fluid_midi_control_change
DATA_ENTRY_INCR	fluid_midi.h	/^  DATA_ENTRY_INCR = 0x60,$/;"	e	enum:fluid_midi_control_change
DATA_ENTRY_LSB	fluid_midi.h	/^  DATA_ENTRY_LSB = 0x26,$/;"	e	enum:fluid_midi_control_change
DATA_ENTRY_MSB	fluid_midi.h	/^  DATA_ENTRY_MSB = 0x06,$/;"	e	enum:fluid_midi_control_change
DC_OFFSET	fluid_rev.c	62;"	d	file:
DEBUG	config_macosx_pb.h	22;"	d
DEFAULT_FRAG_COUNT	fluidsynth.c	58;"	d	file:
DEFAULT_FRAG_COUNT	fluidsynth.c	60;"	d	file:
DITHER_CHANNELS	fluid_synth.c	1761;"	d	file:
DITHER_SIZE	fluid_synth.c	1760;"	d	file:
DRUM_INST_BANK	fluid_synth.h	48;"	d
DSOUND_SUPPORT	config_win32.h	13;"	d
DSOUND_SUPPORT	fluidsynth_priv.h	124;"	d
DllMain	fluid_dll.c	/^BOOL WINAPI DllMain(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)$/;"	f
EFFECTS1_LSB	fluid_midi.h	/^  EFFECTS1_LSB = 0x2C,$/;"	e	enum:fluid_midi_control_change
EFFECTS1_MSB	fluid_midi.h	/^  EFFECTS1_MSB = 0x0C,$/;"	e	enum:fluid_midi_control_change
EFFECTS2_LSB	fluid_midi.h	/^  EFFECTS2_LSB = 0x2D,$/;"	e	enum:fluid_midi_control_change
EFFECTS2_MSB	fluid_midi.h	/^  EFFECTS2_MSB = 0x0D,$/;"	e	enum:fluid_midi_control_change
EFFECTS_DEPTH1	fluid_midi.h	/^  EFFECTS_DEPTH1 = 0x5B,$/;"	e	enum:fluid_midi_control_change
EFFECTS_DEPTH2	fluid_midi.h	/^  EFFECTS_DEPTH2 = 0x5C,$/;"	e	enum:fluid_midi_control_change
EFFECTS_DEPTH3	fluid_midi.h	/^  EFFECTS_DEPTH3 = 0x5D,$/;"	e	enum:fluid_midi_control_change
EFFECTS_DEPTH4	fluid_midi.h	/^  EFFECTS_DEPTH4 = 0x5E,$/;"	e	enum:fluid_midi_control_change
EFFECTS_DEPTH5	fluid_midi.h	/^  EFFECTS_DEPTH5 = 0x5F,$/;"	e	enum:fluid_midi_control_change
EXPRESSION_LSB	fluid_midi.h	/^  EXPRESSION_LSB = 0x2B,$/;"	e	enum:fluid_midi_control_change
EXPRESSION_MSB	fluid_midi.h	/^  EXPRESSION_MSB = 0x0B,$/;"	e	enum:fluid_midi_control_change
ErrCorr	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrEof	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrFatal	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrMax	fluid_defsfont.h	424;"	d
ErrMem	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrRead	fluid_defsfont.h	/^  ErrRead, ErrWrite$/;"	e	enum:__anon21
ErrStatus	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrWarn	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrWrite	fluid_defsfont.h	/^  ErrRead, ErrWrite$/;"	e	enum:__anon21
Errno	fluid_defsfont.h	/^{ ErrWarn, ErrFatal, ErrStatus, ErrCorr, ErrEof, ErrMem, Errno,$/;"	e	enum:__anon21
ErrnoEnd	fluid_defsfont.h	426;"	d
ErrnoStart	fluid_defsfont.h	425;"	d
FAIL	fluid_defsfont.h	416;"	d
FALSE	fluid_defsfont.h	335;"	d
FILTER_TRANSITION_SAMPLES	fluid_voice.c	568;"	d	file:
FLUIDSYNTH_API	include/fluidsynth.h	32;"	d
FLUIDSYNTH_API	include/fluidsynth.h	34;"	d
FLUIDSYNTH_API	include/fluidsynth.h	36;"	d
FLUIDSYNTH_API	include/fluidsynth.h	40;"	d
FLUIDSYNTH_API	include/fluidsynth.h	43;"	d
FLUIDSYNTH_VERSION	include/fluidsynth/version.h	29;"	d
FLUIDSYNTH_VERSION_MAJOR	include/fluidsynth/version.h	30;"	d
FLUIDSYNTH_VERSION_MICRO	include/fluidsynth/version.h	32;"	d
FLUIDSYNTH_VERSION_MINOR	include/fluidsynth/version.h	31;"	d
FLUID_ALSA_DEFAULT_MIDI_DEVICE	fluid_alsa.c	47;"	d	file:
FLUID_ALSA_DEFAULT_SEQ_DEVICE	fluid_alsa.c	48;"	d	file:
FLUID_ARRAY	fluidsynth_priv.h	257;"	d
FLUID_ASSERT	fluidsynth_priv.h	296;"	d
FLUID_ASSERT_P	fluidsynth_priv.h	297;"	d
FLUID_ATTEN_AMP_SIZE	fluid_conv.h	29;"	d
FLUID_ATTEN_POWER_FACTOR	fluid_conv.h	36;"	d
FLUID_BUFSIZE	fluidsynth_priv.h	242;"	d
FLUID_CB_AMP_SIZE	fluid_conv.h	28;"	d
FLUID_CENTS_HZ_SIZE	fluid_conv.h	26;"	d
FLUID_CHORUS_DEFAULT_DEPTH	include/fluidsynth/synth.h	330;"	d
FLUID_CHORUS_DEFAULT_LEVEL	include/fluidsynth/synth.h	328;"	d
FLUID_CHORUS_DEFAULT_N	include/fluidsynth/synth.h	327;"	d
FLUID_CHORUS_DEFAULT_SPEED	include/fluidsynth/synth.h	329;"	d
FLUID_CHORUS_DEFAULT_TYPE	include/fluidsynth/synth.h	331;"	d
FLUID_CHORUS_MOD_SINE	include/fluidsynth/synth.h	/^  FLUID_CHORUS_MOD_SINE = 0,$/;"	e	enum:fluid_chorus_mod
FLUID_CHORUS_MOD_TRIANGLE	include/fluidsynth/synth.h	/^  FLUID_CHORUS_MOD_TRIANGLE = 1$/;"	e	enum:fluid_chorus_mod
FLUID_DBG	include/fluidsynth/log.h	/^  FLUID_DBG,     \/**< Debugging messages *\/$/;"	e	enum:fluid_log_level
FLUID_DBG_DRIVER	fluid_sys.h	/^  FLUID_DBG_DRIVER = 1$/;"	e	enum:fluid_debug_level
FLUID_ERR	include/fluidsynth/log.h	/^  FLUID_ERR,     \/**< Serious error occurred *\/$/;"	e	enum:fluid_log_level
FLUID_EVT_ENTRY_INSERT	fluid_event_priv.h	/^  FLUID_EVT_ENTRY_INSERT = 0,$/;"	e	enum:fluid_evt_entry_type
FLUID_EVT_ENTRY_REMOVE	fluid_event_priv.h	/^  FLUID_EVT_ENTRY_REMOVE$/;"	e	enum:fluid_evt_entry_type
FLUID_FAILED	fluidsynth_priv.h	/^  FLUID_FAILED = -1$/;"	e	enum:__anon9
FLUID_FCLOSE	fluidsynth_priv.h	260;"	d
FLUID_FLUSH	fluidsynth_priv.h	283;"	d
FLUID_FLUSH	fluidsynth_priv.h	286;"	d
FLUID_FOPEN	fluidsynth_priv.h	259;"	d
FLUID_FPRINTF	fluidsynth_priv.h	276;"	d
FLUID_FRACT_MAX	fluid_phase.h	38;"	d
FLUID_FREAD	fluidsynth_priv.h	261;"	d
FLUID_FREE	fluidsynth_priv.h	258;"	d
FLUID_FSEEK	fluidsynth_priv.h	262;"	d
FLUID_HASHTABLE_RESIZE	fluid_hash.c	59;"	d	file:
FLUID_HINSTANCE	fluid_dsound.c	43;"	d	file:
FLUID_HINT_BOUNDED_ABOVE	include/fluidsynth/settings.h	73;"	d
FLUID_HINT_BOUNDED_BELOW	include/fluidsynth/settings.h	65;"	d
FLUID_HINT_FILENAME	include/fluidsynth/settings.h	105;"	d
FLUID_HINT_INTEGER	include/fluidsynth/settings.h	102;"	d
FLUID_HINT_LOGARITHMIC	include/fluidsynth/settings.h	94;"	d
FLUID_HINT_OPTIONLIST	include/fluidsynth/settings.h	106;"	d
FLUID_HINT_SAMPLE_RATE	include/fluidsynth/settings.h	89;"	d
FLUID_HINT_TOGGLED	include/fluidsynth/settings.h	81;"	d
FLUID_INFO	include/fluidsynth/log.h	/^  FLUID_INFO,    \/**< Verbose informational messages *\/$/;"	e	enum:fluid_log_level
FLUID_INTERP_4THORDER	include/fluidsynth/synth.h	/^  FLUID_INTERP_4THORDER = 4,$/;"	e	enum:fluid_interp
FLUID_INTERP_7THORDER	include/fluidsynth/synth.h	/^  FLUID_INTERP_7THORDER = 7,$/;"	e	enum:fluid_interp
FLUID_INTERP_BITS	fluid_phase.h	33;"	d
FLUID_INTERP_BITS_MASK	fluid_phase.h	34;"	d
FLUID_INTERP_BITS_SHIFT	fluid_phase.h	35;"	d
FLUID_INTERP_DEFAULT	include/fluidsynth/synth.h	/^  FLUID_INTERP_DEFAULT = 4,$/;"	e	enum:fluid_interp
FLUID_INTERP_HIGHEST	include/fluidsynth/synth.h	/^  FLUID_INTERP_HIGHEST=7$/;"	e	enum:fluid_interp
FLUID_INTERP_LINEAR	include/fluidsynth/synth.h	/^  FLUID_INTERP_LINEAR = 1,$/;"	e	enum:fluid_interp
FLUID_INTERP_MAX	fluid_phase.h	36;"	d
FLUID_INTERP_NONE	include/fluidsynth/synth.h	/^  FLUID_INTERP_NONE = 0,$/;"	e	enum:fluid_interp
FLUID_INT_TYPE	include/fluidsynth/settings.h	/^  FLUID_INT_TYPE,$/;"	e	enum:fluid_types_enum
FLUID_LADSPA_MaxLibs	fluid_ladspa.h	46;"	d
FLUID_LADSPA_MaxNodes	fluid_ladspa.h	50;"	d
FLUID_LADSPA_MaxPathLength	fluid_ladspa.h	54;"	d
FLUID_LADSPA_MaxPlugins	fluid_ladspa.h	48;"	d
FLUID_LADSPA_MaxTokens	fluid_ladspa.h	52;"	d
FLUID_LOG	fluidsynth_priv.h	289;"	d
FLUID_LOOP_DURING_RELEASE	fluid_synth.h	/^  FLUID_LOOP_DURING_RELEASE = 1,$/;"	e	enum:fluid_loop
FLUID_LOOP_UNTIL_RELEASE	fluid_synth.h	/^  FLUID_LOOP_UNTIL_RELEASE = 3$/;"	e	enum:fluid_loop
FLUID_MALLOC	fluidsynth_priv.h	254;"	d
FLUID_MAX_AUDIBLE_FILTER_FC	fluid_voice.c	32;"	d	file:
FLUID_MEMCPY	fluidsynth_priv.h	263;"	d
FLUID_MEMSET	fluidsynth_priv.h	264;"	d
FLUID_MIDI_DONE	fluid_midi.h	/^  FLUID_MIDI_DONE$/;"	e	enum:fluid_driver_status
FLUID_MIDI_LISTENING	fluid_midi.h	/^  FLUID_MIDI_LISTENING,$/;"	e	enum:fluid_driver_status
FLUID_MIDI_PARSER_MAX_PAR	fluid_midi.h	313;"	d
FLUID_MIDI_READY	fluid_midi.h	/^  FLUID_MIDI_READY,$/;"	e	enum:fluid_driver_status
FLUID_MIN_AUDIBLE_FILTER_Q	fluid_voice.c	33;"	d	file:
FLUID_MIN_LOOP_PAD	fluid_voice.c	43;"	d	file:
FLUID_MIN_LOOP_SIZE	fluid_voice.c	42;"	d	file:
FLUID_MIN_VOLENVRELEASE	fluid_voice.c	46;"	d	file:
FLUID_MOD_BIPOLAR	include/fluidsynth/mod.h	/^  FLUID_MOD_BIPOLAR = 2,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_CC	include/fluidsynth/mod.h	/^  FLUID_MOD_CC = 16$/;"	e	enum:fluid_mod_flags
FLUID_MOD_CHANNELPRESSURE	include/fluidsynth/mod.h	/^  FLUID_MOD_CHANNELPRESSURE = 13,$/;"	e	enum:fluid_mod_src
FLUID_MOD_CONCAVE	include/fluidsynth/mod.h	/^  FLUID_MOD_CONCAVE = 4,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_CONVEX	include/fluidsynth/mod.h	/^  FLUID_MOD_CONVEX = 8,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_GC	include/fluidsynth/mod.h	/^  FLUID_MOD_GC = 0,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_KEY	include/fluidsynth/mod.h	/^  FLUID_MOD_KEY = 3,$/;"	e	enum:fluid_mod_src
FLUID_MOD_KEYPRESSURE	include/fluidsynth/mod.h	/^  FLUID_MOD_KEYPRESSURE = 10,$/;"	e	enum:fluid_mod_src
FLUID_MOD_LINEAR	include/fluidsynth/mod.h	/^  FLUID_MOD_LINEAR = 0,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_NEGATIVE	include/fluidsynth/mod.h	/^  FLUID_MOD_NEGATIVE = 1,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_NONE	include/fluidsynth/mod.h	/^  FLUID_MOD_NONE = 0,$/;"	e	enum:fluid_mod_src
FLUID_MOD_PITCHWHEEL	include/fluidsynth/mod.h	/^  FLUID_MOD_PITCHWHEEL = 14,$/;"	e	enum:fluid_mod_src
FLUID_MOD_PITCHWHEELSENS	include/fluidsynth/mod.h	/^  FLUID_MOD_PITCHWHEELSENS = 16$/;"	e	enum:fluid_mod_src
FLUID_MOD_POSITIVE	include/fluidsynth/mod.h	/^  FLUID_MOD_POSITIVE = 0,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_SWITCH	include/fluidsynth/mod.h	/^  FLUID_MOD_SWITCH = 12,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_UNIPOLAR	include/fluidsynth/mod.h	/^  FLUID_MOD_UNIPOLAR = 0,$/;"	e	enum:fluid_mod_flags
FLUID_MOD_VELOCITY	include/fluidsynth/mod.h	/^  FLUID_MOD_VELOCITY = 2,$/;"	e	enum:fluid_mod_src
FLUID_NEW	fluidsynth_priv.h	256;"	d
FLUID_NOISE_FLOOR	fluid_voice.c	39;"	d	file:
FLUID_NOTUSED	fluid_synth.h	/^  FLUID_NOTUSED = 2,$/;"	e	enum:fluid_loop
FLUID_NO_TYPE	include/fluidsynth/settings.h	/^  FLUID_NO_TYPE = -1,$/;"	e	enum:fluid_types_enum
FLUID_NUM_MOD	include/fluidsynth/mod.h	31;"	d
FLUID_NUM_PROGRAMS	fluid_synth.h	47;"	d
FLUID_NUM_TYPE	include/fluidsynth/settings.h	/^  FLUID_NUM_TYPE,$/;"	e	enum:fluid_types_enum
FLUID_OK	fluidsynth_priv.h	/^  FLUID_OK = 0,$/;"	e	enum:__anon9
FLUID_PANIC	include/fluidsynth/log.h	/^  FLUID_PANIC,   \/**< The synth can't function correctly any more *\/$/;"	e	enum:fluid_log_level
FLUID_PAN_SIZE	fluid_conv.h	30;"	d
FLUID_PLAYER_DONE	fluid_midi.h	/^  FLUID_PLAYER_DONE$/;"	e	enum:fluid_player_status
FLUID_PLAYER_PLAYING	fluid_midi.h	/^  FLUID_PLAYER_PLAYING,$/;"	e	enum:fluid_player_status
FLUID_PLAYER_READY	fluid_midi.h	/^  FLUID_PLAYER_READY,$/;"	e	enum:fluid_player_status
FLUID_PRESET_SELECTED	include/fluidsynth/sfont.h	/^    FLUID_PRESET_SELECTED,$/;"	e	enum:__anon4
FLUID_PRESET_UNSELECTED	include/fluidsynth/sfont.h	/^    FLUID_PRESET_UNSELECTED,$/;"	e	enum:__anon4
FLUID_PRINTF	fluidsynth_priv.h	282;"	d
FLUID_PRINTF	fluidsynth_priv.h	285;"	d
FLUID_PROF_LAST	fluid_sys.h	/^  FLUID_PROF_LAST$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK,$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK_CHORUS	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK_CHORUS,$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK_CLEAR	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK_CLEAR,$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK_REVERB	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK_REVERB,$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK_VOICE	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK_VOICE,$/;"	e	enum:__anon26
FLUID_PROF_ONE_BLOCK_VOICES	fluid_sys.h	/^  FLUID_PROF_ONE_BLOCK_VOICES,$/;"	e	enum:__anon26
FLUID_PROF_VOICE_NOTE	fluid_sys.h	/^  FLUID_PROF_VOICE_NOTE,$/;"	e	enum:__anon26
FLUID_PROF_VOICE_RELEASE	fluid_sys.h	/^  FLUID_PROF_VOICE_RELEASE,$/;"	e	enum:__anon26
FLUID_PROF_WRITE_S16	fluid_sys.h	/^  FLUID_PROF_WRITE_S16,$/;"	e	enum:__anon26
FLUID_REALLOC	fluidsynth_priv.h	255;"	d
FLUID_REVERB_DEFAULT_DAMP	include/fluidsynth/synth.h	292;"	d
FLUID_REVERB_DEFAULT_LEVEL	include/fluidsynth/synth.h	294;"	d
FLUID_REVERB_DEFAULT_ROOMSIZE	include/fluidsynth/synth.h	291;"	d
FLUID_REVERB_DEFAULT_WIDTH	include/fluidsynth/synth.h	293;"	d
FLUID_SAMPLESANITY_CHECK	fluid_voice.h	279;"	d
FLUID_SAMPLESANITY_STARTUP	fluid_voice.h	280;"	d
FLUID_SAMPLETYPE_LEFT	include/fluidsynth/sfont.h	183;"	d
FLUID_SAMPLETYPE_LINKED	include/fluidsynth/sfont.h	184;"	d
FLUID_SAMPLETYPE_MONO	include/fluidsynth/sfont.h	181;"	d
FLUID_SAMPLETYPE_RIGHT	include/fluidsynth/sfont.h	182;"	d
FLUID_SAMPLETYPE_ROM	include/fluidsynth/sfont.h	185;"	d
FLUID_SAMPLE_DONE	include/fluidsynth/sfont.h	/^    FLUID_SAMPLE_DONE$/;"	e	enum:__anon4
FLUID_SAMPLE_FORMAT	fluid_synth.h	51;"	d
FLUID_SAMPLE_FORMAT	fluid_synth.h	53;"	d
FLUID_SEQUENCER_EVENTS_MAX	fluid_seq.c	40;"	d	file:
FLUID_SEQ_ALLNOTESOFF	include/fluidsynth/event.h	/^  FLUID_SEQ_ALLNOTESOFF,	\/**< All notes off event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_ALLSOUNDSOFF	include/fluidsynth/event.h	/^  FLUID_SEQ_ALLSOUNDSOFF,	\/**< All sounds off event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_ANYCONTROLCHANGE	include/fluidsynth/event.h	/^  FLUID_SEQ_ANYCONTROLCHANGE,	\/**< DOCME (used for remove_events only) *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_BANKSELECT	include/fluidsynth/event.h	/^  FLUID_SEQ_BANKSELECT,		\/**< Bank select message *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_CHORUSSEND	include/fluidsynth/event.h	/^  FLUID_SEQ_CHORUSSEND,		\/**< Chorus send set event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_CONTROLCHANGE	include/fluidsynth/event.h	/^  FLUID_SEQ_CONTROLCHANGE,	\/**< MIDI control change event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_LASTEVENT	include/fluidsynth/event.h	/^  FLUID_SEQ_LASTEVENT		\/**< Defines the count of event enums *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_MODULATION	include/fluidsynth/event.h	/^  FLUID_SEQ_MODULATION,		\/**< Modulation controller event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_NOTE	include/fluidsynth/event.h	/^  FLUID_SEQ_NOTE = 0,		\/**< Note event (DOCME) *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_NOTEOFF	include/fluidsynth/event.h	/^  FLUID_SEQ_NOTEOFF,		\/**< Note off event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_NOTEON	include/fluidsynth/event.h	/^  FLUID_SEQ_NOTEON,		\/**< Note on event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_PAN	include/fluidsynth/event.h	/^  FLUID_SEQ_PAN,		\/**< Stereo pan set event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_PITCHBEND	include/fluidsynth/event.h	/^  FLUID_SEQ_PITCHBEND,		\/**< Pitch bend message *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_PITCHWHHELSENS	include/fluidsynth/event.h	/^  FLUID_SEQ_PITCHWHHELSENS,	\/**< Pitch wheel sensitivity set message *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_PROGRAMCHANGE	include/fluidsynth/event.h	/^  FLUID_SEQ_PROGRAMCHANGE,	\/**< Program change message *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_PROGRAMSELECT	include/fluidsynth/event.h	/^  FLUID_SEQ_PROGRAMSELECT,	\/**< Program select message (DOCME) *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_REVERBSEND	include/fluidsynth/event.h	/^  FLUID_SEQ_REVERBSEND,		\/**< Reverb send set event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_SUSTAIN	include/fluidsynth/event.h	/^  FLUID_SEQ_SUSTAIN,		\/**< Sustain controller event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_TIMER	include/fluidsynth/event.h	/^  FLUID_SEQ_TIMER,		\/**< Timer event (DOCME) *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_VOLUME	include/fluidsynth/event.h	/^  FLUID_SEQ_VOLUME,		\/**< Volume set event *\/$/;"	e	enum:fluid_seq_event_type
FLUID_SEQ_WITH_TRACE	include/fluidsynth/seq.h	98;"	d
FLUID_SET_TYPE	include/fluidsynth/settings.h	/^  FLUID_SET_TYPE$/;"	e	enum:fluid_types_enum
FLUID_SPRINTF	fluidsynth_priv.h	275;"	d
FLUID_STRCHR	fluidsynth_priv.h	269;"	d
FLUID_STRCMP	fluidsynth_priv.h	266;"	d
FLUID_STRCPY	fluidsynth_priv.h	268;"	d
FLUID_STRDUP	fluidsynth_priv.h	271;"	d
FLUID_STRDUP	fluidsynth_priv.h	273;"	d
FLUID_STRLEN	fluidsynth_priv.h	265;"	d
FLUID_STRNCMP	fluidsynth_priv.h	267;"	d
FLUID_STR_TYPE	include/fluidsynth/settings.h	/^  FLUID_STR_TYPE,$/;"	e	enum:fluid_types_enum
FLUID_SYNTH_CLEAN	fluid_synth.h	/^  FLUID_SYNTH_CLEAN,$/;"	e	enum:fluid_synth_status
FLUID_SYNTH_PLAYING	fluid_synth.h	/^  FLUID_SYNTH_PLAYING,$/;"	e	enum:fluid_synth_status
FLUID_SYNTH_QUIET	fluid_synth.h	/^  FLUID_SYNTH_QUIET,$/;"	e	enum:fluid_synth_status
FLUID_SYNTH_STOPPED	fluid_synth.h	/^  FLUID_SYNTH_STOPPED$/;"	e	enum:fluid_synth_status
FLUID_UNLOOPED	fluid_synth.h	/^  FLUID_UNLOOPED = 0,$/;"	e	enum:fluid_loop
FLUID_VEL_CB_SIZE	fluid_conv.h	27;"	d
FLUID_VOICE_ADD	include/fluidsynth/voice.h	/^  FLUID_VOICE_ADD,$/;"	e	enum:fluid_voice_add_mod
FLUID_VOICE_CLEAN	fluid_voice.h	/^	FLUID_VOICE_CLEAN,$/;"	e	enum:fluid_voice_status
FLUID_VOICE_DEFAULT	include/fluidsynth/voice.h	/^  FLUID_VOICE_DEFAULT$/;"	e	enum:fluid_voice_add_mod
FLUID_VOICE_ENVATTACK	fluid_voice.h	/^	FLUID_VOICE_ENVATTACK,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVDECAY	fluid_voice.h	/^	FLUID_VOICE_ENVDECAY,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVDELAY	fluid_voice.h	/^	FLUID_VOICE_ENVDELAY,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVFINISHED	fluid_voice.h	/^	FLUID_VOICE_ENVFINISHED,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVHOLD	fluid_voice.h	/^	FLUID_VOICE_ENVHOLD,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVLAST	fluid_voice.h	/^	FLUID_VOICE_ENVLAST$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVRELEASE	fluid_voice.h	/^	FLUID_VOICE_ENVRELEASE,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_ENVSUSTAIN	fluid_voice.h	/^	FLUID_VOICE_ENVSUSTAIN,$/;"	e	enum:fluid_voice_envelope_index_t
FLUID_VOICE_OFF	fluid_voice.h	/^	FLUID_VOICE_OFF$/;"	e	enum:fluid_voice_status
FLUID_VOICE_ON	fluid_voice.h	/^	FLUID_VOICE_ON,$/;"	e	enum:fluid_voice_status
FLUID_VOICE_OVERWRITE	include/fluidsynth/voice.h	/^  FLUID_VOICE_OVERWRITE,$/;"	e	enum:fluid_voice_add_mod
FLUID_VOICE_SUSTAINED	fluid_voice.h	/^	FLUID_VOICE_SUSTAINED,$/;"	e	enum:fluid_voice_status
FLUID_WARN	include/fluidsynth/log.h	/^  FLUID_WARN,    \/**< Warning *\/$/;"	e	enum:fluid_log_level
FLUID_WORKLINELENGTH	fluid_cmd.c	39;"	d	file:
FOOT_LSB	fluid_midi.h	/^  FOOT_LSB = 0x24,$/;"	e	enum:fluid_midi_control_change
FOOT_MSB	fluid_midi.h	/^  FOOT_MSB = 0x04,$/;"	e	enum:fluid_midi_control_change
FSKIP	fluid_defsfont.c	1726;"	d	file:
FSKIPW	fluid_defsfont.c	1730;"	d	file:
GEN_ABS_NRPN	include/fluidsynth/gen.h	/^  GEN_ABS_NRPN		\/**< DOCME *\/$/;"	e	enum:fluid_gen_flags
GEN_ATTENUATION	include/fluidsynth/gen.h	/^  GEN_ATTENUATION,		\/**< Initial volume attenuation *\/$/;"	e	enum:fluid_gen_type
GEN_CHORUSSEND	include/fluidsynth/gen.h	/^  GEN_CHORUSSEND,		\/**< Chorus send amount *\/$/;"	e	enum:fluid_gen_type
GEN_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	3003;"	d	file:
GEN_COARSETUNE	include/fluidsynth/gen.h	/^  GEN_COARSETUNE,		\/**< Coarse tuning *\/$/;"	e	enum:fluid_gen_type
GEN_ENDADDRCOARSEOFS	include/fluidsynth/gen.h	/^  GEN_ENDADDRCOARSEOFS,		\/**< Sample end address coarse offset (X 32768) *\/$/;"	e	enum:fluid_gen_type
GEN_ENDADDROFS	include/fluidsynth/gen.h	/^  GEN_ENDADDROFS,		\/**< Sample end address offset (-32767-0) *\/$/;"	e	enum:fluid_gen_type
GEN_ENDLOOPADDRCOARSEOFS	include/fluidsynth/gen.h	/^  GEN_ENDLOOPADDRCOARSEOFS,	\/**< Sample end loop address coarse offset (X 32768) *\/$/;"	e	enum:fluid_gen_type
GEN_ENDLOOPADDROFS	include/fluidsynth/gen.h	/^  GEN_ENDLOOPADDROFS,		\/**< Sample loop end address offset (-32767-32767) *\/$/;"	e	enum:fluid_gen_type
GEN_EXCLUSIVECLASS	include/fluidsynth/gen.h	/^  GEN_EXCLUSIVECLASS,		\/**< Exclusive class number *\/$/;"	e	enum:fluid_gen_type
GEN_FILTERFC	include/fluidsynth/gen.h	/^  GEN_FILTERFC,			\/**< Filter cutoff *\/$/;"	e	enum:fluid_gen_type
GEN_FILTERQ	include/fluidsynth/gen.h	/^  GEN_FILTERQ,			\/**< Filter Q *\/$/;"	e	enum:fluid_gen_type
GEN_FINETUNE	include/fluidsynth/gen.h	/^  GEN_FINETUNE,			\/**< Fine tuning *\/$/;"	e	enum:fluid_gen_type
GEN_INSTRUMENT	include/fluidsynth/gen.h	/^  GEN_INSTRUMENT,		\/**< Instrument ID (shouldn't be set by user) *\/$/;"	e	enum:fluid_gen_type
GEN_KEYNUM	include/fluidsynth/gen.h	/^  GEN_KEYNUM,			\/**< Fixed MIDI note number *\/$/;"	e	enum:fluid_gen_type
GEN_KEYRANGE	include/fluidsynth/gen.h	/^  GEN_KEYRANGE,			\/**< MIDI note range *\/$/;"	e	enum:fluid_gen_type
GEN_KEYTOMODENVDECAY	include/fluidsynth/gen.h	/^  GEN_KEYTOMODENVDECAY,		\/**< Key to modulation envelope decay *\/$/;"	e	enum:fluid_gen_type
GEN_KEYTOMODENVHOLD	include/fluidsynth/gen.h	/^  GEN_KEYTOMODENVHOLD,		\/**< Key to modulation envelope hold *\/$/;"	e	enum:fluid_gen_type
GEN_KEYTOVOLENVDECAY	include/fluidsynth/gen.h	/^  GEN_KEYTOVOLENVDECAY,		\/**< Key to volume envelope decay *\/$/;"	e	enum:fluid_gen_type
GEN_KEYTOVOLENVHOLD	include/fluidsynth/gen.h	/^  GEN_KEYTOVOLENVHOLD,		\/**< Key to volume envelope hold *\/$/;"	e	enum:fluid_gen_type
GEN_LAST	include/fluidsynth/gen.h	/^  GEN_LAST			\/**< Value defines the count of generators (#fluid_gen_type) *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVATTACK	include/fluidsynth/gen.h	/^  GEN_MODENVATTACK,		\/**< Modulation envelope attack *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVDECAY	include/fluidsynth/gen.h	/^  GEN_MODENVDECAY,		\/**< Modulation envelope decay *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVDELAY	include/fluidsynth/gen.h	/^  GEN_MODENVDELAY,		\/**< Modulation envelope delay *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVHOLD	include/fluidsynth/gen.h	/^  GEN_MODENVHOLD,		\/**< Modulation envelope hold *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVRELEASE	include/fluidsynth/gen.h	/^  GEN_MODENVRELEASE,		\/**< Modulation envelope release *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVSUSTAIN	include/fluidsynth/gen.h	/^  GEN_MODENVSUSTAIN,		\/**< Modulation envelope sustain *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVTOFILTERFC	include/fluidsynth/gen.h	/^  GEN_MODENVTOFILTERFC,		\/**< Modulation envelope to filter cutoff *\/$/;"	e	enum:fluid_gen_type
GEN_MODENVTOPITCH	include/fluidsynth/gen.h	/^  GEN_MODENVTOPITCH,		\/**< Modulation envelope to pitch *\/$/;"	e	enum:fluid_gen_type
GEN_MODLFODELAY	include/fluidsynth/gen.h	/^  GEN_MODLFODELAY,		\/**< Modulation LFO delay *\/$/;"	e	enum:fluid_gen_type
GEN_MODLFOFREQ	include/fluidsynth/gen.h	/^  GEN_MODLFOFREQ,		\/**< Modulation LFO frequency *\/$/;"	e	enum:fluid_gen_type
GEN_MODLFOTOFILTERFC	include/fluidsynth/gen.h	/^  GEN_MODLFOTOFILTERFC,		\/**< Modulation LFO to filter cutoff *\/$/;"	e	enum:fluid_gen_type
GEN_MODLFOTOPITCH	include/fluidsynth/gen.h	/^  GEN_MODLFOTOPITCH,		\/**< Modulation LFO to pitch *\/$/;"	e	enum:fluid_gen_type
GEN_MODLFOTOVOL	include/fluidsynth/gen.h	/^  GEN_MODLFOTOVOL,		\/**< Modulation LFO to volume *\/$/;"	e	enum:fluid_gen_type
GEN_OVERRIDEROOTKEY	include/fluidsynth/gen.h	/^  GEN_OVERRIDEROOTKEY,		\/**< Sample root note override *\/$/;"	e	enum:fluid_gen_type
GEN_PAN	include/fluidsynth/gen.h	/^  GEN_PAN,			\/**< Stereo panning *\/$/;"	e	enum:fluid_gen_type
GEN_PITCH	include/fluidsynth/gen.h	/^  GEN_PITCH,			\/**< Pitch (NOTE: Not a real SoundFont generator) *\/$/;"	e	enum:fluid_gen_type
GEN_RESERVED1	include/fluidsynth/gen.h	/^  GEN_RESERVED1,		\/**< Reserved *\/$/;"	e	enum:fluid_gen_type
GEN_RESERVED2	include/fluidsynth/gen.h	/^  GEN_RESERVED2,		\/**< Reserved *\/$/;"	e	enum:fluid_gen_type
GEN_RESERVED3	include/fluidsynth/gen.h	/^  GEN_RESERVED3,		\/**< Reserved *\/$/;"	e	enum:fluid_gen_type
GEN_REVERBSEND	include/fluidsynth/gen.h	/^  GEN_REVERBSEND,		\/**< Reverb send amount *\/$/;"	e	enum:fluid_gen_type
GEN_SAMPLEID	include/fluidsynth/gen.h	/^  GEN_SAMPLEID,			\/**< Sample ID (shouldn't be set by user) *\/$/;"	e	enum:fluid_gen_type
GEN_SAMPLEMODE	include/fluidsynth/gen.h	/^  GEN_SAMPLEMODE,		\/**< Sample mode flags *\/$/;"	e	enum:fluid_gen_type
GEN_SCALETUNE	include/fluidsynth/gen.h	/^  GEN_SCALETUNE,		\/**< Scale tuning *\/$/;"	e	enum:fluid_gen_type
GEN_SET	include/fluidsynth/gen.h	/^  GEN_SET,		\/**< Generator value is set *\/$/;"	e	enum:fluid_gen_flags
GEN_STARTADDRCOARSEOFS	include/fluidsynth/gen.h	/^  GEN_STARTADDRCOARSEOFS,	\/**< Sample start address coarse offset (X 32768) *\/$/;"	e	enum:fluid_gen_type
GEN_STARTADDROFS	include/fluidsynth/gen.h	/^  GEN_STARTADDROFS,		\/**< Sample start address offset (0-32767) *\/$/;"	e	enum:fluid_gen_type
GEN_STARTLOOPADDRCOARSEOFS	include/fluidsynth/gen.h	/^  GEN_STARTLOOPADDRCOARSEOFS,	\/**< Sample start loop address coarse offset (X 32768) *\/$/;"	e	enum:fluid_gen_type
GEN_STARTLOOPADDROFS	include/fluidsynth/gen.h	/^  GEN_STARTLOOPADDROFS,		\/**< Sample loop start address offset (-32767-32767) *\/$/;"	e	enum:fluid_gen_type
GEN_UNUSED	include/fluidsynth/gen.h	/^  GEN_UNUSED,		\/**< Generator value is not set *\/$/;"	e	enum:fluid_gen_flags
GEN_UNUSED1	include/fluidsynth/gen.h	/^  GEN_UNUSED1,			\/**< Unused *\/$/;"	e	enum:fluid_gen_type
GEN_UNUSED2	include/fluidsynth/gen.h	/^  GEN_UNUSED2,			\/**< Unused *\/$/;"	e	enum:fluid_gen_type
GEN_UNUSED3	include/fluidsynth/gen.h	/^  GEN_UNUSED3,			\/**< Unused *\/$/;"	e	enum:fluid_gen_type
GEN_UNUSED4	include/fluidsynth/gen.h	/^  GEN_UNUSED4,			\/**< Unused *\/$/;"	e	enum:fluid_gen_type
GEN_VELOCITY	include/fluidsynth/gen.h	/^  GEN_VELOCITY,			\/**< Fixed MIDI velocity value *\/$/;"	e	enum:fluid_gen_type
GEN_VELRANGE	include/fluidsynth/gen.h	/^  GEN_VELRANGE,			\/**< MIDI velocity range *\/$/;"	e	enum:fluid_gen_type
GEN_VIBLFODELAY	include/fluidsynth/gen.h	/^  GEN_VIBLFODELAY,		\/**< Vibrato LFO delay *\/$/;"	e	enum:fluid_gen_type
GEN_VIBLFOFREQ	include/fluidsynth/gen.h	/^  GEN_VIBLFOFREQ,		\/**< Vibrato LFO frequency *\/$/;"	e	enum:fluid_gen_type
GEN_VIBLFOTOPITCH	include/fluidsynth/gen.h	/^  GEN_VIBLFOTOPITCH,		\/**< Vibrato LFO to pitch *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVATTACK	include/fluidsynth/gen.h	/^  GEN_VOLENVATTACK,		\/**< Volume envelope attack *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVDECAY	include/fluidsynth/gen.h	/^  GEN_VOLENVDECAY,		\/**< Volume envelope decay *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVDELAY	include/fluidsynth/gen.h	/^  GEN_VOLENVDELAY,		\/**< Volume envelope delay *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVHOLD	include/fluidsynth/gen.h	/^  GEN_VOLENVHOLD,		\/**< Volume envelope hold *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVRELEASE	include/fluidsynth/gen.h	/^  GEN_VOLENVRELEASE,		\/**< Volume envelope release *\/$/;"	e	enum:fluid_gen_type
GEN_VOLENVSUSTAIN	include/fluidsynth/gen.h	/^  GEN_VOLENVSUSTAIN,		\/**< Volume envelope sustain *\/$/;"	e	enum:fluid_gen_type
GETOPT_SUPPORT	fluidsynth.c	79;"	d	file:
GINT16_FROM_BE	fluid_defsfont.h	404;"	d
GINT16_FROM_LE	fluid_defsfont.h	402;"	d
GINT16_TO_BE	fluid_defsfont.h	392;"	d
GINT16_TO_LE	fluid_defsfont.h	390;"	d
GINT32_FROM_BE	fluid_defsfont.h	408;"	d
GINT32_FROM_LE	fluid_defsfont.h	406;"	d
GINT32_TO_BE	fluid_defsfont.h	396;"	d
GINT32_TO_LE	fluid_defsfont.h	394;"	d
GINT_TO_POINTER	fluid_defsfont.h	343;"	d
GPC1_LSB	fluid_midi.h	/^  GPC1_LSB = 0x30,$/;"	e	enum:fluid_midi_control_change
GPC1_MSB	fluid_midi.h	/^  GPC1_MSB = 0x10, \/* general purpose controller *\/$/;"	e	enum:fluid_midi_control_change
GPC2_LSB	fluid_midi.h	/^  GPC2_LSB = 0x31,$/;"	e	enum:fluid_midi_control_change
GPC2_MSB	fluid_midi.h	/^  GPC2_MSB = 0x11,$/;"	e	enum:fluid_midi_control_change
GPC3_LSB	fluid_midi.h	/^  GPC3_LSB = 0x32,$/;"	e	enum:fluid_midi_control_change
GPC3_MSB	fluid_midi.h	/^  GPC3_MSB = 0x12,$/;"	e	enum:fluid_midi_control_change
GPC4_LSB	fluid_midi.h	/^  GPC4_LSB = 0x33,$/;"	e	enum:fluid_midi_control_change
GPC4_MSB	fluid_midi.h	/^  GPC4_MSB = 0x13,$/;"	e	enum:fluid_midi_control_change
GPC5	fluid_midi.h	/^  GPC5 = 0x50,$/;"	e	enum:fluid_midi_control_change
GPC6	fluid_midi.h	/^  GPC6 = 0x51,$/;"	e	enum:fluid_midi_control_change
GPC7	fluid_midi.h	/^  GPC7 = 0x52,$/;"	e	enum:fluid_midi_control_change
GPC8	fluid_midi.h	/^  GPC8 = 0x53,$/;"	e	enum:fluid_midi_control_change
GPOINTER_TO_INT	fluid_defsfont.h	342;"	d
GUINT16_FROM_BE	fluid_defsfont.h	405;"	d
GUINT16_FROM_LE	fluid_defsfont.h	403;"	d
GUINT16_SWAP_LE_BE	fluid_defsfont.h	387;"	d
GUINT16_SWAP_LE_BE_CONSTANT	fluid_defsfont.h	378;"	d
GUINT16_TO_BE	fluid_defsfont.h	393;"	d
GUINT16_TO_LE	fluid_defsfont.h	391;"	d
GUINT32_FROM_BE	fluid_defsfont.h	409;"	d
GUINT32_FROM_LE	fluid_defsfont.h	407;"	d
GUINT32_SWAP_LE_BE	fluid_defsfont.h	388;"	d
GUINT32_SWAP_LE_BE_CONSTANT	fluid_defsfont.h	381;"	d
GUINT32_TO_BE	fluid_defsfont.h	397;"	d
GUINT32_TO_LE	fluid_defsfont.h	395;"	d
G_STMT_END	fluid_defsfont.h	363;"	d
G_STMT_END	fluid_defsfont.h	367;"	d
G_STMT_END	fluid_defsfont.h	370;"	d
G_STMT_START	fluid_defsfont.h	362;"	d
G_STMT_START	fluid_defsfont.h	366;"	d
G_STMT_START	fluid_defsfont.h	369;"	d
GenArrSize	fluid_defsfont.h	194;"	d
Gen_Attenuation	fluid_defsfont.h	/^  Gen_Attenuation, Gen_Reserved2, Gen_EndLoopAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_ChorusSend	fluid_defsfont.h	/^  Gen_ModLFO2Vol, Gen_Unused1, Gen_ChorusSend, Gen_ReverbSend, Gen_Pan,$/;"	e	enum:__anon19
Gen_CoarseTune	fluid_defsfont.h	/^  Gen_CoarseTune, Gen_FineTune, Gen_SampleId, Gen_SampleModes,$/;"	e	enum:__anon19
Gen_Count	fluid_defsfont.h	193;"	d
Gen_Dummy	fluid_defsfont.h	/^  Gen_Dummy$/;"	e	enum:__anon19
Gen_EndAddrCoarseOfs	fluid_defsfont.h	/^  Gen_ModLFO2FilterFc, Gen_ModEnv2FilterFc, Gen_EndAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_EndAddrOfs	fluid_defsfont.h	/^{ Gen_StartAddrOfs, Gen_EndAddrOfs, Gen_StartLoopAddrOfs,$/;"	e	enum:__anon19
Gen_EndLoopAddrCoarseOfs	fluid_defsfont.h	/^  Gen_Attenuation, Gen_Reserved2, Gen_EndLoopAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_EndLoopAddrOfs	fluid_defsfont.h	/^  Gen_EndLoopAddrOfs, Gen_StartAddrCoarseOfs, Gen_ModLFO2Pitch,$/;"	e	enum:__anon19
Gen_ExclusiveClass	fluid_defsfont.h	/^  Gen_Reserved3, Gen_ScaleTune, Gen_ExclusiveClass, Gen_OverrideRootKey,$/;"	e	enum:__anon19
Gen_FilterFc	fluid_defsfont.h	/^  Gen_VibLFO2Pitch, Gen_ModEnv2Pitch, Gen_FilterFc, Gen_FilterQ,$/;"	e	enum:__anon19
Gen_FilterQ	fluid_defsfont.h	/^  Gen_VibLFO2Pitch, Gen_ModEnv2Pitch, Gen_FilterFc, Gen_FilterQ,$/;"	e	enum:__anon19
Gen_FineTune	fluid_defsfont.h	/^  Gen_CoarseTune, Gen_FineTune, Gen_SampleId, Gen_SampleModes,$/;"	e	enum:__anon19
Gen_Instrument	fluid_defsfont.h	/^  Gen_Key2VolEnvHold, Gen_Key2VolEnvDecay, Gen_Instrument,$/;"	e	enum:__anon19
Gen_Key2ModEnvDecay	fluid_defsfont.h	/^  Gen_Key2ModEnvDecay, Gen_VolEnvDelay, Gen_VolEnvAttack,$/;"	e	enum:__anon19
Gen_Key2ModEnvHold	fluid_defsfont.h	/^  Gen_ModEnvSustain, Gen_ModEnvRelease, Gen_Key2ModEnvHold,$/;"	e	enum:__anon19
Gen_Key2VolEnvDecay	fluid_defsfont.h	/^  Gen_Key2VolEnvHold, Gen_Key2VolEnvDecay, Gen_Instrument,$/;"	e	enum:__anon19
Gen_Key2VolEnvHold	fluid_defsfont.h	/^  Gen_Key2VolEnvHold, Gen_Key2VolEnvDecay, Gen_Instrument,$/;"	e	enum:__anon19
Gen_KeyRange	fluid_defsfont.h	/^  Gen_Reserved1, Gen_KeyRange, Gen_VelRange,$/;"	e	enum:__anon19
Gen_Keynum	fluid_defsfont.h	/^  Gen_StartLoopAddrCoarseOfs, Gen_Keynum, Gen_Velocity,$/;"	e	enum:__anon19
Gen_MaxValid	fluid_defsfont.h	192;"	d
Gen_ModEnv2FilterFc	fluid_defsfont.h	/^  Gen_ModLFO2FilterFc, Gen_ModEnv2FilterFc, Gen_EndAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_ModEnv2Pitch	fluid_defsfont.h	/^  Gen_VibLFO2Pitch, Gen_ModEnv2Pitch, Gen_FilterFc, Gen_FilterQ,$/;"	e	enum:__anon19
Gen_ModEnvAttack	fluid_defsfont.h	/^  Gen_ModEnvDelay, Gen_ModEnvAttack, Gen_ModEnvHold, Gen_ModEnvDecay,$/;"	e	enum:__anon19
Gen_ModEnvDecay	fluid_defsfont.h	/^  Gen_ModEnvDelay, Gen_ModEnvAttack, Gen_ModEnvHold, Gen_ModEnvDecay,$/;"	e	enum:__anon19
Gen_ModEnvDelay	fluid_defsfont.h	/^  Gen_ModEnvDelay, Gen_ModEnvAttack, Gen_ModEnvHold, Gen_ModEnvDecay,$/;"	e	enum:__anon19
Gen_ModEnvHold	fluid_defsfont.h	/^  Gen_ModEnvDelay, Gen_ModEnvAttack, Gen_ModEnvHold, Gen_ModEnvDecay,$/;"	e	enum:__anon19
Gen_ModEnvRelease	fluid_defsfont.h	/^  Gen_ModEnvSustain, Gen_ModEnvRelease, Gen_Key2ModEnvHold,$/;"	e	enum:__anon19
Gen_ModEnvSustain	fluid_defsfont.h	/^  Gen_ModEnvSustain, Gen_ModEnvRelease, Gen_Key2ModEnvHold,$/;"	e	enum:__anon19
Gen_ModLFO2FilterFc	fluid_defsfont.h	/^  Gen_ModLFO2FilterFc, Gen_ModEnv2FilterFc, Gen_EndAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_ModLFO2Pitch	fluid_defsfont.h	/^  Gen_EndLoopAddrOfs, Gen_StartAddrCoarseOfs, Gen_ModLFO2Pitch,$/;"	e	enum:__anon19
Gen_ModLFO2Vol	fluid_defsfont.h	/^  Gen_ModLFO2Vol, Gen_Unused1, Gen_ChorusSend, Gen_ReverbSend, Gen_Pan,$/;"	e	enum:__anon19
Gen_ModLFODelay	fluid_defsfont.h	/^  Gen_ModLFODelay, Gen_ModLFOFreq, Gen_VibLFODelay, Gen_VibLFOFreq,$/;"	e	enum:__anon19
Gen_ModLFOFreq	fluid_defsfont.h	/^  Gen_ModLFODelay, Gen_ModLFOFreq, Gen_VibLFODelay, Gen_VibLFOFreq,$/;"	e	enum:__anon19
Gen_OverrideRootKey	fluid_defsfont.h	/^  Gen_Reserved3, Gen_ScaleTune, Gen_ExclusiveClass, Gen_OverrideRootKey,$/;"	e	enum:__anon19
Gen_Pan	fluid_defsfont.h	/^  Gen_ModLFO2Vol, Gen_Unused1, Gen_ChorusSend, Gen_ReverbSend, Gen_Pan,$/;"	e	enum:__anon19
Gen_Reserved1	fluid_defsfont.h	/^  Gen_Reserved1, Gen_KeyRange, Gen_VelRange,$/;"	e	enum:__anon19
Gen_Reserved2	fluid_defsfont.h	/^  Gen_Attenuation, Gen_Reserved2, Gen_EndLoopAddrCoarseOfs,$/;"	e	enum:__anon19
Gen_Reserved3	fluid_defsfont.h	/^  Gen_Reserved3, Gen_ScaleTune, Gen_ExclusiveClass, Gen_OverrideRootKey,$/;"	e	enum:__anon19
Gen_ReverbSend	fluid_defsfont.h	/^  Gen_ModLFO2Vol, Gen_Unused1, Gen_ChorusSend, Gen_ReverbSend, Gen_Pan,$/;"	e	enum:__anon19
Gen_SampleId	fluid_defsfont.h	/^  Gen_CoarseTune, Gen_FineTune, Gen_SampleId, Gen_SampleModes,$/;"	e	enum:__anon19
Gen_SampleModes	fluid_defsfont.h	/^  Gen_CoarseTune, Gen_FineTune, Gen_SampleId, Gen_SampleModes,$/;"	e	enum:__anon19
Gen_ScaleTune	fluid_defsfont.h	/^  Gen_Reserved3, Gen_ScaleTune, Gen_ExclusiveClass, Gen_OverrideRootKey,$/;"	e	enum:__anon19
Gen_StartAddrCoarseOfs	fluid_defsfont.h	/^  Gen_EndLoopAddrOfs, Gen_StartAddrCoarseOfs, Gen_ModLFO2Pitch,$/;"	e	enum:__anon19
Gen_StartAddrOfs	fluid_defsfont.h	/^{ Gen_StartAddrOfs, Gen_EndAddrOfs, Gen_StartLoopAddrOfs,$/;"	e	enum:__anon19
Gen_StartLoopAddrCoarseOfs	fluid_defsfont.h	/^  Gen_StartLoopAddrCoarseOfs, Gen_Keynum, Gen_Velocity,$/;"	e	enum:__anon19
Gen_StartLoopAddrOfs	fluid_defsfont.h	/^{ Gen_StartAddrOfs, Gen_EndAddrOfs, Gen_StartLoopAddrOfs,$/;"	e	enum:__anon19
Gen_Type	fluid_defsfont.h	/^Gen_Type;$/;"	t	typeref:enum:__anon19
Gen_Unit	fluid_defsfont.h	/^Gen_Unit;$/;"	t	typeref:enum:__anon20
Gen_Unused1	fluid_defsfont.h	/^  Gen_ModLFO2Vol, Gen_Unused1, Gen_ChorusSend, Gen_ReverbSend, Gen_Pan,$/;"	e	enum:__anon19
Gen_Unused2	fluid_defsfont.h	/^  Gen_Unused2, Gen_Unused3, Gen_Unused4,$/;"	e	enum:__anon19
Gen_Unused3	fluid_defsfont.h	/^  Gen_Unused2, Gen_Unused3, Gen_Unused4,$/;"	e	enum:__anon19
Gen_Unused4	fluid_defsfont.h	/^  Gen_Unused2, Gen_Unused3, Gen_Unused4,$/;"	e	enum:__anon19
Gen_VelRange	fluid_defsfont.h	/^  Gen_Reserved1, Gen_KeyRange, Gen_VelRange,$/;"	e	enum:__anon19
Gen_Velocity	fluid_defsfont.h	/^  Gen_StartLoopAddrCoarseOfs, Gen_Keynum, Gen_Velocity,$/;"	e	enum:__anon19
Gen_VibLFO2Pitch	fluid_defsfont.h	/^  Gen_VibLFO2Pitch, Gen_ModEnv2Pitch, Gen_FilterFc, Gen_FilterQ,$/;"	e	enum:__anon19
Gen_VibLFODelay	fluid_defsfont.h	/^  Gen_ModLFODelay, Gen_ModLFOFreq, Gen_VibLFODelay, Gen_VibLFOFreq,$/;"	e	enum:__anon19
Gen_VibLFOFreq	fluid_defsfont.h	/^  Gen_ModLFODelay, Gen_ModLFOFreq, Gen_VibLFODelay, Gen_VibLFOFreq,$/;"	e	enum:__anon19
Gen_VolEnvAttack	fluid_defsfont.h	/^  Gen_Key2ModEnvDecay, Gen_VolEnvDelay, Gen_VolEnvAttack,$/;"	e	enum:__anon19
Gen_VolEnvDecay	fluid_defsfont.h	/^  Gen_VolEnvHold, Gen_VolEnvDecay, Gen_VolEnvSustain, Gen_VolEnvRelease,$/;"	e	enum:__anon19
Gen_VolEnvDelay	fluid_defsfont.h	/^  Gen_Key2ModEnvDecay, Gen_VolEnvDelay, Gen_VolEnvAttack,$/;"	e	enum:__anon19
Gen_VolEnvHold	fluid_defsfont.h	/^  Gen_VolEnvHold, Gen_VolEnvDecay, Gen_VolEnvSustain, Gen_VolEnvRelease,$/;"	e	enum:__anon19
Gen_VolEnvRelease	fluid_defsfont.h	/^  Gen_VolEnvHold, Gen_VolEnvDecay, Gen_VolEnvSustain, Gen_VolEnvRelease,$/;"	e	enum:__anon19
Gen_VolEnvSustain	fluid_defsfont.h	/^  Gen_VolEnvHold, Gen_VolEnvDecay, Gen_VolEnvSustain, Gen_VolEnvRelease,$/;"	e	enum:__anon19
HASH_TABLE_MAX_SIZE	fluid_hash.c	36;"	d	file:
HASH_TABLE_MIN_SIZE	fluid_hash.c	35;"	d	file:
HAVE_FCNTL_H	config_macos.h	13;"	d
HAVE_FCNTL_H	config_macosx_pb.h	15;"	d
HAVE_FCNTL_H	config_win32.h	8;"	d
HAVE_IO_H	config_win32.h	10;"	d
HAVE_LIMITS_H	config_macos.h	12;"	d
HAVE_LIMITS_H	config_macosx_pb.h	17;"	d
HAVE_LIMITS_H	config_win32.h	9;"	d
HAVE_MATH_H	config_macos.h	9;"	d
HAVE_MATH_H	config_macosx.h	6;"	d
HAVE_MATH_H	config_macosx_pb.h	12;"	d
HAVE_MATH_H	config_win32.h	6;"	d
HAVE_PTHREAD_H	config_macosx_pb.h	18;"	d
HAVE_STDARG_H	config_macos.h	10;"	d
HAVE_STDARG_H	config_macosx.h	7;"	d
HAVE_STDARG_H	config_macosx_pb.h	13;"	d
HAVE_STDARG_H	config_win32.h	7;"	d
HAVE_STDIO_H	config_macos.h	8;"	d
HAVE_STDIO_H	config_macosx.h	5;"	d
HAVE_STDIO_H	config_macosx_pb.h	11;"	d
HAVE_STDIO_H	config_win32.h	5;"	d
HAVE_STDLIB_H	config_macos.h	7;"	d
HAVE_STDLIB_H	config_macosx.h	4;"	d
HAVE_STDLIB_H	config_macosx_pb.h	10;"	d
HAVE_STDLIB_H	config_win32.h	4;"	d
HAVE_STRING_H	config_macos.h	6;"	d
HAVE_STRING_H	config_macosx.h	3;"	d
HAVE_STRING_H	config_macosx_pb.h	9;"	d
HAVE_STRING_H	config_win32.h	3;"	d
HAVE_SYS_TYPES_H	config_macosx_pb.h	14;"	d
HAVE_UNISTD_H	config_macosx_pb.h	16;"	d
HAVE_WINDOWS_H	config_win32.h	11;"	d
HEAP_WITH_DYNALLOC	fluid_event_priv.h	62;"	d
HOLD2_SWITCH	fluid_midi.h	/^  HOLD2_SWITCH = 0x45,$/;"	e	enum:fluid_midi_control_change
IBAG_ID	fluid_defsfont.h	/^  IHDR_ID, IBAG_ID, IMOD_ID, IGEN_ID,	\/* instrument ids *\/$/;"	e	enum:__anon18
ICMT_ID	fluid_defsfont.h	/^  ICOP_ID, ICMT_ID, ISFT_ID,	\/* and yet more info ids *\/$/;"	e	enum:__anon18
ICOP_ID	fluid_defsfont.h	/^  ICOP_ID, ICMT_ID, ISFT_ID,	\/* and yet more info ids *\/$/;"	e	enum:__anon18
ICRD_ID	fluid_defsfont.h	/^  IVER_ID, ICRD_ID, IENG_ID, IPRD_ID,	\/* more info ids *\/$/;"	e	enum:__anon18
IENG_ID	fluid_defsfont.h	/^  IVER_ID, ICRD_ID, IENG_ID, IPRD_ID,	\/* more info ids *\/$/;"	e	enum:__anon18
IFIL_ID	fluid_defsfont.h	/^  IFIL_ID, ISNG_ID, INAM_ID, IROM_ID, \/* info ids (1st byte of info strings) *\/$/;"	e	enum:__anon18
IGEN_ID	fluid_defsfont.h	/^  IHDR_ID, IBAG_ID, IMOD_ID, IGEN_ID,	\/* instrument ids *\/$/;"	e	enum:__anon18
IHDR_ID	fluid_defsfont.h	/^  IHDR_ID, IBAG_ID, IMOD_ID, IGEN_ID,	\/* instrument ids *\/$/;"	e	enum:__anon18
IMOD_ID	fluid_defsfont.h	/^  IHDR_ID, IBAG_ID, IMOD_ID, IGEN_ID,	\/* instrument ids *\/$/;"	e	enum:__anon18
INAM_ID	fluid_defsfont.h	/^  IFIL_ID, ISNG_ID, INAM_ID, IROM_ID, \/* info ids (1st byte of info strings) *\/$/;"	e	enum:__anon18
INCL_DOS	fluid_dart.c	36;"	d	file:
INCL_DOS	fluid_sys.h	94;"	d
INCL_OS2MM	fluid_dart.c	39;"	d	file:
INFO_ID	fluid_defsfont.h	/^  INFO_ID, SDTA_ID, PDTA_ID,	\/* info\/sample\/preset *\/$/;"	e	enum:__anon18
INITGUID	fluid_dsound.c	22;"	d	file:
INST_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	2999;"	d	file:
INTERPOLATION_SAMPLES	fluid_chorus.c	103;"	d	file:
INTERPOLATION_SUBSAMPLES	fluid_chorus.c	95;"	d	file:
INTERPOLATION_SUBSAMPLES_ANDMASK	fluid_chorus.c	96;"	d	file:
INTERPOLATION_SUBSAMPLES_LN2	fluid_chorus.c	94;"	d	file:
INVALID_SOCKET	fluidsynth_priv.h	167;"	d
IPRD_ID	fluid_defsfont.h	/^  IVER_ID, ICRD_ID, IENG_ID, IPRD_ID,	\/* more info ids *\/$/;"	e	enum:__anon18
IROM_ID	fluid_defsfont.h	/^  IFIL_ID, ISNG_ID, INAM_ID, IROM_ID, \/* info ids (1st byte of info strings) *\/$/;"	e	enum:__anon18
ISFT_ID	fluid_defsfont.h	/^  ICOP_ID, ICMT_ID, ISFT_ID,	\/* and yet more info ids *\/$/;"	e	enum:__anon18
ISNG_ID	fluid_defsfont.h	/^  IFIL_ID, ISNG_ID, INAM_ID, IROM_ID, \/* info ids (1st byte of info strings) *\/$/;"	e	enum:__anon18
IVER_ID	fluid_defsfont.h	/^  IVER_ID, ICRD_ID, IENG_ID, IPRD_ID,	\/* more info ids *\/$/;"	e	enum:__anon18
InCount	fluid_ladspa.h	/^  int InCount;            \/* How many sources feed into this node? (0 or 1) *\/$/;"	m	struct:__anon35
KEY_PRESSURE	fluid_midi.h	/^  KEY_PRESSURE = 0xa0,$/;"	e	enum:fluid_midi_event_type
L	fluid_ladspa.c	41;"	d	file:
LADSPA_Command_Sequence	fluid_ladspa.h	/^  char ** LADSPA_Command_Sequence[FLUID_LADSPA_MaxPlugins];$/;"	m	struct:__anon36
LADSPA_FxUnit	fluid_synth.h	/^  fluid_LADSPA_FxUnit_t* LADSPA_FxUnit; \/** Effects unit for LADSPA support *\/$/;"	m	struct:_fluid_synth_t
LASH_ENABLED	fluid_lash.h	28;"	d
LAST_LOG_LEVEL	include/fluidsynth/log.h	/^  LAST_LOG_LEVEL$/;"	e	enum:fluid_log_level
LEGATO_SWITCH	fluid_midi.h	/^  LEGATO_SWITCH = 0x45,$/;"	e	enum:fluid_midi_control_change
LIST_ID	fluid_defsfont.h	/^{ UNKN_ID, RIFF_ID, LIST_ID, SFBK_ID,$/;"	e	enum:__anon18
LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := -DHAVE_PTHREAD_H -DHAVE_STDLIB_H -DHAVE_STDIO_H -DHAVE_MATH_H -DHAVE_STRING_H -DHAVE_STDARG_H -DHAVE_SYS_SOCKET_H -DHAVE_NETINET_IN_H -DHAVE_ARPA_INET_H -DHAVE_NETINET_TCP_H -DHAVE_UNISTD_H -DHAVE_ERRNO_H -DHAVE_FCNTL_H -DVERSION=1.0.9 -O3 -DWITH_MIDI=0$/;"	m
LOCAL_CONTROL	fluid_midi.h	/^  LOCAL_CONTROL = 0x7A,$/;"	e	enum:fluid_midi_control_change
LOCAL_CPPFLAGS	Android.mk	/^LOCAL_CPPFLAGS :=$(LOCAL_CFLAGS)$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)\/include$/;"	m
LOCAL_LDLIBS	Android.mk	/^LOCAL_LDLIBS := -llog$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE   := fluidsynth$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := fluid_adriver.c		fluid_dll.c		fluid_list.c		fluid_seq.c \\$/;"	m
MACINTOSH	config_macos.h	4;"	d
MACINTOSH	config_macosx.h	1;"	d
MACINTOSH	config_macosx_pb.h	4;"	d
MACINTOSH	fluidsynth_priv.h	135;"	d
MACOS9	config_macos.h	3;"	d
MAX_CHORUS	fluid_chorus.c	71;"	d	file:
MAX_COMMAND_LEN	fluid_cmd.c	38;"	d	file:
MAX_DELAY	fluid_chorus.c	72;"	d	file:
MAX_DEPTH	fluid_chorus.c	73;"	d	file:
MAX_NUMBER_OF_TRACKS	fluid_midi.h	43;"	d
MAX_SAMPLES	fluid_chorus.c	86;"	d	file:
MAX_SAMPLES_ANDMASK	fluid_chorus.c	87;"	d	file:
MAX_SAMPLES_LN2	fluid_chorus.c	84;"	d	file:
MAX_SETTINGS_LABEL	fluid_settings.c	32;"	d	file:
MAX_SETTINGS_TOKENS	fluid_settings.c	31;"	d	file:
MAX_SPEED_HZ	fluid_chorus.c	75;"	d	file:
MAX_TOKENS	fluid_cmd.c	37;"	d	file:
MIDIRULE_ACTIVE	fluid_midi_router.h	/^    MIDIRULE_ACTIVE = 0x00,$/;"	e	enum:fluid_midirule_state
MIDIRULE_DONE	fluid_midi_router.h	/^    MIDIRULE_DONE$/;"	e	enum:fluid_midirule_state
MIDIRULE_WAITING	fluid_midi_router.h	/^    MIDIRULE_WAITING,$/;"	e	enum:fluid_midirule_state
MIDISHARE_DRIVER	config_macosx.h	14;"	d
MIDISHARE_SUPPORT	config_macosx.h	13;"	d
MIDI_ACTIVE_SENSING	fluid_midi.h	/^  MIDI_ACTIVE_SENSING = 0xfe,$/;"	e	enum:fluid_midi_event_type
MIDI_CONTINUE	fluid_midi.h	/^  MIDI_CONTINUE = 0xfb,$/;"	e	enum:fluid_midi_event_type
MIDI_COPYRIGHT	fluid_midi.h	/^  MIDI_COPYRIGHT = 0x02,$/;"	e	enum:midi_meta_event
MIDI_CUE_POINT	fluid_midi.h	/^  MIDI_CUE_POINT = 0x07,$/;"	e	enum:midi_meta_event
MIDI_EOT	fluid_midi.h	/^  MIDI_EOT = 0x2f,$/;"	e	enum:midi_meta_event
MIDI_EOX	fluid_midi.h	/^  MIDI_EOX = 0xf7,$/;"	e	enum:fluid_midi_event_type
MIDI_INST_NAME	fluid_midi.h	/^  MIDI_INST_NAME = 0x04,$/;"	e	enum:midi_meta_event
MIDI_KEY_SIGNATURE	fluid_midi.h	/^  MIDI_KEY_SIGNATURE = 0x59,$/;"	e	enum:midi_meta_event
MIDI_LYRIC	fluid_midi.h	/^  MIDI_LYRIC = 0x05,$/;"	e	enum:midi_meta_event
MIDI_MARKER	fluid_midi.h	/^  MIDI_MARKER = 0x06,$/;"	e	enum:midi_meta_event
MIDI_MESSAGE_LENGTH	fluid_midi.c	27;"	d	file:
MIDI_META_EVENT	fluid_midi.h	/^  MIDI_META_EVENT = 0xff$/;"	e	enum:fluid_midi_event_type
MIDI_SEQUENCER_EVENT	fluid_midi.h	/^  MIDI_SEQUENCER_EVENT = 0x7f$/;"	e	enum:midi_meta_event
MIDI_SET_TEMPO	fluid_midi.h	/^  MIDI_SET_TEMPO = 0x51,$/;"	e	enum:midi_meta_event
MIDI_SMPTE_OFFSET	fluid_midi.h	/^  MIDI_SMPTE_OFFSET = 0x54,$/;"	e	enum:midi_meta_event
MIDI_SONG_POSITION	fluid_midi.h	/^  MIDI_SONG_POSITION = 0xf2,$/;"	e	enum:fluid_midi_event_type
MIDI_SONG_SELECT	fluid_midi.h	/^  MIDI_SONG_SELECT = 0xf3,$/;"	e	enum:fluid_midi_event_type
MIDI_START	fluid_midi.h	/^  MIDI_START = 0xfa,$/;"	e	enum:fluid_midi_event_type
MIDI_STOP	fluid_midi.h	/^  MIDI_STOP = 0xfc,$/;"	e	enum:fluid_midi_event_type
MIDI_SYNC	fluid_midi.h	/^  MIDI_SYNC = 0xf8,$/;"	e	enum:fluid_midi_event_type
MIDI_SYSEX	fluid_midi.h	/^  MIDI_SYSEX = 0xf0,$/;"	e	enum:fluid_midi_event_type
MIDI_SYSTEM_RESET	fluid_midi.h	/^  MIDI_SYSTEM_RESET = 0xff,$/;"	e	enum:fluid_midi_event_type
MIDI_TICK	fluid_midi.h	/^  MIDI_TICK = 0xf9,$/;"	e	enum:fluid_midi_event_type
MIDI_TIME_CODE	fluid_midi.h	/^  MIDI_TIME_CODE = 0xf1,$/;"	e	enum:fluid_midi_event_type
MIDI_TIME_SIGNATURE	fluid_midi.h	/^  MIDI_TIME_SIGNATURE = 0x58,$/;"	e	enum:midi_meta_event
MIDI_TRACK_NAME	fluid_midi.h	/^  MIDI_TRACK_NAME = 0x03,$/;"	e	enum:midi_meta_event
MIDI_TUNE_REQUEST	fluid_midi.h	/^  MIDI_TUNE_REQUEST = 0xf6,$/;"	e	enum:fluid_midi_event_type
MIN_SPEED_HZ	fluid_chorus.c	74;"	d	file:
MODULATION_MSB	fluid_midi.h	/^  MODULATION_MSB = 0x01,$/;"	e	enum:fluid_midi_control_change
MODULATION_WHEEL_LSB	fluid_midi.h	/^  MODULATION_WHEEL_LSB = 0x21,$/;"	e	enum:fluid_midi_control_change
MOD_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	3002;"	d	file:
MSHDriverName	fluid_midishare.c	46;"	d	file:
MSHDriverName	fluid_midishare.c	49;"	d	file:
MSHSlotName	fluid_midishare.c	45;"	d	file:
MSHSlotName	fluid_midishare.c	48;"	d	file:
M_PI	fluidsynth_priv.h	292;"	d
MidiShareDrvRef	fluid_midishare.c	42;"	d	file:
MixBuffers	fluid_dart.c	/^    MCI_MIX_BUFFER MixBuffers[NUM_MIX_BUFS];    \/* Device buffers          *\/$/;"	m	struct:__anon10	file:
MixSetupParms	fluid_dart.c	/^    MCI_MIXSETUP_PARMS MixSetupParms;           \/* Mixer parameters        *\/$/;"	m	struct:__anon10	file:
NOTE_OFF	fluid_midi.h	/^  NOTE_OFF = 0x80,$/;"	e	enum:fluid_midi_event_type
NOTE_ON	fluid_midi.h	/^  NOTE_ON = 0x90,$/;"	e	enum:fluid_midi_event_type
NO_CHANNEL	fluid_voice.h	29;"	d
NRPN_LSB	fluid_midi.h	/^  NRPN_LSB = 0x62,$/;"	e	enum:fluid_midi_control_change
NRPN_MSB	fluid_midi.h	/^  NRPN_MSB = 0x63,$/;"	e	enum:fluid_midi_control_change
NUM_BUFFERS_ATTACK	fluid_voice.c	1312;"	d	file:
NUM_BUFFERS_DELAY	fluid_voice.c	1311;"	d	file:
NUM_BUFFERS_RELEASE	fluid_voice.c	1313;"	d	file:
NUM_MIX_BUFS	fluid_dart.c	42;"	d	file:
Name	fluid_ladspa.h	/^  char * Name;            \/* Unique identifier*\/$/;"	m	struct:__anon35
Nodelist	fluid_ladspa.h	/^  fluid_LADSPA_Node_t * Nodelist[FLUID_LADSPA_MaxNodes];$/;"	m	struct:__anon36
None	fluid_defsfont.h	/^  None,				\/* No unit type *\/$/;"	e	enum:__anon20
NumberCommands	fluid_ladspa.h	/^  int NumberCommands;$/;"	m	struct:__anon36
NumberLibs	fluid_ladspa.h	/^  int NumberLibs;$/;"	m	struct:__anon36
NumberNodes	fluid_ladspa.h	/^  int NumberNodes;$/;"	m	struct:__anon36
NumberPlugins	fluid_ladspa.h	/^  int NumberPlugins;$/;"	m	struct:__anon36
NumberUserControlNodes	fluid_ladspa.h	/^  int NumberUserControlNodes;$/;"	m	struct:__anon36
OK	fluid_defsfont.h	417;"	d
OMNI_OFF	fluid_midi.h	/^  OMNI_OFF = 0x7C,$/;"	e	enum:fluid_midi_control_change
OMNI_ON	fluid_midi.h	/^  OMNI_ON = 0x7D,$/;"	e	enum:fluid_midi_control_change
OSS_MIDI_SCHED_PRIORITY	fluid_oss.c	50;"	d	file:
OSS_PCM_SCHED_PRIORITY	fluid_oss.c	49;"	d	file:
OutCount	fluid_ladspa.h	/^  int OutCount;           \/* How many other elements take data out of this node? *\/$/;"	m	struct:__anon35
PAN_LSB	fluid_midi.h	/^  PAN_LSB = 0x2A,$/;"	e	enum:fluid_midi_control_change
PAN_MSB	fluid_midi.h	/^  PAN_MSB = 0x0A,$/;"	e	enum:fluid_midi_control_change
PBAG_ID	fluid_defsfont.h	/^  PHDR_ID, PBAG_ID, PMOD_ID, PGEN_ID,	\/* preset ids *\/$/;"	e	enum:__anon18
PDTA_ID	fluid_defsfont.h	/^  INFO_ID, SDTA_ID, PDTA_ID,	\/* info\/sample\/preset *\/$/;"	e	enum:__anon18
PGEN_ID	fluid_defsfont.h	/^  PHDR_ID, PBAG_ID, PMOD_ID, PGEN_ID,	\/* preset ids *\/$/;"	e	enum:__anon18
PHDR_ID	fluid_defsfont.h	/^  PHDR_ID, PBAG_ID, PMOD_ID, PGEN_ID,	\/* preset ids *\/$/;"	e	enum:__anon18
PI	fluidsynth_priv.h	245;"	d
PITCH_BEND	fluid_midi.h	/^  PITCH_BEND = 0xe0,$/;"	e	enum:fluid_midi_event_type
PMOD_ID	fluid_defsfont.h	/^  PHDR_ID, PBAG_ID, PMOD_ID, PGEN_ID,	\/* preset ids *\/$/;"	e	enum:__anon18
POLY_OFF	fluid_midi.h	/^  POLY_OFF = 0x7E,$/;"	e	enum:fluid_midi_control_change
POLY_ON	fluid_midi.h	/^  POLY_ON = 0x7F$/;"	e	enum:fluid_midi_control_change
PORTAMENTO_CTRL	fluid_midi.h	/^  PORTAMENTO_CTRL = 0x54,$/;"	e	enum:fluid_midi_control_change
PORTAMENTO_SWITCH	fluid_midi.h	/^  PORTAMENTO_SWITCH = 0x41,$/;"	e	enum:fluid_midi_control_change
PORTAMENTO_TIME_LSB	fluid_midi.h	/^  PORTAMENTO_TIME_LSB = 0x25,$/;"	e	enum:fluid_midi_control_change
PORTAMENTO_TIME_MSB	fluid_midi.h	/^  PORTAMENTO_TIME_MSB = 0x05,$/;"	e	enum:fluid_midi_control_change
PORTAUDIO_DEFAULT_DEVICE	fluid_portaudio.c	65;"	d	file:
PORTAUDIO_SUPPORT	config_macosx.h	15;"	d
PORTMIDI_SUPPORT	config_macosx.h	16;"	d
PRESET_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	2998;"	d	file:
PROGRAM_CHANGE	fluid_midi.h	/^  PROGRAM_CHANGE = 0xc0,$/;"	e	enum:fluid_midi_event_type
PULSE_PCM_SCHED_PRIORITY	fluid_pulse.c	38;"	d	file:
PluginDescriptorTable	fluid_ladspa.h	/^  const LADSPA_Descriptor * PluginDescriptorTable[FLUID_LADSPA_MaxPlugins];$/;"	m	struct:__anon36
PluginInstanceTable	fluid_ladspa.h	/^  LADSPA_Handle * PluginInstanceTable[FLUID_LADSPA_MaxPlugins];$/;"	m	struct:__anon36
PortIsAudio	fluid_ladspa.c	487;"	d	file:
PortIsControl	fluid_ladspa.c	488;"	d	file:
PrintErrorMessage	fluid_ladspa.c	25;"	d	file:
Q2ULL	fluid_sys.c	792;"	d	file:
READB	fluid_defsfont.c	1722;"	d	file:
READCHUNK	fluid_defsfont.c	1671;"	d	file:
READCHUNK	fluid_defsfont.c	1677;"	d	file:
READD	fluid_defsfont.c	1693;"	d	file:
READD	fluid_defsfont.c	1700;"	d	file:
READID	fluid_defsfont.c	1683;"	d	file:
READSTR	fluid_defsfont.c	1687;"	d	file:
READW	fluid_defsfont.c	1708;"	d	file:
READW	fluid_defsfont.c	1715;"	d	file:
RIFF_ID	fluid_defsfont.h	/^{ UNKN_ID, RIFF_ID, LIST_ID, SFBK_ID,$/;"	e	enum:__anon18
RPN_CHANNEL_COARSE_TUNE	fluid_midi.h	/^  RPN_CHANNEL_COARSE_TUNE = 0x02,$/;"	e	enum:midi_rpn_event
RPN_CHANNEL_FINE_TUNE	fluid_midi.h	/^  RPN_CHANNEL_FINE_TUNE = 0x01,$/;"	e	enum:midi_rpn_event
RPN_LSB	fluid_midi.h	/^  RPN_LSB = 0x64,$/;"	e	enum:fluid_midi_control_change
RPN_MODULATION_DEPTH_RANGE	fluid_midi.h	/^  RPN_MODULATION_DEPTH_RANGE = 0x05$/;"	e	enum:midi_rpn_event
RPN_MSB	fluid_midi.h	/^  RPN_MSB = 0x65,$/;"	e	enum:fluid_midi_control_change
RPN_PITCH_BEND_RANGE	fluid_midi.h	/^  RPN_PITCH_BEND_RANGE = 0x00,$/;"	e	enum:midi_rpn_event
RPN_TUNING_BANK_SELECT	fluid_midi.h	/^  RPN_TUNING_BANK_SELECT = 0x04,$/;"	e	enum:midi_rpn_event
RPN_TUNING_PROGRAM_CHANGE	fluid_midi.h	/^  RPN_TUNING_PROGRAM_CHANGE = 0x03,$/;"	e	enum:midi_rpn_event
SAMPLE_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	3000;"	d	file:
SAMPLE_LOOP_MARGIN	fluid_ramsfont.c	26;"	d	file:
SDTA_ID	fluid_defsfont.h	/^  INFO_ID, SDTA_ID, PDTA_ID,	\/* info\/sample\/preset *\/$/;"	e	enum:__anon18
SETCC	fluid_chan.c	26;"	d	file:
SFBAGSIZE	fluid_defsfont.h	240;"	d
SFBK_ID	fluid_defsfont.h	/^{ UNKN_ID, RIFF_ID, LIST_ID, SFBK_ID,$/;"	e	enum:__anon18
SFBag	fluid_defsfont.h	/^SFBag;$/;"	t	typeref:struct:_SFBag
SFChunk	fluid_defsfont.h	/^SFChunk;$/;"	t	typeref:struct:_SFChunk
SFData	fluid_defsfont.h	/^SFData;$/;"	t	typeref:struct:_SFData
SFGENSIZE	fluid_defsfont.h	242;"	d
SFGen	fluid_defsfont.h	/^SFGen;$/;"	t	typeref:struct:_SFGen
SFGenAmount	fluid_defsfont.h	/^SFGenAmount;$/;"	t	typeref:union:_SFGenAmount
SFIHDRSIZE	fluid_defsfont.h	243;"	d
SFIhdr	fluid_defsfont.h	/^SFIhdr;$/;"	t	typeref:struct:_SFIhdr
SFInst	fluid_defsfont.h	/^SFInst;$/;"	t	typeref:struct:_SFInst
SFMODSIZE	fluid_defsfont.h	241;"	d
SFMod	fluid_defsfont.h	/^SFMod;$/;"	t	typeref:struct:_SFMod
SFPHDRSIZE	fluid_defsfont.h	239;"	d
SFPhdr	fluid_defsfont.h	/^SFPhdr;$/;"	t	typeref:struct:_SFPhdr
SFPreset	fluid_defsfont.h	/^SFPreset;$/;"	t	typeref:struct:_SFPreset
SFSHDRSIZE	fluid_defsfont.h	244;"	d
SFSample	fluid_defsfont.h	/^SFSample;$/;"	t	typeref:struct:_SFSample
SFShdr	fluid_defsfont.h	/^SFShdr;$/;"	t	typeref:struct:_SFShdr
SFVersion	fluid_defsfont.h	/^SFVersion;$/;"	t	typeref:struct:_SFVersion
SFZone	fluid_defsfont.h	/^SFZone;$/;"	t	typeref:struct:_SFZone
SF_MAX_SAMPLERATE	fluid_defsfont.h	46;"	d
SF_MIN_SAMPLERATE	fluid_defsfont.h	45;"	d
SF_MIN_SAMPLE_LENGTH	fluid_defsfont.h	48;"	d
SF_SAMPMODES_LOOP	fluid_defsfont.h	42;"	d
SF_SAMPMODES_UNROLL	fluid_defsfont.h	43;"	d
SHDR_ID	fluid_defsfont.h	/^  SHDR_ID			\/* sample info *\/$/;"	e	enum:__anon18
SINC_INTERP_ORDER	fluid_dsp_float.c	63;"	d	file:
SLADVREM	fluid_defsfont.c	1736;"	d	file:
SMPL_ID	fluid_defsfont.h	/^  SNAM_ID, SMPL_ID,		\/* sample ids *\/$/;"	e	enum:__anon18
SNAM_ID	fluid_defsfont.h	/^  SNAM_ID, SMPL_ID,		\/* sample ids *\/$/;"	e	enum:__anon18
SNDMAN_SUPPORT	config_macos.h	19;"	d
SOCKET_ERROR	fluid_sys.c	1432;"	d	file:
SOFT_PEDAL_SWITCH	fluid_midi.h	/^  SOFT_PEDAL_SWITCH = 0x43,$/;"	e	enum:fluid_midi_control_change
SOSTENUTO_SWITCH	fluid_midi.h	/^  SOSTENUTO_SWITCH = 0x42,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL1	fluid_midi.h	/^  SOUND_CTRL1 = 0x46,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL10	fluid_midi.h	/^  SOUND_CTRL10 = 0x4F,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL2	fluid_midi.h	/^  SOUND_CTRL2 = 0x47,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL3	fluid_midi.h	/^  SOUND_CTRL3 = 0x48,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL4	fluid_midi.h	/^  SOUND_CTRL4 = 0x49,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL5	fluid_midi.h	/^  SOUND_CTRL5 = 0x4A,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL6	fluid_midi.h	/^  SOUND_CTRL6 = 0x4B,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL7	fluid_midi.h	/^  SOUND_CTRL7 = 0x4C,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL8	fluid_midi.h	/^  SOUND_CTRL8 = 0x4D,$/;"	e	enum:fluid_midi_control_change
SOUND_CTRL9	fluid_midi.h	/^  SOUND_CTRL9 = 0x4E,$/;"	e	enum:fluid_midi_control_change
STDERR_FILENO	config_win32.h	26;"	d
STDERR_FILENO	fluidsynth_priv.h	128;"	d
STDIN_FILENO	config_win32.h	24;"	d
STDIN_FILENO	fluidsynth_priv.h	126;"	d
STDOUT_FILENO	config_win32.h	25;"	d
STDOUT_FILENO	fluidsynth_priv.h	127;"	d
SUSTAIN_SWITCH	fluid_midi.h	/^  SUSTAIN_SWITCH = 0x40,$/;"	e	enum:fluid_midi_control_change
TRUE	fluid_defsfont.h	339;"	d
UNKN_ID	fluid_defsfont.h	/^{ UNKN_ID, RIFF_ID, LIST_ID, SFBK_ID,$/;"	e	enum:__anon18
Unit_32kSmpls	fluid_defsfont.h	/^  Unit_32kSmpls,		\/* in 32k samples *\/$/;"	e	enum:__anon20
Unit_Cent	fluid_defsfont.h	/^  Unit_Cent,			\/* in cents (1\/100th of a semitone) *\/$/;"	e	enum:__anon20
Unit_HzCent	fluid_defsfont.h	/^  Unit_HzCent,			\/* in Hz Cents *\/$/;"	e	enum:__anon20
Unit_Percent	fluid_defsfont.h	/^  Unit_Percent,			\/* in percentage *\/$/;"	e	enum:__anon20
Unit_Range	fluid_defsfont.h	/^  Unit_Range			\/* a range of values *\/$/;"	e	enum:__anon20
Unit_Semitone	fluid_defsfont.h	/^  Unit_Semitone,		\/* in semitones *\/$/;"	e	enum:__anon20
Unit_Smpls	fluid_defsfont.h	/^  Unit_Smpls,			\/* in samples *\/$/;"	e	enum:__anon20
Unit_TCent	fluid_defsfont.h	/^  Unit_TCent,			\/* in Time Cents *\/$/;"	e	enum:__anon20
Unit_cB	fluid_defsfont.h	/^  Unit_cB,			\/* in centibels (1\/100th of a decibel) *\/$/;"	e	enum:__anon20
UserControlNodeNames	fluid_ladspa.h	/^  char * UserControlNodeNames[FLUID_LADSPA_MaxNodes];$/;"	m	struct:__anon36
UserControlNodeValues	fluid_ladspa.h	/^  fluid_real_t UserControlNodeValues[FLUID_LADSPA_MaxNodes];$/;"	m	struct:__anon36
VERSION	config_macos.h	1;"	d
VERSION	config_macosx_pb.h	2;"	d
VERSION	config_win32.h	1;"	d
VERSION	fluid_dart.c	34;"	d	file:
VOLUME_LSB	fluid_midi.h	/^  VOLUME_LSB = 0x27,$/;"	e	enum:fluid_midi_control_change
VOLUME_MSB	fluid_midi.h	/^  VOLUME_MSB = 0x07,$/;"	e	enum:fluid_midi_control_change
WINMIDI_SUPPORT	config_win32.h	14;"	d
WINMIDI_SUPPORT	fluidsynth_priv.h	125;"	d
WITHOUT_SERVER	config_macos.h	16;"	d
WITHOUT_SERVER	config_macosx_pb.h	26;"	d
WITHOUT_SERVER	config_win32.h	36;"	d
WITHOUT_SERVER	fluidsynth_priv.h	129;"	d
WITHOUT_SERVER	fluidsynth_priv.h	137;"	d
WITH_FLOAT	config_win32.h	15;"	d
WITH_MIDI	fluidsynth.c	53;"	d	file:
WITH_PROFILING	config_macos.h	15;"	d
WITH_PROFILING	config_macosx.h	10;"	d
WITH_PROFILING	config_macosx_pb.h	24;"	d
WITH_PROFILING	config_win32.h	29;"	d
WORDS_BIGENDIAN	config_macos.h	11;"	d
WORDS_BIGENDIAN	config_macosx.h	8;"	d
WORDS_BIGENDIAN	config_macosx_pb.h	20;"	d
ZONE_CHUNK_OPTIMUM_AREA	fluid_defsfont.c	3001;"	d	file:
_	fluidsynth_priv.h	303;"	d
_AVAILABLE	fluid_voice.h	267;"	d
_BITS_PER_BYTE	fluid_sndmgr.c	323;"	d	file:
_FLUIDSYNTH_AUDIO_H	include/fluidsynth/audio.h	22;"	d
_FLUIDSYNTH_EVENT_H	include/fluidsynth/event.h	22;"	d
_FLUIDSYNTH_GEN_H	include/fluidsynth/gen.h	22;"	d
_FLUIDSYNTH_H	include/fluidsynth.h	22;"	d
_FLUIDSYNTH_LOG_H	include/fluidsynth/log.h	22;"	d
_FLUIDSYNTH_MIDI_H	include/fluidsynth/midi.h	22;"	d
_FLUIDSYNTH_MISC_H	include/fluidsynth/misc.h	22;"	d
_FLUIDSYNTH_MOD_H	include/fluidsynth/mod.h	22;"	d
_FLUIDSYNTH_PRIV_H	fluidsynth_priv.h	23;"	d
_FLUIDSYNTH_RAMSFONT_H	include/fluidsynth/ramsfont.h	22;"	d
_FLUIDSYNTH_SEQBIND_H	include/fluidsynth/seqbind.h	22;"	d
_FLUIDSYNTH_SEQ_H	include/fluidsynth/seq.h	22;"	d
_FLUIDSYNTH_SETTINGS_H	include/fluidsynth/settings.h	22;"	d
_FLUIDSYNTH_SFONT_H	include/fluidsynth/sfont.h	22;"	d
_FLUIDSYNTH_SHELL_H	include/fluidsynth/shell.h	22;"	d
_FLUIDSYNTH_SYNTH_H	include/fluidsynth/synth.h	22;"	d
_FLUIDSYNTH_TYPES_H	include/fluidsynth/types.h	22;"	d
_FLUIDSYNTH_VERSION_H	include/fluidsynth/version.h	22;"	d
_FLUIDSYNTH_VOICE_H	include/fluidsynth/voice.h	22;"	d
_FLUID_AUDRIVER_H	fluid_adriver.h	22;"	d
_FLUID_CHAN_H	fluid_chan.h	22;"	d
_FLUID_CHORUS_H	fluid_chorus.h	23;"	d
_FLUID_CMD_H	fluid_cmd.h	22;"	d
_FLUID_CONV_H	fluid_conv.h	22;"	d
_FLUID_DEFSFONT_H	fluid_defsfont.h	25;"	d
_FLUID_EVENT_PRIV_H	fluid_event_priv.h	23;"	d
_FLUID_GEN_H	fluid_gen.h	23;"	d
_FLUID_HASH_H	fluid_hash.h	38;"	d
_FLUID_IO_H	fluid_io.h	23;"	d
_FLUID_LADSPA_H	fluid_ladspa.h	26;"	d
_FLUID_LIST_H	fluid_list.h	21;"	d
_FLUID_MDRIVER_H	fluid_mdriver.h	22;"	d
_FLUID_MIDIROUTER_H	fluid_midi_router.h	25;"	d
_FLUID_MIDI_H	fluid_midi.h	22;"	d
_FLUID_MOD_H	fluid_mod.h	22;"	d
_FLUID_PHASE_H	fluid_phase.h	23;"	d
_FLUID_RAMSFONT_H	fluid_ramsfont.h	23;"	d
_FLUID_REV_H	fluid_rev.h	23;"	d
_FLUID_SETTINGS_H	fluid_settings.h	23;"	d
_FLUID_SYNTH_H	fluid_synth.h	23;"	d
_FLUID_SYS_H	fluid_sys.h	37;"	d
_FLUID_TUNING_H	fluid_tuning.h	33;"	d
_FLUID_VOICE_H	fluid_voice.h	23;"	d
_FPU_CLR_SW	fluid_sys.c	1070;"	d	file:
_FPU_GET_SW	fluid_sys.c	1067;"	d	file:
_FPU_STATUS_DE	fluid_sys.c	1056;"	d	file:
_FPU_STATUS_ES	fluid_sys.c	1062;"	d	file:
_FPU_STATUS_IE	fluid_sys.c	1055;"	d	file:
_FPU_STATUS_OE	fluid_sys.c	1058;"	d	file:
_FPU_STATUS_PE	fluid_sys.c	1060;"	d	file:
_FPU_STATUS_SF	fluid_sys.c	1061;"	d	file:
_FPU_STATUS_UE	fluid_sys.c	1059;"	d	file:
_FPU_STATUS_ZE	fluid_sys.c	1057;"	d	file:
_GEN	fluid_voice.h	274;"	d
_GNU_SOURCE	fluid_synth.c	31;"	d	file:
_GNU_SOURCE	fluidsynth.c	32;"	d	file:
_MAX_VALUE	fluid_sndmgr.c	322;"	d	file:
_ON	fluid_voice.h	265;"	d
_PLAYING	fluid_voice.h	260;"	d
_PRIV_FLUID_SFONT_H	fluid_sfont.h	23;"	d
_RELEASED	fluid_voice.h	268;"	d
_SAMPLEMODE	fluid_voice.h	269;"	d
_SFBag	fluid_defsfont.h	/^typedef struct _SFBag$/;"	s
_SFChunk	fluid_defsfont.h	/^typedef struct _SFChunk$/;"	s
_SFData	fluid_defsfont.h	/^typedef struct _SFData$/;"	s
_SFGen	fluid_defsfont.h	/^typedef struct _SFGen$/;"	s
_SFGenAmount	fluid_defsfont.h	/^typedef union _SFGenAmount$/;"	u
_SFIhdr	fluid_defsfont.h	/^typedef struct _SFIhdr$/;"	s
_SFInst	fluid_defsfont.h	/^typedef struct _SFInst$/;"	s
_SFMod	fluid_defsfont.h	/^typedef struct _SFMod$/;"	s
_SFPhdr	fluid_defsfont.h	/^typedef struct _SFPhdr$/;"	s
_SFPreset	fluid_defsfont.h	/^typedef struct _SFPreset$/;"	s
_SFSample	fluid_defsfont.h	/^typedef struct _SFSample$/;"	s
_SFShdr	fluid_defsfont.h	/^typedef struct _SFShdr$/;"	s
_SFVersion	fluid_defsfont.h	/^typedef struct _SFVersion$/;"	s
_SFZone	fluid_defsfont.h	/^typedef struct _SFZone$/;"	s
_SUSTAINED	fluid_voice.h	266;"	d
__Types__	config_macosx.h	17;"	d
__Types__	fluidsynth_priv.h	136;"	d
__pitch	fluid_voice.c	917;"	d	file:
_fluid_allpass	fluid_rev.c	/^struct _fluid_allpass {$/;"	s	file:
_fluid_audio_driver_t	fluid_adriver.h	/^struct _fluid_audio_driver_t$/;"	s
_fluid_audriver_definition_t	fluid_adriver.c	/^typedef struct _fluid_audriver_definition_t$/;"	s	file:
_fluid_bank_offset_t	fluid_synth.h	/^struct _fluid_bank_offset_t {$/;"	s
_fluid_channel_t	fluid_chan.h	/^struct _fluid_channel_t$/;"	s
_fluid_chorus_t	fluid_chorus.c	/^struct _fluid_chorus_t {$/;"	s	file:
_fluid_client_t	fluid_cmd.c	/^struct _fluid_client_t {$/;"	s	file:
_fluid_comb	fluid_rev.c	/^struct _fluid_comb {$/;"	s	file:
_fluid_defpreset_t	fluid_defsfont.h	/^struct _fluid_defpreset_t$/;"	s
_fluid_defsfont_t	fluid_defsfont.h	/^struct _fluid_defsfont_t$/;"	s
_fluid_env_data_t	fluid_voice.h	/^struct _fluid_env_data_t {$/;"	s
_fluid_event_t	fluid_event_priv.h	/^struct _fluid_event_t {$/;"	s
_fluid_evt_entry	fluid_event_priv.h	/^struct _fluid_evt_entry {$/;"	s
_fluid_evt_heap_free	fluid_event.c	/^_fluid_evt_heap_free(fluid_evt_heap_t* heap)$/;"	f
_fluid_evt_heap_init	fluid_event.c	/^_fluid_evt_heap_init(int nbEvents)$/;"	f
_fluid_evt_heap_t	fluid_event_priv.h	/^typedef struct _fluid_evt_heap_t {$/;"	s
_fluid_gen_info_t	fluid_gen.h	/^typedef struct _fluid_gen_info_t {$/;"	s
_fluid_gen_t	include/fluidsynth/gen.h	/^typedef struct _fluid_gen_t$/;"	s
_fluid_handle_option_data_t	fluid_cmd.c	/^struct _fluid_handle_option_data_t {$/;"	s	file:
_fluid_handle_settings_data_t	fluid_cmd.c	/^struct _fluid_handle_settings_data_t {$/;"	s	file:
_fluid_hashnode_t	fluid_hash.c	/^struct _fluid_hashnode_t {$/;"	s	file:
_fluid_hashtable_t	fluid_hash.c	/^struct _fluid_hashtable_t {$/;"	s	file:
_fluid_inst_t	fluid_defsfont.h	/^struct _fluid_inst_t$/;"	s
_fluid_inst_zone_t	fluid_defsfont.h	/^struct _fluid_inst_zone_t$/;"	s
_fluid_list_t	fluid_list.h	/^struct _fluid_list_t$/;"	s
_fluid_midi_driver_t	fluid_mdriver.h	/^struct _fluid_midi_driver_t$/;"	s
_fluid_midi_event_t	fluid_midi.h	/^struct _fluid_midi_event_t {$/;"	s
_fluid_midi_parser_t	fluid_midi.h	/^struct _fluid_midi_parser_t {$/;"	s
_fluid_midi_router_rule_t	fluid_midi_router.h	/^struct _fluid_midi_router_rule_t {$/;"	s
_fluid_midi_router_t	fluid_midi_router.h	/^struct _fluid_midi_router_t {$/;"	s
_fluid_mod_t	include/fluidsynth/mod.h	/^struct _fluid_mod_t$/;"	s
_fluid_player_t	fluid_midi.h	/^struct _fluid_player_t {$/;"	s
_fluid_preset_t	include/fluidsynth/sfont.h	/^struct _fluid_preset_t {$/;"	s
_fluid_preset_zone_t	fluid_defsfont.h	/^struct _fluid_preset_zone_t$/;"	s
_fluid_profile_data_t	fluid_sys.h	/^typedef struct _fluid_profile_data_t {$/;"	s
_fluid_rampreset_t	fluid_ramsfont.h	/^struct _fluid_rampreset_t$/;"	s
_fluid_rampreset_voice_t	fluid_ramsfont.c	/^struct _fluid_rampreset_voice_t {$/;"	s	file:
_fluid_ramsfont_t	fluid_ramsfont.h	/^struct _fluid_ramsfont_t$/;"	s
_fluid_revmodel_presets_t	fluid_rev.h	/^typedef struct _fluid_revmodel_presets_t {$/;"	s
_fluid_revmodel_t	fluid_rev.c	/^struct _fluid_revmodel_t {$/;"	s	file:
_fluid_sample_t	include/fluidsynth/sfont.h	/^struct _fluid_sample_t$/;"	s
_fluid_seq_heap_get_free	fluid_event.c	/^_fluid_seq_heap_get_free(fluid_evt_heap_t* heap)$/;"	f
_fluid_seq_heap_set_free	fluid_event.c	/^_fluid_seq_heap_set_free(fluid_evt_heap_t* heap, fluid_evt_entry* evt)$/;"	f
_fluid_seq_queue_end	fluid_seq.c	/^_fluid_seq_queue_end(fluid_sequencer_t* seq)$/;"	f
_fluid_seq_queue_init	fluid_seq.c	/^_fluid_seq_queue_init(fluid_sequencer_t* seq, int maxEvents)$/;"	f
_fluid_seq_queue_insert_entry	fluid_seq.c	/^_fluid_seq_queue_insert_entry(fluid_sequencer_t* seq, fluid_evt_entry * evtentry)$/;"	f
_fluid_seq_queue_insert_queue0	fluid_seq.c	/^_fluid_seq_queue_insert_queue0(fluid_sequencer_t* seq, fluid_evt_entry* tmp, int cell)$/;"	f
_fluid_seq_queue_insert_queue1	fluid_seq.c	/^_fluid_seq_queue_insert_queue1(fluid_sequencer_t* seq, fluid_evt_entry* tmp, int cell)$/;"	f
_fluid_seq_queue_insert_queue_later	fluid_seq.c	/^_fluid_seq_queue_insert_queue_later(fluid_sequencer_t* seq, fluid_evt_entry* evtentry)$/;"	f
_fluid_seq_queue_matchevent	fluid_seq.c	/^_fluid_seq_queue_matchevent(fluid_event_t* evt, int templType, short templSrc, short templDest)$/;"	f
_fluid_seq_queue_pre_insert	fluid_seq.c	/^_fluid_seq_queue_pre_insert(fluid_sequencer_t* seq, fluid_event_t * evt)$/;"	f
_fluid_seq_queue_pre_remove	fluid_seq.c	/^_fluid_seq_queue_pre_remove(fluid_sequencer_t* seq, short src, short dest, int type)$/;"	f
_fluid_seq_queue_print_later	fluid_seq.c	/^_fluid_seq_queue_print_later(fluid_sequencer_t* seq)$/;"	f
_fluid_seq_queue_process	fluid_seq.c	/^_fluid_seq_queue_process(void* data, unsigned int msec)$/;"	f
_fluid_seq_queue_remove_entries_matching	fluid_seq.c	/^_fluid_seq_queue_remove_entries_matching(fluid_sequencer_t* seq, fluid_evt_entry* templ)$/;"	f
_fluid_seq_queue_send_cell_events	fluid_seq.c	/^_fluid_seq_queue_send_cell_events(fluid_sequencer_t* seq, int cellNb)$/;"	f
_fluid_seq_queue_send_queued_events	fluid_seq.c	/^_fluid_seq_queue_send_queued_events(fluid_sequencer_t* seq)$/;"	f
_fluid_seq_queue_slide	fluid_seq.c	/^_fluid_seq_queue_slide(fluid_sequencer_t* seq)$/;"	f
_fluid_sequencer_client_t	fluid_seq.c	/^typedef struct _fluid_sequencer_client_t {$/;"	s	file:
_fluid_sequencer_t	fluid_seq.c	/^struct _fluid_sequencer_t {$/;"	s	file:
_fluid_server_socket_t	fluid_sys.c	/^struct _fluid_server_socket_t {$/;"	s	file:
_fluid_server_t	fluid_cmd.c	/^struct _fluid_server_t {$/;"	s	file:
_fluid_sfloader_t	include/fluidsynth/sfont.h	/^struct _fluid_sfloader_t {$/;"	s
_fluid_sfont_t	include/fluidsynth/sfont.h	/^struct _fluid_sfont_t {$/;"	s
_fluid_shell_t	fluid_cmd.c	/^struct _fluid_shell_t {$/;"	s	file:
_fluid_synth_t	fluid_synth.h	/^struct _fluid_synth_t$/;"	s
_fluid_thread_t	fluid_sys.c	/^struct _fluid_thread_t {$/;"	s	file:
_fluid_timer_t	fluid_sys.c	/^struct _fluid_timer_t$/;"	s	file:
_fluid_track_t	fluid_midi.h	/^struct _fluid_track_t {$/;"	s
_fluid_tuning_t	fluid_tuning.h	/^struct _fluid_tuning_t {$/;"	s
_fluid_voice_t	fluid_voice.h	/^struct _fluid_voice_t$/;"	s
_timerCallback	fluid_sys.c	/^_timerCallback(fluid_timer_t *timer)$/;"	f
a1	fluid_voice.h	/^	fluid_real_t a1;              \/* a0 \/ a0 *\/$/;"	m	struct:_fluid_voice_t
a1_incr	fluid_voice.h	/^	fluid_real_t a1_incr;$/;"	m	struct:_fluid_voice_t
a2	fluid_voice.h	/^	fluid_real_t a2;              \/* a1 \/ a0 *\/$/;"	m	struct:_fluid_voice_t
a2_incr	fluid_voice.h	/^	fluid_real_t a2_incr;$/;"	m	struct:_fluid_voice_t
access	fluid_alsa.c	/^  snd_pcm_access_t access;$/;"	m	struct:fluid_alsa_formats_t	file:
allpassL	fluid_rev.c	/^  fluid_allpass allpassL[numallpasses];$/;"	m	struct:_fluid_revmodel_t	file:
allpassR	fluid_rev.c	/^  fluid_allpass allpassR[numallpasses];$/;"	m	struct:_fluid_revmodel_t	file:
allpasstuningL1	fluid_rev.c	262;"	d	file:
allpasstuningL2	fluid_rev.c	264;"	d	file:
allpasstuningL3	fluid_rev.c	266;"	d	file:
allpasstuningL4	fluid_rev.c	268;"	d	file:
allpasstuningR1	fluid_rev.c	263;"	d	file:
allpasstuningR2	fluid_rev.c	265;"	d	file:
allpasstuningR3	fluid_rev.c	267;"	d	file:
allpasstuningR4	fluid_rev.c	269;"	d	file:
amount	fluid_defsfont.h	/^  SFGenAmount amount;		\/* generator value *\/$/;"	m	struct:_SFGen
amount	fluid_defsfont.h	/^  signed short amount;		\/* signed, degree of modulation *\/$/;"	m	struct:_SFMod
amount	include/fluidsynth/mod.h	/^  double amount;$/;"	m	struct:_fluid_mod_t
amp	fluid_voice.h	/^	fluid_real_t amp;                \/* current linear amplitude *\/$/;"	m	struct:_fluid_voice_t
amp_chorus	fluid_voice.h	/^	fluid_real_t amp_chorus;$/;"	m	struct:_fluid_voice_t
amp_incr	fluid_voice.h	/^	fluid_real_t amp_incr;		\/* amplitude increment value *\/$/;"	m	struct:_fluid_voice_t
amp_left	fluid_voice.h	/^	fluid_real_t amp_left;$/;"	m	struct:_fluid_voice_t
amp_reverb	fluid_voice.h	/^	fluid_real_t amp_reverb;$/;"	m	struct:_fluid_voice_t
amp_right	fluid_voice.h	/^	fluid_real_t amp_right;$/;"	m	struct:_fluid_voice_t
amplitude_that_reaches_noise_floor	include/fluidsynth/sfont.h	/^  double amplitude_that_reaches_noise_floor;$/;"	m	struct:_fluid_sample_t
amplitude_that_reaches_noise_floor_is_valid	include/fluidsynth/sfont.h	/^  int amplitude_that_reaches_noise_floor_is_valid; $/;"	m	struct:_fluid_sample_t
amplitude_that_reaches_noise_floor_loop	fluid_voice.h	/^	fluid_real_t amplitude_that_reaches_noise_floor_loop;$/;"	m	struct:_fluid_voice_t
amplitude_that_reaches_noise_floor_nonloop	fluid_voice.h	/^	fluid_real_t amplitude_that_reaches_noise_floor_nonloop;$/;"	m	struct:_fluid_voice_t
amtsrc	fluid_defsfont.h	/^  unsigned short amtsrc;		\/* second source controls amnt of first *\/$/;"	m	struct:_SFMod
attenuation	fluid_voice.h	/^	fluid_real_t attenuation;        \/* the attenuation in centibels *\/$/;"	m	struct:_fluid_voice_t
audio_channels	fluid_jack.c	/^  int audio_channels;$/;"	m	struct:__anon30	file:
audio_channels	fluid_synth.h	/^  int audio_channels;                \/** the number of audio channels (1 channel=left+right) *\/$/;"	m	struct:_fluid_synth_t
audio_groups	fluid_synth.h	/^  int audio_groups;                  \/** the number of (stereo) 'sub'groups from the synth.$/;"	m	struct:_fluid_synth_t
auto_destroy	fluid_sys.c	/^  int auto_destroy;$/;"	m	struct:_fluid_timer_t	file:
b02	fluid_voice.h	/^	fluid_real_t b02;              \/* b0 \/ a0 *\/$/;"	m	struct:_fluid_voice_t
b02_incr	fluid_voice.h	/^	fluid_real_t b02_incr;$/;"	m	struct:_fluid_voice_t
b1	fluid_voice.h	/^	fluid_real_t b1;              \/* b1 \/ a0 *\/$/;"	m	struct:_fluid_voice_t
b1_incr	fluid_voice.h	/^	fluid_real_t b1_incr;$/;"	m	struct:_fluid_voice_t
badgen	fluid_defsfont.c	/^unsigned short badgen[] = { Gen_Unused1, Gen_Unused2, Gen_Unused3, Gen_Unused4,$/;"	v
badpgen	fluid_defsfont.c	/^unsigned short badpgen[] = { Gen_StartAddrOfs, Gen_EndAddrOfs, Gen_StartLoopAddrOfs,$/;"	v
bank	fluid_defsfont.h	/^  unsigned int bank;                    \/* the bank number *\/$/;"	m	struct:_fluid_defpreset_t
bank	fluid_defsfont.h	/^  unsigned short bank;			\/* bank number *\/$/;"	m	struct:_SFPhdr
bank	fluid_defsfont.h	/^  unsigned short bank;			\/* bank number *\/$/;"	m	struct:_SFPreset
bank	fluid_ramsfont.h	/^  unsigned int bank;                    \/* the bank number *\/$/;"	m	struct:_fluid_rampreset_t
bank	fluid_tuning.h	/^  int bank;$/;"	m	struct:_fluid_tuning_t
bank_msb	fluid_chan.h	/^  unsigned char bank_msb;$/;"	m	struct:_fluid_channel_t
bank_offsets	fluid_synth.h	/^  fluid_list_t* bank_offsets;       \/** the offsets of the soundfont banks *\/$/;"	m	struct:_fluid_synth_t
banknum	fluid_chan.h	/^  unsigned int banknum;$/;"	m	struct:_fluid_channel_t
begin_msec	fluid_midi.h	/^  int begin_msec;           \/* the time (msec) of the beginning of the file *\/$/;"	m	struct:_fluid_player_t
bigendian	fluid_oss.c	/^  int bigendian;$/;"	m	struct:__anon23	file:
buf	fluid_aufile.c	/^	short* buf;$/;"	m	struct:__anon28	file:
buf	fluid_ladspa.h	/^  LADSPA_Data * buf;      \/*Either the buffer (Audio node) or a single control value (Control node)*\/$/;"	m	struct:__anon35
buf_size	fluid_aufile.c	/^	int buf_size;$/;"	m	struct:__anon28	file:
bufallpassL1	fluid_rev.c	/^  fluid_real_t bufallpassL1[allpasstuningL1];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassL2	fluid_rev.c	/^  fluid_real_t bufallpassL2[allpasstuningL2];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassL3	fluid_rev.c	/^  fluid_real_t bufallpassL3[allpasstuningL3];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassL4	fluid_rev.c	/^  fluid_real_t bufallpassL4[allpasstuningL4];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassR1	fluid_rev.c	/^  fluid_real_t bufallpassR1[allpasstuningR1];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassR2	fluid_rev.c	/^  fluid_real_t bufallpassR2[allpasstuningR2];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassR3	fluid_rev.c	/^  fluid_real_t bufallpassR3[allpasstuningR3];$/;"	m	struct:_fluid_revmodel_t	file:
bufallpassR4	fluid_rev.c	/^  fluid_real_t bufallpassR4[allpasstuningR4];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL1	fluid_rev.c	/^  fluid_real_t bufcombL1[combtuningL1];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL2	fluid_rev.c	/^  fluid_real_t bufcombL2[combtuningL2];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL3	fluid_rev.c	/^  fluid_real_t bufcombL3[combtuningL3];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL4	fluid_rev.c	/^  fluid_real_t bufcombL4[combtuningL4];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL5	fluid_rev.c	/^  fluid_real_t bufcombL5[combtuningL5];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL6	fluid_rev.c	/^  fluid_real_t bufcombL6[combtuningL6];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL7	fluid_rev.c	/^  fluid_real_t bufcombL7[combtuningL7];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombL8	fluid_rev.c	/^  fluid_real_t bufcombL8[combtuningL8];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR1	fluid_rev.c	/^  fluid_real_t bufcombR1[combtuningR1];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR2	fluid_rev.c	/^  fluid_real_t bufcombR2[combtuningR2];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR3	fluid_rev.c	/^  fluid_real_t bufcombR3[combtuningR3];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR4	fluid_rev.c	/^  fluid_real_t bufcombR4[combtuningR4];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR5	fluid_rev.c	/^  fluid_real_t bufcombR5[combtuningR5];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR6	fluid_rev.c	/^  fluid_real_t bufcombR6[combtuningR6];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR7	fluid_rev.c	/^  fluid_real_t bufcombR7[combtuningR7];$/;"	m	struct:_fluid_revmodel_t	file:
bufcombR8	fluid_rev.c	/^  fluid_real_t bufcombR8[combtuningR8];$/;"	m	struct:_fluid_revmodel_t	file:
buffer	fluid_alsa.c	/^  unsigned char buffer[BUFFER_LENGTH];$/;"	m	struct:__anon12	file:
buffer	fluid_oss.c	/^  unsigned char buffer[BUFFER_LENGTH];$/;"	m	struct:__anon24	file:
buffer	fluid_oss.c	/^  void* buffer;$/;"	m	struct:__anon23	file:
buffer	fluid_rev.c	/^  fluid_real_t *buffer;$/;"	m	struct:_fluid_allpass	file:
buffer	fluid_rev.c	/^  fluid_real_t *buffer;$/;"	m	struct:_fluid_comb	file:
bufferByteSize	fluid_sndmgr.c	/^  int bufferByteSize;$/;"	m	struct:__anon5	file:
bufferFrameSize	fluid_sndmgr.c	/^  int bufferFrameSize;$/;"	m	struct:__anon5	file:
buffer_byte_size	fluid_dsound.c	/^  DWORD buffer_byte_size;$/;"	m	struct:__anon15	file:
buffer_byte_size	fluid_oss.c	/^  int buffer_byte_size;$/;"	m	struct:__anon23	file:
buffer_size	fluid_alsa.c	/^  int buffer_size;$/;"	m	struct:__anon11	file:
buffer_size	fluid_coreaudio.c	/^  unsigned int buffer_size;$/;"	m	struct:__anon27	file:
buffer_size	fluid_oss.c	/^  int buffer_size;$/;"	m	struct:__anon23	file:
buffer_size	fluid_pulse.c	/^  int buffer_size;$/;"	m	struct:__anon14	file:
buffers	fluid_coreaudio.c	/^  float* buffers[2];$/;"	m	struct:__anon27	file:
buffers	fluid_oss.c	/^  float* buffers[2];$/;"	m	struct:__anon23	file:
bufidx	fluid_rev.c	/^  int bufidx;$/;"	m	struct:_fluid_allpass	file:
bufidx	fluid_rev.c	/^  int bufidx;$/;"	m	struct:_fluid_comb	file:
bufsize	fluid_rev.c	/^  int bufsize;$/;"	m	struct:_fluid_allpass	file:
bufsize	fluid_rev.c	/^  int bufsize;$/;"	m	struct:_fluid_comb	file:
busy	fluid_synth.h	/^  fluid_mutex_t busy;                   \/* Indicates, whether the audio thread is currently running.$/;"	m	struct:_fluid_synth_t
c	fluid_midi.h	/^  int c;$/;"	m	struct:__anon25
calculate_hold_decay_buffers	fluid_voice.c	/^int calculate_hold_decay_buffers(fluid_voice_t* voice, int gen_base,$/;"	f
callback	fluid_alsa.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon11	file:
callback	fluid_aufile.c	/^	fluid_audio_func_t callback;$/;"	m	struct:__anon28	file:
callback	fluid_coreaudio.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon27	file:
callback	fluid_jack.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon30	file:
callback	fluid_oss.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon23	file:
callback	fluid_pulse.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon14	file:
callback	fluid_seq.c	/^	fluid_event_callback_t callback;$/;"	m	struct:_fluid_sequencer_client_t	file:
callback	fluid_sndmgr.c	/^  fluid_audio_func_t callback;$/;"	m	struct:__anon5	file:
callback	fluid_sys.c	/^  fluid_timer_callback_t callback;$/;"	m	struct:_fluid_timer_t	file:
callback_is_audio_func	fluid_sndmgr.c	/^  int callback_is_audio_func;$/;"	m	struct:__anon5	file:
caps	fluid_oss.c	/^  int caps;$/;"	m	struct:__anon23	file:
cc	fluid_chan.h	/^  short cc[128];$/;"	m	struct:_fluid_channel_t
cc_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* cc_rules;$/;"	m	struct:_fluid_midi_router_t
chan	fluid_voice.h	/^	unsigned char chan;             \/* the channel number, quick access for channel messages *\/$/;"	m	struct:_fluid_voice_t
chan_add	fluid_midi_router.h	/^    int chan_add;                             \/* Channel offset *\/$/;"	m	struct:_fluid_midi_router_rule_t
chan_max	fluid_midi_router.h	/^    int chan_max;$/;"	m	struct:_fluid_midi_router_rule_t
chan_min	fluid_midi_router.h	/^    int chan_min;                             \/* Channel window, for which this rule is valid *\/$/;"	m	struct:_fluid_midi_router_rule_t
chan_mul	fluid_midi_router.h	/^    fluid_real_t chan_mul;                     \/* Channel multiplier (usually 0 or 1) *\/$/;"	m	struct:_fluid_midi_router_rule_t
channel	fluid_event_priv.h	/^	int channel;$/;"	m	struct:_fluid_event_t
channel	fluid_midi.h	/^  unsigned char channel;          \/* The channel of the event that is received (in case of a channel event) *\/$/;"	m	struct:_fluid_midi_parser_t
channel	fluid_midi.h	/^  unsigned char channel;    \/* MIDI channel *\/$/;"	m	struct:_fluid_midi_event_t
channel	fluid_sndmgr.c	/^  SndChannelPtr channel;$/;"	m	struct:__anon5	file:
channel	fluid_synth.h	/^  fluid_channel_t** channel;          \/** the channels *\/$/;"	m	struct:_fluid_synth_t
channel	fluid_voice.h	/^	fluid_channel_t* channel;$/;"	m	struct:_fluid_voice_t
channel_pressure	fluid_chan.h	/^  short channel_pressure;$/;"	m	struct:_fluid_channel_t
channel_pressure_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* channel_pressure_rules;$/;"	m	struct:_fluid_midi_router_t
channum	fluid_chan.h	/^  int channum;$/;"	m	struct:_fluid_channel_t
check_sample_sanity_flag	fluid_voice.h	/^	int check_sample_sanity_flag;   \/* Flag that initiates, that sample-related parameters$/;"	m	struct:_fluid_voice_t
chorus	fluid_synth.h	/^  fluid_chorus_t* chorus;$/;"	m	struct:_fluid_synth_t
chorus_send	fluid_voice.h	/^	fluid_real_t chorus_send;$/;"	m	struct:_fluid_voice_t
chorusbuf	fluid_chorus.c	/^  fluid_real_t *chorusbuf;$/;"	m	struct:_fluid_chorus_t	file:
chunkid	fluid_defsfont.c	/^chunkid (unsigned int id)$/;"	f	file:
client	fluid_coremidi.c	/^  MIDIClientRef client;$/;"	m	struct:__anon29	file:
client	fluid_jack.c	/^  jack_client_t *client;$/;"	m	struct:__anon30	file:
client	fluid_jack.c	/^  jack_client_t *client;$/;"	m	struct:__anon31	file:
clients	fluid_cmd.c	/^  fluid_list_t* clients;$/;"	m	struct:_fluid_server_t	file:
clients	fluid_seq.c	/^	fluid_list_t* clients;$/;"	m	struct:_fluid_sequencer_t	file:
clientsID	fluid_seq.c	/^	short clientsID;$/;"	m	struct:_fluid_sequencer_t	file:
cmd_handler	fluidsynth.c	/^fluid_cmd_handler_t* cmd_handler = NULL;$/;"	v
coeff	fluid_voice.h	/^	fluid_real_t coeff;$/;"	m	struct:_fluid_env_data_t
combL	fluid_rev.c	/^  fluid_comb combL[numcombs];$/;"	m	struct:_fluid_revmodel_t	file:
combR	fluid_rev.c	/^  fluid_comb combR[numcombs];$/;"	m	struct:_fluid_revmodel_t	file:
combtuningL1	fluid_rev.c	246;"	d	file:
combtuningL2	fluid_rev.c	248;"	d	file:
combtuningL3	fluid_rev.c	250;"	d	file:
combtuningL4	fluid_rev.c	252;"	d	file:
combtuningL5	fluid_rev.c	254;"	d	file:
combtuningL6	fluid_rev.c	256;"	d	file:
combtuningL7	fluid_rev.c	258;"	d	file:
combtuningL8	fluid_rev.c	260;"	d	file:
combtuningR1	fluid_rev.c	247;"	d	file:
combtuningR2	fluid_rev.c	249;"	d	file:
combtuningR3	fluid_rev.c	251;"	d	file:
combtuningR4	fluid_rev.c	253;"	d	file:
combtuningR5	fluid_rev.c	255;"	d	file:
combtuningR6	fluid_rev.c	257;"	d	file:
combtuningR7	fluid_rev.c	259;"	d	file:
combtuningR8	fluid_rev.c	261;"	d	file:
cond	fluid_ladspa.h	/^  pthread_cond_t cond;$/;"	m	struct:__anon36
cont	fluid_alsa.c	/^  int cont;$/;"	m	struct:__anon11	file:
cont	fluid_dsound.c	/^  int cont;$/;"	m	struct:__anon15	file:
cont	fluid_oss.c	/^  int cont;$/;"	m	struct:__anon23	file:
cont	fluid_pulse.c	/^  int cont;$/;"	m	struct:__anon14	file:
cont	fluid_sys.c	/^  int cont;$/;"	m	struct:_fluid_server_socket_t	file:
cont	fluid_sys.c	/^  int cont;$/;"	m	struct:_fluid_timer_t	file:
control	fluid_event_priv.h	/^	short control;$/;"	m	struct:_fluid_event_t
convbuffers	fluid_sndmgr.c	/^  float* convbuffers[2];$/;"	m	struct:__anon5	file:
count	fluid_sys.c	/^  unsigned int count;$/;"	m	struct:_fluid_timer_t	file:
count	fluid_sys.h	/^  unsigned int count;$/;"	m	struct:_fluid_profile_data_t
count	fluid_voice.h	/^	unsigned int count;$/;"	m	struct:_fluid_env_data_t
counter	fluid_chorus.c	/^  int counter;$/;"	m	struct:_fluid_chorus_t	file:
cpu_load	fluid_synth.h	/^  double cpu_load;$/;"	m	struct:_fluid_synth_t
cur	fluid_midi.h	/^  fluid_midi_event_t *cur;$/;"	m	struct:_fluid_track_t
cur	fluid_synth.h	/^  int cur;                           \/** the current sample in the audio buffers to be output *\/$/;"	m	struct:_fluid_synth_t
cur_msec	fluid_midi.h	/^  int cur_msec;             \/* the current time *\/$/;"	m	struct:_fluid_player_t
cur_ticks	fluid_midi.h	/^  int cur_ticks;            \/* the number of tempo ticks passed *\/$/;"	m	struct:_fluid_player_t
cur_tuning	fluid_synth.h	/^  fluid_tuning_t* cur_tuning;         \/** current tuning in the iteration *\/$/;"	m	struct:_fluid_synth_t
current_file	fluid_midi.h	/^  char* current_file;$/;"	m	struct:_fluid_player_t
damp	fluid_rev.c	/^  fluid_real_t damp;$/;"	m	struct:_fluid_revmodel_t	file:
damp	fluid_rev.h	/^  fluid_real_t damp;$/;"	m	struct:_fluid_revmodel_presets_t
damp1	fluid_rev.c	/^  fluid_real_t damp1;$/;"	m	struct:_fluid_comb	file:
damp2	fluid_rev.c	/^  fluid_real_t damp2;$/;"	m	struct:_fluid_comb	file:
data	fluid_alsa.c	/^  void* data;$/;"	m	struct:__anon11	file:
data	fluid_aufile.c	/^	void* data;$/;"	m	struct:__anon28	file:
data	fluid_cmd.c	/^  void* data;$/;"	m	struct:_fluid_server_t	file:
data	fluid_coreaudio.c	/^  void* data;$/;"	m	struct:__anon27	file:
data	fluid_event_priv.h	/^	void* data;$/;"	m	struct:_fluid_event_t
data	fluid_jack.c	/^  void* data;$/;"	m	struct:__anon30	file:
data	fluid_list.h	/^  void* data;$/;"	m	struct:_fluid_list_t
data	fluid_mdriver.h	/^  void* data;$/;"	m	struct:_fluid_midi_driver_t
data	fluid_oss.c	/^  void* data;$/;"	m	struct:__anon23	file:
data	fluid_pulse.c	/^  void* data;$/;"	m	struct:__anon14	file:
data	fluid_seq.c	/^	void* data;$/;"	m	struct:_fluid_sequencer_client_t	file:
data	fluid_settings.c	/^  void* data;$/;"	m	struct:__anon6	file:
data	fluid_settings.c	/^  void* data;$/;"	m	struct:__anon7	file:
data	fluid_settings.c	/^  void* data;$/;"	m	struct:__anon8	file:
data	fluid_sndmgr.c	/^  void* data;$/;"	m	struct:__anon5	file:
data	fluid_sys.c	/^  void* data;$/;"	m	struct:_fluid_server_socket_t	file:
data	fluid_sys.c	/^  void* data;$/;"	m	struct:_fluid_thread_t	file:
data	fluid_sys.c	/^  void* data;$/;"	m	struct:_fluid_timer_t	file:
data	include/fluidsynth/sfont.h	/^  short* data;$/;"	m	struct:_fluid_sample_t
data	include/fluidsynth/sfont.h	/^  void* data;$/;"	m	struct:_fluid_preset_t
data	include/fluidsynth/sfont.h	/^  void* data;$/;"	m	struct:_fluid_sfloader_t
data	include/fluidsynth/sfont.h	/^  void* data;$/;"	m	struct:_fluid_sfont_t
data	include/fluidsynth/shell.h	/^  void* data;                           \/** Pointer to the user data *\/$/;"	m	struct:__anon3
debug	fluid_voice.h	/^	int debug;$/;"	m	struct:_fluid_voice_t
def	fluid_gen.h	/^	float def;		\/* The default value (cfr. fluid_gen_set_default_values()) *\/$/;"	m	struct:_fluid_gen_info_t
def	fluid_settings.c	/^  char* def;$/;"	m	struct:__anon6	file:
def	fluid_settings.c	/^  double def;$/;"	m	struct:__anon7	file:
def	fluid_settings.c	/^  int def;$/;"	m	struct:__anon8	file:
default_at2viblfo_mod	fluid_synth.c	/^fluid_mod_t default_at2viblfo_mod;      \/* SF2.01 section 8.4.3  *\/$/;"	v
default_att_mod	fluid_synth.c	/^fluid_mod_t default_att_mod;            \/* SF2.01 section 8.4.5  *\/$/;"	v
default_chorus_mod	fluid_synth.c	/^fluid_mod_t default_chorus_mod;         \/* SF2.01 section 8.4.9  *\/$/;"	v
default_expr_mod	fluid_synth.c	/^fluid_mod_t default_expr_mod;           \/* SF2.01 section 8.4.7  *\/$/;"	v
default_mod2viblfo_mod	fluid_synth.c	/^fluid_mod_t default_mod2viblfo_mod;     \/* SF2.01 section 8.4.4  *\/$/;"	v
default_pan_mod	fluid_synth.c	/^fluid_mod_t default_pan_mod;            \/* SF2.01 section 8.4.6  *\/$/;"	v
default_pitch_bend_mod	fluid_synth.c	/^fluid_mod_t default_pitch_bend_mod;     \/* SF2.01 section 8.4.10 *\/$/;"	v
default_reverb_mod	fluid_synth.c	/^fluid_mod_t default_reverb_mod;         \/* SF2.01 section 8.4.8  *\/$/;"	v
default_vel2att_mod	fluid_synth.c	/^fluid_mod_t default_vel2att_mod;        \/* SF2.01 section 8.4.1  *\/$/;"	v
default_vel2filter_mod	fluid_synth.c	/^fluid_mod_t default_vel2filter_mod;     \/* SF2.01 section 8.4.2  *\/$/;"	v
del	fluid_hash.c	/^  fluid_hash_delete_t del;$/;"	m	struct:_fluid_hashtable_t	file:
delete1_fluid_list	fluid_list.c	/^delete1_fluid_list(fluid_list_t *list)$/;"	f
delete_fluid_alsa_audio_driver	fluid_alsa.c	/^int delete_fluid_alsa_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_alsa_rawmidi_driver	fluid_alsa.c	/^delete_fluid_alsa_rawmidi_driver(fluid_midi_driver_t* p)$/;"	f
delete_fluid_alsa_seq_driver	fluid_alsa.c	/^delete_fluid_alsa_seq_driver(fluid_midi_driver_t* p)$/;"	f
delete_fluid_audio_driver	fluid_adriver.c	/^delete_fluid_audio_driver(fluid_audio_driver_t* driver)$/;"	f
delete_fluid_channel	fluid_chan.c	/^delete_fluid_channel(fluid_channel_t* chan)$/;"	f
delete_fluid_chorus	fluid_chorus.c	/^delete_fluid_chorus(fluid_chorus_t* chorus)$/;"	f
delete_fluid_client	fluid_cmd.c	/^void delete_fluid_client(fluid_client_t* client)$/;"	f
delete_fluid_cmd	fluid_cmd.c	/^void delete_fluid_cmd(fluid_cmd_t* cmd)$/;"	f
delete_fluid_cmd_handler	fluid_cmd.c	/^void delete_fluid_cmd_handler(fluid_cmd_handler_t* handler)$/;"	f
delete_fluid_core_audio_driver	fluid_coreaudio.c	/^delete_fluid_core_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_coremidi_driver	fluid_coremidi.c	/^delete_fluid_coremidi_driver(fluid_midi_driver_t* p)$/;"	f
delete_fluid_dart_audio_driver	fluid_dart.c	/^int delete_fluid_dart_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_defpreset	fluid_defsfont.c	/^delete_fluid_defpreset(fluid_defpreset_t* preset)$/;"	f
delete_fluid_defsfloader	fluid_defsfont.c	/^int delete_fluid_defsfloader(fluid_sfloader_t* loader)$/;"	f
delete_fluid_defsfont	fluid_defsfont.c	/^int delete_fluid_defsfont(fluid_defsfont_t* sfont)$/;"	f
delete_fluid_dsound_audio_driver	fluid_dsound.c	/^int delete_fluid_dsound_audio_driver(fluid_audio_driver_t* d)$/;"	f
delete_fluid_event	fluid_event.c	/^delete_fluid_event(fluid_event_t* evt)$/;"	f
delete_fluid_file_audio_driver	fluid_aufile.c	/^int delete_fluid_file_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_hashnode	fluid_hash.c	/^delete_fluid_hashnode(fluid_hashnode_t *hash_node, fluid_hash_delete_t del)$/;"	f	file:
delete_fluid_hashnodes	fluid_hash.c	/^delete_fluid_hashnodes(fluid_hashnode_t *hash_node, fluid_hash_delete_t del)$/;"	f	file:
delete_fluid_hashtable	fluid_hash.c	/^delete_fluid_hashtable(fluid_hashtable_t *hash_table)$/;"	f
delete_fluid_inst	fluid_defsfont.c	/^delete_fluid_inst(fluid_inst_t* inst)$/;"	f
delete_fluid_inst_zone	fluid_defsfont.c	/^delete_fluid_inst_zone(fluid_inst_zone_t* zone)$/;"	f
delete_fluid_int_setting	fluid_settings.c	/^static void delete_fluid_int_setting(fluid_int_setting_t* setting)$/;"	f	file:
delete_fluid_jack_audio_driver	fluid_jack.c	/^delete_fluid_jack_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_jack_midi_driver	fluid_jack.c	/^delete_fluid_jack_midi_driver(fluid_midi_driver_t *p)$/;"	f
delete_fluid_list	fluid_list.c	/^delete_fluid_list(fluid_list_t *list)$/;"	f
delete_fluid_midi_driver	fluid_mdriver.c	/^void delete_fluid_midi_driver(fluid_midi_driver_t* driver)$/;"	f
delete_fluid_midi_event	fluid_midi.c	/^int delete_fluid_midi_event(fluid_midi_event_t* evt)$/;"	f
delete_fluid_midi_file	fluid_midi.c	/^void delete_fluid_midi_file(fluid_midi_file* mf)$/;"	f
delete_fluid_midi_parser	fluid_midi.c	/^int delete_fluid_midi_parser(fluid_midi_parser_t* parser)$/;"	f
delete_fluid_midi_router	fluid_midi_router.c	/^delete_fluid_midi_router(fluid_midi_router_t* router)$/;"	f
delete_fluid_midi_router_rule	fluid_midi_router.c	/^delete_fluid_midi_router_rule(fluid_midi_router_rule_t* rule)$/;"	f
delete_fluid_midishare_midi_driver	fluid_midishare.c	/^int delete_fluid_midishare_midi_driver(fluid_midi_driver_t* p)$/;"	f
delete_fluid_num_setting	fluid_settings.c	/^static void delete_fluid_num_setting(fluid_num_setting_t* setting)$/;"	f	file:
delete_fluid_oss_audio_driver	fluid_oss.c	/^delete_fluid_oss_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_oss_midi_driver	fluid_oss.c	/^delete_fluid_oss_midi_driver(fluid_midi_driver_t* p)$/;"	f
delete_fluid_player	fluid_midi.c	/^int delete_fluid_player(fluid_player_t* player)$/;"	f
delete_fluid_portaudio_driver	fluid_portaudio.c	/^delete_fluid_portaudio_driver(fluid_audio_driver_t *p)$/;"	f
delete_fluid_preset	fluid_sfont.h	43;"	d
delete_fluid_preset_zone	fluid_defsfont.c	/^delete_fluid_preset_zone(fluid_preset_zone_t* zone)$/;"	f
delete_fluid_pulse_audio_driver	fluid_pulse.c	/^int delete_fluid_pulse_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_rampreset	fluid_ramsfont.c	/^delete_fluid_rampreset(fluid_rampreset_t* preset)$/;"	f
delete_fluid_ramsample	fluid_ramsfont.c	/^delete_fluid_ramsample(fluid_sample_t* sample)$/;"	f
delete_fluid_ramsfont	fluid_ramsfont.c	/^int delete_fluid_ramsfont(fluid_ramsfont_t* sfont)$/;"	f
delete_fluid_revmodel	fluid_rev.c	/^delete_fluid_revmodel(fluid_revmodel_t* rev)$/;"	f
delete_fluid_sample	fluid_defsfont.c	/^delete_fluid_sample(fluid_sample_t* sample)$/;"	f
delete_fluid_sequencer	fluid_seq.c	/^delete_fluid_sequencer(fluid_sequencer_t* seq)$/;"	f
delete_fluid_server	fluid_cmd.c	/^void delete_fluid_server(fluid_server_t* server)$/;"	f
delete_fluid_server_socket	fluid_sys.c	/^int delete_fluid_server_socket(fluid_server_socket_t* server_socket)$/;"	f
delete_fluid_settings	fluid_settings.c	/^void delete_fluid_settings(fluid_settings_t* settings)$/;"	f
delete_fluid_sfont	fluid_sfont.h	34;"	d
delete_fluid_shell	fluid_cmd.c	/^void delete_fluid_shell(fluid_shell_t* shell)$/;"	f
delete_fluid_sndmgr_audio_driver	fluid_sndmgr.c	/^int delete_fluid_sndmgr_audio_driver(fluid_audio_driver_t* p)$/;"	f
delete_fluid_str_setting	fluid_settings.c	/^static void delete_fluid_str_setting(fluid_str_setting_t* str)$/;"	f	file:
delete_fluid_synth	fluid_synth.c	/^delete_fluid_synth(fluid_synth_t* synth)$/;"	f
delete_fluid_thread	fluid_sys.c	/^int delete_fluid_thread(fluid_thread_t* thread) { return 0; }$/;"	f
delete_fluid_thread	fluid_sys.c	/^int delete_fluid_thread(fluid_thread_t* thread)$/;"	f
delete_fluid_timer	fluid_sys.c	/^delete_fluid_timer(fluid_timer_t* timer)$/;"	f
delete_fluid_track	fluid_midi.c	/^int delete_fluid_track(fluid_track_t* track)$/;"	f
delete_fluid_tuning	fluid_tuning.c	/^void delete_fluid_tuning(fluid_tuning_t* tuning)$/;"	f
delete_fluid_voice	fluid_voice.c	/^delete_fluid_voice(fluid_voice_t* voice)$/;"	f
delete_fluid_winmidi_driver	fluid_winmidi.c	/^delete_fluid_winmidi_driver(fluid_midi_driver_t* p)$/;"	f
deltatime	fluid_midi.h	/^  double deltatime;         \/* milliseconds per midi tick. depends on set-tempo *\/$/;"	m	struct:_fluid_player_t
depth_ms	fluid_chorus.c	/^  fluid_real_t depth_ms;      \/* current value *\/$/;"	m	struct:_fluid_chorus_t	file:
description	fluid_sys.h	/^  char* description;$/;"	m	struct:_fluid_profile_data_t
dest	fluid_defsfont.h	/^  unsigned short dest;			\/* destination generator *\/$/;"	m	struct:_SFMod
dest	fluid_event_priv.h	/^	short dest;$/;"	m	struct:_fluid_event_t
dest	fluid_midi_router.h	/^  fluid_midi_router_rule_t** dest;$/;"	m	struct:_fluid_midi_router_t
dest	include/fluidsynth/mod.h	/^  unsigned char dest;$/;"	m	struct:_fluid_mod_t
detached	fluid_sys.c	/^  int detached;$/;"	m	struct:_fluid_thread_t	file:
devGUID	fluid_dsound.c	/^  LPGUID devGUID;$/;"	m	struct:__anon16	file:
devname	fluid_dsound.c	/^  char* devname;$/;"	m	struct:__anon16	file:
direct_sound	fluid_dsound.c	/^  LPDIRECTSOUND direct_sound;$/;"	m	struct:__anon15	file:
dither_index	fluid_synth.h	/^  int dither_index;		\/* current index in random dither value buffer: fluid_synth_(write_s16|dither_s16) *\/$/;"	m	struct:_fluid_synth_t
division	fluid_midi.h	/^  unsigned int division;       \/* If uses_SMPTE == 0 then division is$/;"	m	struct:__anon25
division	fluid_midi.h	/^  unsigned int division;$/;"	m	struct:_fluid_player_t
doubleCallbackProc	fluid_sndmgr.c	/^  SndDoubleBackUPP doubleCallbackProc;$/;"	m	struct:__anon5	file:
doubleHeader	fluid_sndmgr.c	/^  SndDoubleBufferHeader2* doubleHeader;$/;"	m	struct:__anon5	file:
driver	fluid_alsa.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon11	file:
driver	fluid_alsa.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon12	file:
driver	fluid_alsa.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon13	file:
driver	fluid_aufile.c	/^	fluid_audio_driver_t driver;$/;"	m	struct:__anon28	file:
driver	fluid_coreaudio.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon27	file:
driver	fluid_coremidi.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon29	file:
driver	fluid_dart.c	/^    fluid_audio_driver_t driver;$/;"	m	struct:__anon10	file:
driver	fluid_dsound.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon15	file:
driver	fluid_jack.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon30	file:
driver	fluid_jack.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon31	file:
driver	fluid_midishare.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon22	file:
driver	fluid_oss.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon23	file:
driver	fluid_oss.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon24	file:
driver	fluid_portaudio.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon2	file:
driver	fluid_pulse.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon14	file:
driver	fluid_sndmgr.c	/^  fluid_audio_driver_t driver;$/;"	m	struct:__anon5	file:
driver	fluid_winmidi.c	/^  fluid_midi_driver_t driver;$/;"	m	struct:__anon1	file:
dsp_buf	fluid_voice.h	/^	fluid_real_t *dsp_buf;		\/* buffer to store interpolated sample data to *\/$/;"	m	struct:_fluid_voice_t
dspfd	fluid_oss.c	/^  int dspfd;$/;"	m	struct:__anon23	file:
dtime	fluid_midi.h	/^  int dtime;$/;"	m	struct:__anon25
dtime	fluid_midi.h	/^  unsigned int dtime;       \/* Delay (ticks) between this and previous event. midi tracks. *\/$/;"	m	struct:_fluid_midi_event_t
dump	fluid_synth.h	/^  char dump;                         \/** Dump events to stdout to hook up a user interface? *\/$/;"	m	struct:_fluid_synth_t
duration	fluid_event_priv.h	/^	unsigned int duration;$/;"	m	struct:_fluid_event_t
effects_channels	fluid_synth.h	/^  int effects_channels;              \/** the number of effects channels (= 2) *\/$/;"	m	struct:_fluid_synth_t
end	fluid_defsfont.h	/^  unsigned int end;			\/* Offset from start to end of sample,$/;"	m	struct:_SFSample
end	fluid_defsfont.h	/^  unsigned int end;			\/* Offset to end of sample *\/$/;"	m	struct:_SFShdr
end	fluid_voice.h	/^	int end;$/;"	m	struct:_fluid_voice_t
end	include/fluidsynth/sfont.h	/^  unsigned int end;	\/* Note: Index of last valid sample point (contrary to SF spec) *\/$/;"	m	struct:_fluid_sample_t
endpoint	fluid_coremidi.c	/^  MIDIEndpointRef endpoint;$/;"	m	struct:__anon29	file:
entryType	fluid_event_priv.h	/^	short entryType;$/;"	m	struct:_fluid_evt_entry
eot	fluid_midi.h	/^  int eot;$/;"	m	struct:__anon25
event	fluid_midi.h	/^  fluid_midi_event_t event;        \/* The event, that is returned to the MIDI driver. *\/$/;"	m	struct:_fluid_midi_parser_t
event_handler	fluid_midi_router.h	/^  handle_midi_event_func_t event_handler;    \/* Callback function for generated events *\/$/;"	m	struct:_fluid_midi_router_t
event_handler_data	fluid_midi_router.h	/^  void* event_handler_data;                  \/* One arg for the callback *\/$/;"	m	struct:_fluid_midi_router_t
evt	fluid_event_priv.h	/^	fluid_event_t evt;$/;"	m	struct:_fluid_evt_entry
fd	fluid_oss.c	/^  int fd;$/;"	m	struct:__anon24	file:
feedback	fluid_rev.c	/^  fluid_real_t feedback;$/;"	m	struct:_fluid_allpass	file:
feedback	fluid_rev.c	/^  fluid_real_t feedback;$/;"	m	struct:_fluid_comb	file:
file	fluid_aufile.c	/^	FILE* file;$/;"	m	struct:__anon28	file:
filename	fluid_defsfont.h	/^  char* filename;           \/* the filename of this soundfont *\/$/;"	m	struct:_fluid_defsfont_t
filter	fluid_midishare.c	/^  MidiFilterPtr filter;$/;"	m	struct:__anon22	file:
filter_coeff_incr_count	fluid_voice.h	/^	int filter_coeff_incr_count;$/;"	m	struct:_fluid_voice_t
filter_gain	fluid_voice.h	/^	fluid_real_t filter_gain;       \/* Gain correction factor, depends on q *\/$/;"	m	struct:_fluid_voice_t
filter_startup	fluid_voice.h	/^	int filter_startup;             \/* Flag: If set, the filter will be set directly.$/;"	m	struct:_fluid_voice_t
filterstore	fluid_rev.c	/^  fluid_real_t filterstore;$/;"	m	struct:_fluid_comb	file:
first	fluid_cmd.c	/^  int first;$/;"	m	struct:_fluid_handle_option_data_t	file:
first	fluid_midi.h	/^  fluid_midi_event_t *first;$/;"	m	struct:_fluid_track_t
fixedgain	fluid_rev.c	228;"	d	file:
fixup_igen	fluid_defsfont.c	/^fixup_igen (SFData * sf)$/;"	f	file:
fixup_pgen	fluid_defsfont.c	/^fixup_pgen (SFData * sf)$/;"	f	file:
fixup_sample	fluid_defsfont.c	/^fixup_sample (SFData * sf)$/;"	f	file:
flags	fluid_ladspa.h	/^  int flags;$/;"	m	struct:__anon35
flags	include/fluidsynth/gen.h	/^  unsigned char flags; \/**< Is the generator set or not (#fluid_gen_flags) *\/$/;"	m	struct:_fluid_gen_t
flags1	include/fluidsynth/mod.h	/^  unsigned char flags1;$/;"	m	struct:_fluid_mod_t
flags2	include/fluidsynth/mod.h	/^  unsigned char flags2;$/;"	m	struct:_fluid_mod_t
fluid_LADSPA_Active	fluid_ladspa.h	/^  fluid_LADSPA_Active,$/;"	e	enum:__anon33
fluid_LADSPA_BypassRequest	fluid_ladspa.h	/^  fluid_LADSPA_BypassRequest$/;"	e	enum:__anon33
fluid_LADSPA_BypassState	fluid_ladspa.h	/^} fluid_LADSPA_BypassState;$/;"	t	typeref:enum:__anon33
fluid_LADSPA_Bypassed	fluid_ladspa.h	/^  fluid_LADSPA_Bypassed,$/;"	e	enum:__anon33
fluid_LADSPA_Check_SubString_Match	fluid_ladspa.c	/^fluid_LADSPA_Stringmatch_t fluid_LADSPA_Check_SubString_Match(const char * Plugin_Port, const char * PortName){$/;"	f
fluid_LADSPA_CreateNode	fluid_ladspa.c	/^fluid_LADSPA_CreateNode(fluid_LADSPA_FxUnit_t* FxUnit, char * Name, int flags){$/;"	f
fluid_LADSPA_CreateSystemNodes	fluid_ladspa.c	/^void fluid_LADSPA_CreateSystemNodes(fluid_LADSPA_FxUnit_t* FxUnit){$/;"	f
fluid_LADSPA_CreateUserControlNodes	fluid_ladspa.c	/^void fluid_LADSPA_CreateUserControlNodes(fluid_LADSPA_FxUnit_t* FxUnit){$/;"	f
fluid_LADSPA_FullMatch	fluid_ladspa.h	/^  fluid_LADSPA_FullMatch$/;"	e	enum:__anon32
fluid_LADSPA_FxUnit_t	fluid_ladspa.h	/^} fluid_LADSPA_FxUnit_t;$/;"	t	typeref:struct:__anon36
fluid_LADSPA_LoadSharedLibrary	fluid_ladspa.c	/^void * fluid_LADSPA_LoadSharedLibrary(fluid_LADSPA_FxUnit_t* FxUnit, char * LibraryFilename){$/;"	f
fluid_LADSPA_NoMatch	fluid_ladspa.h	/^  fluid_LADSPA_NoMatch,$/;"	e	enum:__anon32
fluid_LADSPA_Node_t	fluid_ladspa.h	/^} fluid_LADSPA_Node_t;$/;"	t	typeref:struct:__anon35
fluid_LADSPA_PartialMatch	fluid_ladspa.h	/^  fluid_LADSPA_PartialMatch,$/;"	e	enum:__anon32
fluid_LADSPA_RetrieveNode	fluid_ladspa.c	/^fluid_LADSPA_RetrieveNode(fluid_LADSPA_FxUnit_t* FxUnit, char * Name){$/;"	f
fluid_LADSPA_RetrieveSharedLibrary	fluid_ladspa.c	/^void * fluid_LADSPA_RetrieveSharedLibrary(fluid_LADSPA_FxUnit_t* FxUnit, char * LibraryFilename){$/;"	f
fluid_LADSPA_Retrieve_Plugin_Descriptor	fluid_ladspa.c	/^const LADSPA_Descriptor * fluid_LADSPA_Retrieve_Plugin_Descriptor(void * CurrentLib, char * PluginLabel){$/;"	f
fluid_LADSPA_Stringmatch_t	fluid_ladspa.h	/^} fluid_LADSPA_Stringmatch_t;$/;"	t	typeref:enum:__anon32
fluid_LADSPA_clear	fluid_ladspa.c	/^void fluid_LADSPA_clear(fluid_LADSPA_FxUnit_t* FxUnit){$/;"	f
fluid_LADSPA_handle_add	fluid_ladspa.c	/^int fluid_LADSPA_handle_add(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out){$/;"	f
fluid_LADSPA_handle_clear	fluid_ladspa.c	/^int fluid_LADSPA_handle_clear(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out){$/;"	f
fluid_LADSPA_handle_declnode	fluid_ladspa.c	/^int fluid_LADSPA_handle_declnode(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out){$/;"	f
fluid_LADSPA_handle_setnode	fluid_ladspa.c	/^int fluid_LADSPA_handle_setnode(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out){$/;"	f
fluid_LADSPA_handle_start	fluid_ladspa.c	/^fluid_LADSPA_handle_start(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out){$/;"	f
fluid_LADSPA_node_is_audio	fluid_ladspa.h	/^  fluid_LADSPA_node_is_audio=4,$/;"	e	enum:__anon34
fluid_LADSPA_node_is_control	fluid_ladspa.h	/^  fluid_LADSPA_node_is_control=8,$/;"	e	enum:__anon34
fluid_LADSPA_node_is_dummy	fluid_ladspa.h	/^  fluid_LADSPA_node_is_dummy=16,$/;"	e	enum:__anon34
fluid_LADSPA_node_is_sink	fluid_ladspa.h	/^  fluid_LADSPA_node_is_sink=2,$/;"	e	enum:__anon34
fluid_LADSPA_node_is_source	fluid_ladspa.h	/^  fluid_LADSPA_node_is_source=1,$/;"	e	enum:__anon34
fluid_LADSPA_node_is_user_ctrl	fluid_ladspa.h	/^  fluid_LADSPA_node_is_user_ctrl=32$/;"	e	enum:__anon34
fluid_LADSPA_nodeflags	fluid_ladspa.h	/^} fluid_LADSPA_nodeflags;$/;"	t	typeref:enum:__anon34
fluid_LADSPA_run	fluid_ladspa.c	/^fluid_LADSPA_run(fluid_LADSPA_FxUnit_t* FxUnit, fluid_real_t* left_buf[], fluid_real_t* right_buf[], fluid_real_t* fx_left_buf[], fluid_real_t* fx_right_buf[]){$/;"	f
fluid_LADSPA_shutdown	fluid_ladspa.c	/^void fluid_LADSPA_shutdown(fluid_LADSPA_FxUnit_t* FxUnit){$/;"	f
fluid_act2hz	fluid_conv.c	/^fluid_act2hz(fluid_real_t c)$/;"	f
fluid_adriver_definition_t	fluidsynth_priv.h	/^typedef struct _fluid_adriver_definition_t fluid_adriver_definition_t;$/;"	t	typeref:struct:_fluid_adriver_definition_t
fluid_allpass	fluid_rev.c	/^typedef struct _fluid_allpass fluid_allpass;$/;"	t	typeref:struct:_fluid_allpass	file:
fluid_allpass_getfeedback	fluid_rev.c	/^fluid_allpass_getfeedback(fluid_allpass* allpass)$/;"	f
fluid_allpass_init	fluid_rev.c	/^fluid_allpass_init(fluid_allpass* allpass)$/;"	f
fluid_allpass_process	fluid_rev.c	110;"	d	file:
fluid_allpass_setbuffer	fluid_rev.c	/^fluid_allpass_setbuffer(fluid_allpass* allpass, fluid_real_t *buf, int size)$/;"	f
fluid_allpass_setfeedback	fluid_rev.c	/^fluid_allpass_setfeedback(fluid_allpass* allpass, fluid_real_t val)$/;"	f
fluid_alsa_audio_driver_settings	fluid_alsa.c	/^void fluid_alsa_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_alsa_audio_driver_t	fluid_alsa.c	/^} fluid_alsa_audio_driver_t;$/;"	t	typeref:struct:__anon11	file:
fluid_alsa_audio_run_float	fluid_alsa.c	/^static void* fluid_alsa_audio_run_float(void* d)$/;"	f	file:
fluid_alsa_audio_run_s16	fluid_alsa.c	/^static void* fluid_alsa_audio_run_s16(void* d)$/;"	f	file:
fluid_alsa_formats	fluid_alsa.c	/^struct fluid_alsa_formats_t fluid_alsa_formats[] = {$/;"	v	typeref:struct:fluid_alsa_formats_t
fluid_alsa_formats_t	fluid_alsa.c	/^struct fluid_alsa_formats_t {$/;"	s	file:
fluid_alsa_handle_write_error	fluid_alsa.c	/^static int fluid_alsa_handle_write_error (snd_pcm_t *pcm, int errval)$/;"	f	file:
fluid_alsa_midi_run	fluid_alsa.c	/^fluid_alsa_midi_run(void* d)$/;"	f
fluid_alsa_rawmidi_driver_settings	fluid_alsa.c	/^void fluid_alsa_rawmidi_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_alsa_rawmidi_driver_t	fluid_alsa.c	/^} fluid_alsa_rawmidi_driver_t;$/;"	t	typeref:struct:__anon12	file:
fluid_alsa_seq_driver_settings	fluid_alsa.c	/^void fluid_alsa_seq_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_alsa_seq_driver_t	fluid_alsa.c	/^} fluid_alsa_seq_driver_t;$/;"	t	typeref:struct:__anon13	file:
fluid_alsa_seq_full_id	fluid_alsa.c	/^static char* fluid_alsa_seq_full_id(char* id, char* buf, int len)$/;"	f	file:
fluid_alsa_seq_full_name	fluid_alsa.c	/^static char* fluid_alsa_seq_full_name(char* id, int port, char* buf, int len)$/;"	f	file:
fluid_alsa_seq_run	fluid_alsa.c	/^fluid_alsa_seq_run(void* d)$/;"	f
fluid_atten2amp	fluid_conv.c	/^fluid_atten2amp(fluid_real_t atten)$/;"	f
fluid_atten2amp_tab	fluid_conv.c	/^fluid_real_t fluid_atten2amp_tab[FLUID_ATTEN_AMP_SIZE];$/;"	v
fluid_audio_callback_t	include/fluidsynth/synth.h	/^typedef int (*fluid_audio_callback_t)(fluid_synth_t* synth, int len, $/;"	t
fluid_audio_driver_settings	fluid_adriver.c	/^void fluid_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_audio_driver_t	include/fluidsynth/types.h	/^typedef struct _fluid_audio_driver_t fluid_audio_driver_t;$/;"	t	typeref:struct:_fluid_audio_driver_t
fluid_audio_drivers	fluid_adriver.c	/^fluid_audriver_definition_t fluid_audio_drivers[] = {$/;"	v
fluid_audio_func_t	include/fluidsynth/audio.h	/^typedef int (*fluid_audio_func_t)(void* data, int len, $/;"	t
fluid_audriver_definition_t	fluid_adriver.c	/^} fluid_audriver_definition_t;$/;"	t	typeref:struct:_fluid_audriver_definition_t	file:
fluid_bank_offset_t	fluid_synth.h	/^typedef struct _fluid_bank_offset_t fluid_bank_offset_t;$/;"	t	typeref:struct:_fluid_bank_offset_t
fluid_cb2amp	fluid_conv.c	/^fluid_cb2amp(fluid_real_t cb)$/;"	f
fluid_cb2amp_tab	fluid_conv.c	/^fluid_real_t fluid_cb2amp_tab[FLUID_CB_AMP_SIZE];$/;"	v
fluid_channel_cc	fluid_chan.c	/^fluid_channel_cc(fluid_channel_t* chan, int num, int value)$/;"	f
fluid_channel_get_banknum	fluid_chan.c	/^fluid_channel_get_banknum(fluid_channel_t* chan)$/;"	f
fluid_channel_get_cc	fluid_chan.c	/^fluid_channel_get_cc(fluid_channel_t* chan, int num)$/;"	f
fluid_channel_get_gen	fluid_chan.h	104;"	d
fluid_channel_get_gen_abs	fluid_chan.h	105;"	d
fluid_channel_get_interp_method	fluid_chan.c	/^int fluid_channel_get_interp_method(fluid_channel_t* chan)$/;"	f
fluid_channel_get_num	fluid_chan.c	/^fluid_channel_get_num(fluid_channel_t* chan)$/;"	f
fluid_channel_get_preset	fluid_chan.c	/^fluid_channel_get_preset(fluid_channel_t* chan)$/;"	f
fluid_channel_get_prognum	fluid_chan.c	/^fluid_channel_get_prognum(fluid_channel_t* chan)$/;"	f
fluid_channel_get_sfontnum	fluid_chan.c	/^unsigned int fluid_channel_get_sfontnum(fluid_channel_t* chan)$/;"	f
fluid_channel_get_tuning	fluid_chan.h	101;"	d
fluid_channel_has_tuning	fluid_chan.h	100;"	d
fluid_channel_init	fluid_chan.c	/^fluid_channel_init(fluid_synth_t* synth, fluid_channel_t* chan)$/;"	f
fluid_channel_init_ctrl	fluid_chan.c	/^fluid_channel_init_ctrl(fluid_channel_t* chan)$/;"	f
fluid_channel_pitch_bend	fluid_chan.c	/^fluid_channel_pitch_bend(fluid_channel_t* chan, int val)$/;"	f
fluid_channel_pitch_wheel_sens	fluid_chan.c	/^fluid_channel_pitch_wheel_sens(fluid_channel_t* chan, int val)$/;"	f
fluid_channel_pressure	fluid_chan.c	/^fluid_channel_pressure(fluid_channel_t* chan, int val)$/;"	f
fluid_channel_reset	fluid_chan.c	/^fluid_channel_reset(fluid_synth_t* synth, fluid_channel_t* chan)$/;"	f
fluid_channel_set_banknum	fluid_chan.c	/^fluid_channel_set_banknum(fluid_channel_t* chan, unsigned int banknum)$/;"	f
fluid_channel_set_gen	fluid_chan.h	103;"	d
fluid_channel_set_interp_method	fluid_chan.c	/^void fluid_channel_set_interp_method(fluid_channel_t* chan, int new_method)$/;"	f
fluid_channel_set_preset	fluid_chan.c	/^fluid_channel_set_preset(fluid_channel_t* chan, fluid_preset_t* preset)$/;"	f
fluid_channel_set_prognum	fluid_chan.c	/^fluid_channel_set_prognum(fluid_channel_t* chan, int prognum)$/;"	f
fluid_channel_set_sfontnum	fluid_chan.c	/^int fluid_channel_set_sfontnum(fluid_channel_t* chan, unsigned int sfontnum)$/;"	f
fluid_channel_set_tuning	fluid_chan.h	99;"	d
fluid_channel_sustained	fluid_chan.h	102;"	d
fluid_channel_t	fluidsynth_priv.h	/^typedef struct _fluid_channel_t fluid_channel_t;$/;"	t	typeref:struct:_fluid_channel_t
fluid_check_fpe	fluid_sys.h	304;"	d
fluid_check_fpe	fluid_sys.h	307;"	d
fluid_check_fpe_i386	fluid_sys.c	/^unsigned int fluid_check_fpe_i386(char* explanation)$/;"	f
fluid_chorus_get_depth_ms	fluid_chorus.c	/^fluid_real_t fluid_chorus_get_depth_ms(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_get_level	fluid_chorus.c	/^fluid_real_t fluid_chorus_get_level(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_get_nr	fluid_chorus.c	/^int fluid_chorus_get_nr(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_get_speed_Hz	fluid_chorus.c	/^fluid_real_t fluid_chorus_get_speed_Hz(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_get_type	fluid_chorus.c	/^int fluid_chorus_get_type(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_init	fluid_chorus.c	/^fluid_chorus_init(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_mod	include/fluidsynth/synth.h	/^enum fluid_chorus_mod {$/;"	g
fluid_chorus_processmix	fluid_chorus.c	/^void fluid_chorus_processmix(fluid_chorus_t* chorus, fluid_real_t *in,$/;"	f
fluid_chorus_processreplace	fluid_chorus.c	/^void fluid_chorus_processreplace(fluid_chorus_t* chorus, fluid_real_t *in,$/;"	f
fluid_chorus_reset	fluid_chorus.c	/^fluid_chorus_reset(fluid_chorus_t* chorus)$/;"	f
fluid_chorus_set_depth_ms	fluid_chorus.c	/^void fluid_chorus_set_depth_ms(fluid_chorus_t* chorus, fluid_real_t depth_ms)$/;"	f
fluid_chorus_set_level	fluid_chorus.c	/^void fluid_chorus_set_level(fluid_chorus_t* chorus, fluid_real_t level)$/;"	f
fluid_chorus_set_nr	fluid_chorus.c	/^void fluid_chorus_set_nr(fluid_chorus_t* chorus, int nr)$/;"	f
fluid_chorus_set_speed_Hz	fluid_chorus.c	/^void fluid_chorus_set_speed_Hz(fluid_chorus_t* chorus, fluid_real_t speed_Hz)$/;"	f
fluid_chorus_set_type	fluid_chorus.c	/^void fluid_chorus_set_type(fluid_chorus_t* chorus, int type)$/;"	f
fluid_chorus_sine	fluid_chorus.c	/^void fluid_chorus_sine(int *buf, int len, int depth)$/;"	f
fluid_chorus_t	fluid_chorus.h	/^typedef struct _fluid_chorus_t fluid_chorus_t;$/;"	t	typeref:struct:_fluid_chorus_t
fluid_chorus_triangle	fluid_chorus.c	/^void fluid_chorus_triangle(int *buf, int len, int depth)$/;"	f
fluid_chorus_update	fluid_chorus.c	/^fluid_chorus_update(fluid_chorus_t* chorus)$/;"	f
fluid_clear_fpe	fluid_sys.h	305;"	d
fluid_clear_fpe	fluid_sys.h	308;"	d
fluid_clear_fpe_i386	fluid_sys.c	/^void fluid_clear_fpe_i386 (void)$/;"	f
fluid_client_quit	fluid_cmd.c	/^void fluid_client_quit(fluid_client_t* client)$/;"	f
fluid_client_run	fluid_cmd.c	/^static void fluid_client_run(fluid_client_t* client)$/;"	f	file:
fluid_client_t	fluidsynth_priv.h	/^typedef struct _fluid_client_t fluid_client_t;$/;"	t	typeref:struct:_fluid_client_t
fluid_clip	fluidsynth_priv.h	278;"	d
fluid_cmd_copy	fluid_cmd.c	/^fluid_cmd_t* fluid_cmd_copy(fluid_cmd_t* cmd)$/;"	f
fluid_cmd_func_t	include/fluidsynth/shell.h	/^typedef int (*fluid_cmd_func_t)(void* data, int ac, char** av, fluid_ostream_t out);  $/;"	t
fluid_cmd_handler_delete	fluid_cmd.c	/^void fluid_cmd_handler_delete(void* value, int type)$/;"	f
fluid_cmd_handler_handle	fluid_cmd.c	/^int fluid_cmd_handler_handle(fluid_cmd_handler_t* handler, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_cmd_handler_register	fluid_cmd.c	/^int fluid_cmd_handler_register(fluid_cmd_handler_t* handler, fluid_cmd_t* cmd)$/;"	f
fluid_cmd_handler_t	include/fluidsynth/types.h	/^typedef struct _fluid_hashtable_t fluid_cmd_handler_t;$/;"	t	typeref:struct:_fluid_hashtable_t
fluid_cmd_handler_unregister	fluid_cmd.c	/^int fluid_cmd_handler_unregister(fluid_cmd_handler_t* handler, char* cmd)$/;"	f
fluid_cmd_t	include/fluidsynth/shell.h	/^} fluid_cmd_t;$/;"	t	typeref:struct:__anon3
fluid_comb	fluid_rev.c	/^typedef struct _fluid_comb fluid_comb;$/;"	t	typeref:struct:_fluid_comb	file:
fluid_comb_getdamp	fluid_rev.c	/^fluid_comb_getdamp(fluid_comb* comb)$/;"	f
fluid_comb_getfeedback	fluid_rev.c	/^fluid_comb_getfeedback(fluid_comb* comb)$/;"	f
fluid_comb_init	fluid_rev.c	/^fluid_comb_init(fluid_comb* comb)$/;"	f
fluid_comb_process	fluid_rev.c	199;"	d	file:
fluid_comb_setbuffer	fluid_rev.c	/^fluid_comb_setbuffer(fluid_comb* comb, fluid_real_t *buf, int size)$/;"	f
fluid_comb_setdamp	fluid_rev.c	/^fluid_comb_setdamp(fluid_comb* comb, fluid_real_t val)$/;"	f
fluid_comb_setfeedback	fluid_rev.c	/^fluid_comb_setfeedback(fluid_comb* comb, fluid_real_t val)$/;"	f
fluid_command	fluid_cmd.c	/^fluid_command(fluid_cmd_handler_t* handler, char* cmd, fluid_ostream_t out)$/;"	f
fluid_commands	fluid_cmd.c	/^fluid_cmd_t fluid_commands[] = {$/;"	v
fluid_compare_func_t	fluid_list.h	/^typedef int (*fluid_compare_func_t)(void* a, void* b);$/;"	t
fluid_concave	fluid_conv.c	/^fluid_concave(fluid_real_t val)$/;"	f
fluid_concave_tab	fluid_conv.c	/^fluid_real_t fluid_concave_tab[128];$/;"	v
fluid_conversion_config	fluid_conv.c	/^fluid_conversion_config(void)$/;"	f
fluid_convex	fluid_conv.c	/^fluid_convex(fluid_real_t val)$/;"	f
fluid_convex_tab	fluid_conv.c	/^fluid_real_t fluid_convex_tab[128];$/;"	v
fluid_core_audio_callback	fluid_coreaudio.c	/^fluid_core_audio_callback(AudioDeviceID id,$/;"	f
fluid_core_audio_driver_settings	fluid_coreaudio.c	/^fluid_core_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_core_audio_driver_t	fluid_coreaudio.c	/^} fluid_core_audio_driver_t;$/;"	t	typeref:struct:__anon27	file:
fluid_coremidi_callback	fluid_coremidi.c	/^fluid_coremidi_callback(const MIDIPacketList *list, void *p, void *src)$/;"	f
fluid_coremidi_driver_settings	fluid_coremidi.c	/^void fluid_coremidi_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_coremidi_driver_t	fluid_coremidi.c	/^} fluid_coremidi_driver_t;$/;"	t	typeref:struct:__anon29	file:
fluid_cpu_frequency	fluid_sys.c	/^static double fluid_cpu_frequency = -1.0;$/;"	v	file:
fluid_ct2hz	fluid_conv.c	/^fluid_ct2hz(fluid_real_t cents)$/;"	f
fluid_ct2hz_real	fluid_conv.c	/^fluid_ct2hz_real(fluid_real_t cents)$/;"	f
fluid_ct2hz_tab	fluid_conv.c	/^fluid_real_t fluid_ct2hz_tab[FLUID_CENTS_HZ_SIZE];$/;"	v
fluid_curtime	fluid_sys.c	/^unsigned int fluid_curtime()$/;"	f
fluid_curtime	fluid_sys.c	/^unsigned int fluid_curtime(void)$/;"	f
fluid_curtime	fluid_sys.h	82;"	d
fluid_dart_audio_driver_settings	fluid_dart.c	/^void fluid_dart_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_dart_audio_driver_t	fluid_dart.c	/^} fluid_dart_audio_driver_t;$/;"	t	typeref:struct:__anon10	file:
fluid_dart_audio_run	fluid_dart.c	/^static LONG APIENTRY fluid_dart_audio_run( ULONG ulStatus, PMCI_MIX_BUFFER pBuffer, ULONG ulFlags )$/;"	f	file:
fluid_debug	fluid_sys.c	/^int fluid_debug(int level, char * fmt, ...)$/;"	f
fluid_debug	fluid_sys.h	71;"	d
fluid_debug_flags	fluid_sys.c	/^unsigned int fluid_debug_flags = 0;$/;"	v
fluid_debug_level	fluid_sys.h	/^enum fluid_debug_level {$/;"	g
fluid_default_log_function	fluid_sys.c	/^fluid_default_log_function(int level, char* message, void* data)$/;"	f
fluid_defpreset_add_zone	fluid_defsfont.c	/^fluid_defpreset_add_zone(fluid_defpreset_t* preset, fluid_preset_zone_t* zone)$/;"	f
fluid_defpreset_get_banknum	fluid_defsfont.c	/^fluid_defpreset_get_banknum(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_get_global_zone	fluid_defsfont.c	/^fluid_defpreset_get_global_zone(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_get_name	fluid_defsfont.c	/^fluid_defpreset_get_name(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_get_num	fluid_defsfont.c	/^fluid_defpreset_get_num(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_get_zone	fluid_defsfont.c	/^fluid_defpreset_get_zone(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_import_sfont	fluid_defsfont.c	/^fluid_defpreset_import_sfont(fluid_defpreset_t* preset,$/;"	f
fluid_defpreset_next	fluid_defsfont.c	/^fluid_defpreset_next(fluid_defpreset_t* preset)$/;"	f
fluid_defpreset_noteon	fluid_defsfont.c	/^fluid_defpreset_noteon(fluid_defpreset_t* preset, fluid_synth_t* synth, int chan, int key, int vel)$/;"	f
fluid_defpreset_preset_delete	fluid_defsfont.c	/^int fluid_defpreset_preset_delete(fluid_preset_t* preset)$/;"	f
fluid_defpreset_preset_get_banknum	fluid_defsfont.c	/^int fluid_defpreset_preset_get_banknum(fluid_preset_t* preset)$/;"	f
fluid_defpreset_preset_get_name	fluid_defsfont.c	/^char* fluid_defpreset_preset_get_name(fluid_preset_t* preset)$/;"	f
fluid_defpreset_preset_get_num	fluid_defsfont.c	/^int fluid_defpreset_preset_get_num(fluid_preset_t* preset)$/;"	f
fluid_defpreset_preset_noteon	fluid_defsfont.c	/^int fluid_defpreset_preset_noteon(fluid_preset_t* preset, fluid_synth_t* synth,$/;"	f
fluid_defpreset_set_global_zone	fluid_defsfont.c	/^fluid_defpreset_set_global_zone(fluid_defpreset_t* preset, fluid_preset_zone_t* zone)$/;"	f
fluid_defpreset_t	fluid_defsfont.h	/^typedef struct _fluid_defpreset_t fluid_defpreset_t;$/;"	t	typeref:struct:_fluid_defpreset_t
fluid_defsfloader_load	fluid_defsfont.c	/^fluid_sfont_t* fluid_defsfloader_load(fluid_sfloader_t* loader, const char* filename)$/;"	f
fluid_defsfont_add_preset	fluid_defsfont.c	/^int fluid_defsfont_add_preset(fluid_defsfont_t* sfont, fluid_defpreset_t* preset)$/;"	f
fluid_defsfont_add_sample	fluid_defsfont.c	/^int fluid_defsfont_add_sample(fluid_defsfont_t* sfont, fluid_sample_t* sample)$/;"	f
fluid_defsfont_get_name	fluid_defsfont.c	/^char* fluid_defsfont_get_name(fluid_defsfont_t* sfont)$/;"	f
fluid_defsfont_get_preset	fluid_defsfont.c	/^fluid_defpreset_t* fluid_defsfont_get_preset(fluid_defsfont_t* sfont, unsigned int bank, unsigned int num)$/;"	f
fluid_defsfont_get_sample	fluid_defsfont.c	/^fluid_sample_t* fluid_defsfont_get_sample(fluid_defsfont_t* sfont, char *s)$/;"	f
fluid_defsfont_iteration_next	fluid_defsfont.c	/^int fluid_defsfont_iteration_next(fluid_defsfont_t* sfont, fluid_preset_t* preset)$/;"	f
fluid_defsfont_iteration_start	fluid_defsfont.c	/^void fluid_defsfont_iteration_start(fluid_defsfont_t* sfont)$/;"	f
fluid_defsfont_load	fluid_defsfont.c	/^int fluid_defsfont_load(fluid_defsfont_t* sfont, const char* file)$/;"	f
fluid_defsfont_load_sampledata	fluid_defsfont.c	/^fluid_defsfont_load_sampledata(fluid_defsfont_t* sfont)$/;"	f
fluid_defsfont_sfont_delete	fluid_defsfont.c	/^int fluid_defsfont_sfont_delete(fluid_sfont_t* sfont)$/;"	f
fluid_defsfont_sfont_get_name	fluid_defsfont.c	/^char* fluid_defsfont_sfont_get_name(fluid_sfont_t* sfont)$/;"	f
fluid_defsfont_sfont_get_preset	fluid_defsfont.c	/^fluid_defsfont_sfont_get_preset(fluid_sfont_t* sfont, unsigned int bank, unsigned int prenum)$/;"	f
fluid_defsfont_sfont_iteration_next	fluid_defsfont.c	/^int fluid_defsfont_sfont_iteration_next(fluid_sfont_t* sfont, fluid_preset_t* preset)$/;"	f
fluid_defsfont_sfont_iteration_start	fluid_defsfont.c	/^void fluid_defsfont_sfont_iteration_start(fluid_sfont_t* sfont)$/;"	f
fluid_defsfont_t	fluid_defsfont.h	/^typedef struct _fluid_defsfont_t fluid_defsfont_t;$/;"	t	typeref:struct:_fluid_defsfont_t
fluid_driver_status	fluid_midi.h	/^enum fluid_driver_status$/;"	g
fluid_dsound_audio_driver_settings	fluid_dsound.c	/^void fluid_dsound_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_dsound_audio_driver_t	fluid_dsound.c	/^} fluid_dsound_audio_driver_t;$/;"	t	typeref:struct:__anon15	file:
fluid_dsound_audio_run	fluid_dsound.c	/^DWORD WINAPI fluid_dsound_audio_run(LPVOID lpParameter)$/;"	f
fluid_dsound_devsel_t	fluid_dsound.c	/^} fluid_dsound_devsel_t;$/;"	t	typeref:struct:__anon16	file:
fluid_dsound_enum_callback	fluid_dsound.c	/^fluid_dsound_enum_callback(LPGUID guid, LPCTSTR description, LPCTSTR module, LPVOID context)$/;"	f
fluid_dsound_enum_callback2	fluid_dsound.c	/^fluid_dsound_enum_callback2(LPGUID guid, LPCTSTR description, LPCTSTR module, LPVOID context)$/;"	f
fluid_dsp_float_config	fluid_dsp_float.c	/^void fluid_dsp_float_config (void)$/;"	f
fluid_dsp_float_interpolate_4th_order	fluid_dsp_float.c	/^fluid_dsp_float_interpolate_4th_order (fluid_voice_t *voice)$/;"	f
fluid_dsp_float_interpolate_7th_order	fluid_dsp_float.c	/^fluid_dsp_float_interpolate_7th_order (fluid_voice_t *voice)$/;"	f
fluid_dsp_float_interpolate_linear	fluid_dsp_float.c	/^fluid_dsp_float_interpolate_linear (fluid_voice_t *voice)$/;"	f
fluid_dsp_float_interpolate_none	fluid_dsp_float.c	/^fluid_dsp_float_interpolate_none (fluid_voice_t *voice)$/;"	f
fluid_dump_modulator	fluid_mod.c	/^void fluid_dump_modulator(fluid_mod_t * mod){$/;"	f
fluid_env_data_t	fluidsynth_priv.h	/^typedef struct _fluid_env_data_t fluid_env_data_t;$/;"	t	typeref:struct:_fluid_env_data_t
fluid_errbuf	fluid_sys.c	/^static char fluid_errbuf[512];  \/* buffer for error message *\/$/;"	v	file:
fluid_error	fluid_sys.c	/^fluid_error()$/;"	f
fluid_estimate_cpu_frequency	fluid_sys.c	/^double fluid_estimate_cpu_frequency(void)$/;"	f
fluid_event_all_notes_off	fluid_event.c	/^fluid_event_all_notes_off(fluid_event_t* evt, int channel)$/;"	f
fluid_event_all_sounds_off	fluid_event.c	/^fluid_event_all_sounds_off(fluid_event_t* evt, int channel)$/;"	f
fluid_event_any_control_change	fluid_event.c	/^fluid_event_any_control_change(fluid_event_t* evt, int channel)$/;"	f
fluid_event_bank_select	fluid_event.c	/^fluid_event_bank_select(fluid_event_t* evt, int channel, short bank_num)$/;"	f
fluid_event_callback_t	include/fluidsynth/seq.h	/^typedef void (*fluid_event_callback_t)(unsigned int time, fluid_event_t* event, $/;"	t
fluid_event_chorus_send	fluid_event.c	/^fluid_event_chorus_send(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_control_change	fluid_event.c	/^fluid_event_control_change(fluid_event_t* evt, int channel, short control, short val)$/;"	f
fluid_event_get_bank	fluid_event.c	/^short fluid_event_get_bank(fluid_event_t* evt)$/;"	f
fluid_event_get_channel	fluid_event.c	/^int fluid_event_get_channel(fluid_event_t* evt)$/;"	f
fluid_event_get_control	fluid_event.c	/^short fluid_event_get_control(fluid_event_t* evt)$/;"	f
fluid_event_get_data	fluid_event.c	/^void* fluid_event_get_data(fluid_event_t* evt)$/;"	f
fluid_event_get_dest	fluid_event.c	/^short fluid_event_get_dest(fluid_event_t* evt)$/;"	f
fluid_event_get_duration	fluid_event.c	/^unsigned int fluid_event_get_duration(fluid_event_t* evt)$/;"	f
fluid_event_get_key	fluid_event.c	/^short fluid_event_get_key(fluid_event_t* evt)$/;"	f
fluid_event_get_pitch	fluid_event.c	/^int fluid_event_get_pitch(fluid_event_t* evt)$/;"	f
fluid_event_get_program	fluid_event.c	/^fluid_event_get_program(fluid_event_t* evt)$/;"	f
fluid_event_get_sfont_id	fluid_event.c	/^fluid_event_get_sfont_id(fluid_event_t* evt)$/;"	f
fluid_event_get_source	fluid_event.c	/^short fluid_event_get_source(fluid_event_t* evt)$/;"	f
fluid_event_get_time	fluid_event.c	/^unsigned int fluid_event_get_time(fluid_event_t* evt)$/;"	f
fluid_event_get_type	fluid_event.c	/^int fluid_event_get_type(fluid_event_t* evt)$/;"	f
fluid_event_get_value	fluid_event.c	/^short fluid_event_get_value(fluid_event_t* evt)$/;"	f
fluid_event_get_velocity	fluid_event.c	/^short fluid_event_get_velocity(fluid_event_t* evt)$/;"	f
fluid_event_modulation	fluid_event.c	/^fluid_event_modulation(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_note	fluid_event.c	/^fluid_event_note(fluid_event_t* evt, int channel, short key, short vel, unsigned int duration)$/;"	f
fluid_event_noteoff	fluid_event.c	/^fluid_event_noteoff(fluid_event_t* evt, int channel, short key)$/;"	f
fluid_event_noteon	fluid_event.c	/^fluid_event_noteon(fluid_event_t* evt, int channel, short key, short vel)$/;"	f
fluid_event_pan	fluid_event.c	/^fluid_event_pan(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_pitch_bend	fluid_event.c	/^fluid_event_pitch_bend(fluid_event_t* evt, int channel, int pitch)$/;"	f
fluid_event_pitch_wheelsens	fluid_event.c	/^fluid_event_pitch_wheelsens(fluid_event_t* evt, int channel, short value)$/;"	f
fluid_event_program_change	fluid_event.c	/^fluid_event_program_change(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_program_select	fluid_event.c	/^fluid_event_program_select(fluid_event_t* evt, int channel,$/;"	f
fluid_event_reverb_send	fluid_event.c	/^fluid_event_reverb_send(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_set_dest	fluid_event.c	/^fluid_event_set_dest(fluid_event_t* evt, short dest)$/;"	f
fluid_event_set_source	fluid_event.c	/^fluid_event_set_source(fluid_event_t* evt, short src)$/;"	f
fluid_event_set_time	fluid_event.c	/^fluid_event_set_time(fluid_event_t* evt, unsigned int time)$/;"	f
fluid_event_sustain	fluid_event.c	/^fluid_event_sustain(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_event_t	include/fluidsynth/types.h	/^typedef struct _fluid_event_t fluid_event_t;$/;"	t	typeref:struct:_fluid_event_t
fluid_event_timer	fluid_event.c	/^fluid_event_timer(fluid_event_t* evt, void* data)$/;"	f
fluid_event_volume	fluid_event.c	/^fluid_event_volume(fluid_event_t* evt, int channel, short val)$/;"	f
fluid_evt_entry	fluid_event_priv.h	/^typedef struct _fluid_evt_entry fluid_evt_entry;$/;"	t	typeref:struct:_fluid_evt_entry
fluid_evt_entry_type	fluid_event_priv.h	/^enum fluid_evt_entry_type {$/;"	g
fluid_evt_heap_t	fluid_event_priv.h	/^} fluid_evt_heap_t;$/;"	t	typeref:struct:_fluid_evt_heap_t
fluid_expand_path	fluid_cmd.c	/^fluid_expand_path(char* path, char* new_path, int len)$/;"	f
fluid_file	fluidsynth_priv.h	/^typedef FILE*  fluid_file;$/;"	t
fluid_file_audio_driver_settings	fluid_aufile.c	/^void fluid_file_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_file_audio_driver_t	fluid_aufile.c	/^} fluid_file_audio_driver_t;$/;"	t	typeref:struct:__anon28	file:
fluid_file_audio_run_s16	fluid_aufile.c	/^static int fluid_file_audio_run_s16(void* d, unsigned int clock_time)$/;"	f	file:
fluid_gen_flags	include/fluidsynth/gen.h	/^enum fluid_gen_flags$/;"	g
fluid_gen_info	fluid_gen.c	/^fluid_gen_info_t fluid_gen_info[] = {$/;"	v
fluid_gen_info_t	fluid_gen.h	/^} fluid_gen_info_t;$/;"	t	typeref:struct:_fluid_gen_info_t
fluid_gen_init	fluid_gen.c	/^fluid_gen_init(fluid_gen_t* gen, fluid_channel_t* channel)$/;"	f
fluid_gen_scale	fluid_gen.c	/^fluid_real_t fluid_gen_scale(int gen, float value)$/;"	f
fluid_gen_scale_nrpn	fluid_gen.c	/^fluid_real_t fluid_gen_scale_nrpn(int gen, int data)$/;"	f
fluid_gen_set_default_values	fluid_gen.c	/^fluid_gen_set_default_values(fluid_gen_t* gen)$/;"	f
fluid_gen_set_mod	fluid_gen.h	36;"	d
fluid_gen_set_nrpn	fluid_gen.h	37;"	d
fluid_gen_t	include/fluidsynth/gen.h	/^} fluid_gen_t;$/;"	t	typeref:struct:_fluid_gen_t
fluid_gen_type	include/fluidsynth/gen.h	/^enum fluid_gen_type {$/;"	g
fluid_get_hinstance	fluid_dll.c	/^void* fluid_get_hinstance(void)$/;"	f
fluid_get_stdin	fluid_io.c	/^fluid_istream_t fluid_get_stdin()$/;"	f
fluid_get_stdout	fluid_io.c	/^fluid_ostream_t fluid_get_stdout()$/;"	f
fluid_get_sysconf	fluid_cmd.c	/^fluid_get_sysconf(char* buf, int len)$/;"	f
fluid_get_userconf	fluid_cmd.c	/^fluid_get_userconf(char* buf, int len)$/;"	f
fluid_getlength	fluid_midi.c	/^long fluid_getlength(unsigned char *s)$/;"	f
fluid_handle_cc	fluid_cmd.c	/^fluid_handle_cc(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_channels	fluid_cmd.c	/^fluid_handle_channels(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_chorus	fluid_cmd.c	/^fluid_handle_chorus(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_chorusdepth	fluid_cmd.c	/^fluid_handle_chorusdepth(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_choruslevel	fluid_cmd.c	/^fluid_handle_choruslevel(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_chorusnr	fluid_cmd.c	/^fluid_handle_chorusnr(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_chorusspeed	fluid_cmd.c	/^fluid_handle_chorusspeed(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_dumptuning	fluid_cmd.c	/^fluid_handle_dumptuning(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_echo	fluid_cmd.c	/^fluid_handle_echo(fluid_cmd_handler_t* handler, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_fonts	fluid_cmd.c	/^fluid_handle_fonts(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_gain	fluid_cmd.c	/^fluid_handle_gain(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_get	fluid_cmd.c	/^fluid_handle_get(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_help	fluid_cmd.c	/^fluid_handle_help(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_info	fluid_cmd.c	/^fluid_handle_info(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_inst	fluid_cmd.c	/^fluid_handle_inst(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_interp	fluid_cmd.c	/^fluid_handle_interp(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_interpc	fluid_cmd.c	/^fluid_handle_interpc(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_load	fluid_cmd.c	/^fluid_handle_load(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_mstat	fluid_cmd.c	/^fluid_handle_mstat(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_noteoff	fluid_cmd.c	/^fluid_handle_noteoff(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_noteon	fluid_cmd.c	/^fluid_handle_noteon(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_print_option	fluid_cmd.c	/^void fluid_handle_print_option(void* data, char* name, char* option)$/;"	f
fluid_handle_prog	fluid_cmd.c	/^fluid_handle_prog(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_quit	fluid_cmd.c	/^fluid_handle_quit(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reload	fluid_cmd.c	/^fluid_handle_reload(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reset	fluid_cmd.c	/^fluid_handle_reset(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_resettuning	fluid_cmd.c	/^fluid_handle_resettuning(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverb	fluid_cmd.c	/^fluid_handle_reverb(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverbpreset	fluid_cmd.c	/^fluid_handle_reverbpreset(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverbsetdamp	fluid_cmd.c	/^fluid_handle_reverbsetdamp(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverbsetlevel	fluid_cmd.c	/^fluid_handle_reverbsetlevel(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverbsetroomsize	fluid_cmd.c	/^fluid_handle_reverbsetroomsize(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_reverbsetwidth	fluid_cmd.c	/^fluid_handle_reverbsetwidth(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_select	fluid_cmd.c	/^fluid_handle_select(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_set	fluid_cmd.c	/^fluid_handle_set(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_settings	fluid_cmd.c	/^fluid_handle_settings(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_settings_iter1	fluid_cmd.c	/^static void fluid_handle_settings_iter1(void* data, char* name, int type)$/;"	f	file:
fluid_handle_settings_iter2	fluid_cmd.c	/^static void fluid_handle_settings_iter2(void* data, char* name, int type)$/;"	f	file:
fluid_handle_settuning	fluid_cmd.c	/^fluid_handle_settuning(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_source	fluid_cmd.c	/^fluid_handle_source(fluid_cmd_handler_t* handler, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_tune	fluid_cmd.c	/^fluid_handle_tune(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_tuning	fluid_cmd.c	/^fluid_handle_tuning(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_tunings	fluid_cmd.c	/^fluid_handle_tunings(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_handle_unload	fluid_cmd.c	/^fluid_handle_unload(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_hash_delete_t	fluid_hash.h	/^typedef void (*fluid_hash_delete_t)(void* value, int type);$/;"	t
fluid_hash_iter_t	fluid_hash.h	/^typedef int (*fluid_hash_iter_t)(char* key, void* value, int type, void* data);$/;"	t
fluid_hashnode_t	fluid_hash.c	/^typedef struct _fluid_hashnode_t fluid_hashnode_t;$/;"	t	typeref:struct:_fluid_hashnode_t	file:
fluid_hashtable_foreach	fluid_hash.c	/^fluid_hashtable_foreach(fluid_hashtable_t *hash_table, fluid_hash_iter_t func, void* data)$/;"	f
fluid_hashtable_insert	fluid_hash.c	/^fluid_hashtable_insert(fluid_hashtable_t *hash_table, char* key, void* value, int type)$/;"	f
fluid_hashtable_lookup	fluid_hash.c	/^fluid_hashtable_lookup(fluid_hashtable_t *hash_table, char* key, void** value, int* type)$/;"	f
fluid_hashtable_lookup_node	fluid_hash.c	/^fluid_hashtable_lookup_node (fluid_hashtable_t* hash_table, char* key)$/;"	f	file:
fluid_hashtable_remove	fluid_hash.c	/^fluid_hashtable_remove (fluid_hashtable_t *hash_table, char* key)$/;"	f
fluid_hashtable_replace	fluid_hash.c	/^fluid_hashtable_replace(fluid_hashtable_t *hash_table, char* key, void* value, int type)$/;"	f
fluid_hashtable_resize	fluid_hash.c	/^fluid_hashtable_resize(fluid_hashtable_t *hash_table)$/;"	f	file:
fluid_hashtable_size	fluid_hash.c	/^fluid_hashtable_size(fluid_hashtable_t *hash_table)$/;"	f
fluid_hashtable_t	fluidsynth_priv.h	/^typedef struct _fluid_hashtable_t  fluid_hashtable_t;$/;"	t	typeref:struct:_fluid_hashtable_t
fluid_hinstance	fluid_dll.c	/^static HINSTANCE fluid_hinstance = NULL;$/;"	v	file:
fluid_hz2ct	fluid_conv.c	/^fluid_hz2ct(fluid_real_t f)$/;"	f
fluid_inst_add_zone	fluid_defsfont.c	/^fluid_inst_add_zone(fluid_inst_t* inst, fluid_inst_zone_t* zone)$/;"	f
fluid_inst_get_global_zone	fluid_defsfont.c	/^fluid_inst_get_global_zone(fluid_inst_t* inst)$/;"	f
fluid_inst_get_zone	fluid_defsfont.c	/^fluid_inst_get_zone(fluid_inst_t* inst)$/;"	f
fluid_inst_import_sfont	fluid_defsfont.c	/^fluid_inst_import_sfont(fluid_inst_t* inst, SFInst *sfinst, fluid_defsfont_t* sfont)$/;"	f
fluid_inst_set_global_zone	fluid_defsfont.c	/^fluid_inst_set_global_zone(fluid_inst_t* inst, fluid_inst_zone_t* zone)$/;"	f
fluid_inst_t	fluid_defsfont.h	/^typedef struct _fluid_inst_t fluid_inst_t;$/;"	t	typeref:struct:_fluid_inst_t
fluid_inst_zone_get_sample	fluid_defsfont.c	/^fluid_inst_zone_get_sample(fluid_inst_zone_t* zone)$/;"	f
fluid_inst_zone_import_sfont	fluid_defsfont.c	/^fluid_inst_zone_import_sfont(fluid_inst_zone_t* zone, SFZone *sfzone, fluid_defsfont_t* sfont)$/;"	f
fluid_inst_zone_inside_range	fluid_defsfont.c	/^fluid_inst_zone_inside_range(fluid_inst_zone_t* zone, int key, int vel)$/;"	f
fluid_inst_zone_next	fluid_defsfont.c	/^fluid_inst_zone_next(fluid_inst_zone_t* zone)$/;"	f
fluid_inst_zone_t	fluid_defsfont.h	/^typedef struct _fluid_inst_zone_t fluid_inst_zone_t;$/;"	t	typeref:struct:_fluid_inst_zone_t
fluid_int_setting_t	fluid_settings.c	/^} fluid_int_setting_t;$/;"	t	typeref:struct:__anon8	file:
fluid_int_update_t	fluid_settings.h	/^typedef int (*fluid_int_update_t)(void* data, char* name, int value);$/;"	t
fluid_interp	include/fluidsynth/synth.h	/^enum fluid_interp {$/;"	g
fluid_is_empty	fluid_cmd.c	/^fluid_is_empty(char* a)$/;"	f
fluid_is_midifile	fluid_sys.c	/^fluid_is_midifile(char* filename)$/;"	f
fluid_is_number	fluid_cmd.c	/^fluid_is_number(char* a)$/;"	f
fluid_is_soundfont	fluid_sys.c	/^fluid_is_soundfont(char* filename)$/;"	f
fluid_isascii	fluid_midi.h	194;"	d
fluid_isasciistring	fluid_midi.c	/^int fluid_isasciistring(char* s)$/;"	f
fluid_istream_gets	fluid_io.c	/^int fluid_istream_gets(fluid_istream_t in, char* buf, int len)$/;"	f
fluid_istream_readline	fluid_io.c	/^int fluid_istream_readline(fluid_istream_t in, char* prompt, char* buf, int len)$/;"	f
fluid_istream_t	include/fluidsynth/types.h	/^typedef int fluid_istream_t;$/;"	t
fluid_jack_audio_driver_bufsize	fluid_jack.c	/^fluid_jack_audio_driver_bufsize(jack_nframes_t nframes, void *arg)$/;"	f
fluid_jack_audio_driver_process	fluid_jack.c	/^fluid_jack_audio_driver_process(jack_nframes_t nframes, void *arg)$/;"	f
fluid_jack_audio_driver_settings	fluid_jack.c	/^fluid_jack_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_jack_audio_driver_shutdown	fluid_jack.c	/^fluid_jack_audio_driver_shutdown(void *arg)$/;"	f
fluid_jack_audio_driver_srate	fluid_jack.c	/^fluid_jack_audio_driver_srate(jack_nframes_t nframes, void *arg)$/;"	f
fluid_jack_audio_driver_t	fluid_jack.c	/^} fluid_jack_audio_driver_t;$/;"	t	typeref:struct:__anon30	file:
fluid_jack_midi_driver_process	fluid_jack.c	/^fluid_jack_midi_driver_process (jack_nframes_t nframes, void *arg)$/;"	f	file:
fluid_jack_midi_driver_settings	fluid_jack.c	/^void fluid_jack_midi_driver_settings (fluid_settings_t *settings)$/;"	f
fluid_jack_midi_driver_t	fluid_jack.c	/^} fluid_jack_midi_driver_t;$/;"	t	typeref:struct:__anon31	file:
fluid_lash_alsa_client_id	fluid_lash.h	35;"	d
fluid_lash_alsa_client_id	fluid_lash.h	43;"	d
fluid_lash_args_t	fluid_lash.h	34;"	d
fluid_lash_args_t	fluid_lash.h	42;"	d
fluid_lash_client	fluid_lash.c	/^cca_client_t * fluid_lash_client;$/;"	v
fluid_lash_client	fluid_lash.c	/^lash_client_t * fluid_lash_client;$/;"	v
fluid_lash_connect	fluid_lash.c	/^fluid_lash_connect (fluid_lash_args_t * args)$/;"	f
fluid_lash_create_thread	fluid_lash.c	/^fluid_lash_create_thread (fluid_synth_t * synth)$/;"	f
fluid_lash_extract_args	fluid_lash.c	/^fluid_lash_extract_args (int * pargc, char *** pargv)$/;"	f
fluid_lash_jack_client_name	fluid_lash.h	36;"	d
fluid_lash_jack_client_name	fluid_lash.h	44;"	d
fluid_lash_load	fluid_lash.c	/^fluid_lash_load (fluid_synth_t * synth, const char * filename)$/;"	f	file:
fluid_lash_run	fluid_lash.c	/^fluid_lash_run (void * data)$/;"	f	file:
fluid_lash_save	fluid_lash.c	/^fluid_lash_save (fluid_synth_t * synth)$/;"	f	file:
fluid_lash_thread	fluid_lash.c	/^static pthread_t fluid_lash_thread;$/;"	v	file:
fluid_libname	fluid_sys.c	/^static char* fluid_libname = "fluidsynth";$/;"	v	file:
fluid_list_append	fluid_list.c	/^fluid_list_append(fluid_list_t *list, void*  data)$/;"	f
fluid_list_get	fluid_list.h	58;"	d
fluid_list_insert_at	fluid_list.c	/^fluid_list_t* fluid_list_insert_at(fluid_list_t *list, int n, void* data)$/;"	f
fluid_list_last	fluid_list.c	/^fluid_list_last(fluid_list_t *list)$/;"	f
fluid_list_next	fluid_list.h	57;"	d
fluid_list_nth	fluid_list.c	/^fluid_list_nth(fluid_list_t *list, int n)$/;"	f
fluid_list_prepend	fluid_list.c	/^fluid_list_prepend(fluid_list_t *list, void* data)$/;"	f
fluid_list_remove	fluid_list.c	/^fluid_list_remove(fluid_list_t *list, void* data)$/;"	f
fluid_list_remove_link	fluid_list.c	/^fluid_list_remove_link(fluid_list_t *list, fluid_list_t *link)$/;"	f
fluid_list_size	fluid_list.c	/^fluid_list_size(fluid_list_t *list)$/;"	f
fluid_list_sort	fluid_list.c	/^fluid_list_sort(fluid_list_t *list, fluid_compare_func_t compare_func)$/;"	f
fluid_list_sort_merge	fluid_list.c	/^fluid_list_sort_merge(fluid_list_t *l1, fluid_list_t *l2, fluid_compare_func_t compare_func)$/;"	f	file:
fluid_list_t	fluid_list.h	/^typedef struct _fluid_list_t fluid_list_t;$/;"	t	typeref:struct:_fluid_list_t
fluid_log	fluid_sys.c	/^fluid_log(int level, char* fmt, ...)$/;"	f
fluid_log_config	fluid_sys.c	/^fluid_log_config(void)$/;"	f
fluid_log_function	fluid_sys.c	/^static fluid_log_function_t fluid_log_function[LAST_LOG_LEVEL];$/;"	v	file:
fluid_log_function_t	include/fluidsynth/log.h	/^typedef void (*fluid_log_function_t)(int level, char* message, void* data);$/;"	t
fluid_log_initialized	fluid_sys.c	/^static int fluid_log_initialized = 0;$/;"	v	file:
fluid_log_level	include/fluidsynth/log.h	/^enum fluid_log_level { $/;"	g
fluid_log_user_data	fluid_sys.c	/^static void* fluid_log_user_data[LAST_LOG_LEVEL];$/;"	v	file:
fluid_loop	fluid_synth.h	/^enum fluid_loop {$/;"	g
fluid_mdriver_definition_t	fluid_mdriver.c	/^struct fluid_mdriver_definition_t {$/;"	s	file:
fluid_midi_control_change	fluid_midi.h	/^enum fluid_midi_control_change {$/;"	g
fluid_midi_driver_settings	fluid_mdriver.c	/^void fluid_midi_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_midi_driver_t	include/fluidsynth/types.h	/^typedef struct _fluid_midi_driver_t fluid_midi_driver_t;$/;"	t	typeref:struct:_fluid_midi_driver_t
fluid_midi_drivers	fluid_mdriver.c	/^struct fluid_mdriver_definition_t fluid_midi_drivers[] = {$/;"	v	typeref:struct:fluid_mdriver_definition_t
fluid_midi_dump_postrouter	fluid_midi_router.c	/^int fluid_midi_dump_postrouter(void* data, fluid_midi_event_t* event)$/;"	f
fluid_midi_dump_prerouter	fluid_midi_router.c	/^int fluid_midi_dump_prerouter(void* data, fluid_midi_event_t* event)$/;"	f
fluid_midi_event_get_channel	fluid_midi.c	/^int fluid_midi_event_get_channel(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_control	fluid_midi.c	/^int fluid_midi_event_get_control(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_key	fluid_midi.c	/^int fluid_midi_event_get_key(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_pitch	fluid_midi.c	/^int fluid_midi_event_get_pitch(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_program	fluid_midi.c	/^int fluid_midi_event_get_program(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_type	fluid_midi.c	/^int fluid_midi_event_get_type(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_value	fluid_midi.c	/^int fluid_midi_event_get_value(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_get_velocity	fluid_midi.c	/^int fluid_midi_event_get_velocity(fluid_midi_event_t* evt)$/;"	f
fluid_midi_event_length	fluid_midi.c	/^int fluid_midi_event_length(unsigned char event){$/;"	f
fluid_midi_event_set_channel	fluid_midi.c	/^int fluid_midi_event_set_channel(fluid_midi_event_t* evt, int chan)$/;"	f
fluid_midi_event_set_control	fluid_midi.c	/^int fluid_midi_event_set_control(fluid_midi_event_t* evt, int v)$/;"	f
fluid_midi_event_set_key	fluid_midi.c	/^int fluid_midi_event_set_key(fluid_midi_event_t* evt, int v)$/;"	f
fluid_midi_event_set_pitch	fluid_midi.c	/^int fluid_midi_event_set_pitch(fluid_midi_event_t* evt, int val)$/;"	f
fluid_midi_event_set_program	fluid_midi.c	/^int fluid_midi_event_set_program(fluid_midi_event_t* evt, int val)$/;"	f
fluid_midi_event_set_type	fluid_midi.c	/^int fluid_midi_event_set_type(fluid_midi_event_t* evt, int type)$/;"	f
fluid_midi_event_set_value	fluid_midi.c	/^int fluid_midi_event_set_value(fluid_midi_event_t* evt, int v)$/;"	f
fluid_midi_event_set_velocity	fluid_midi.c	/^int fluid_midi_event_set_velocity(fluid_midi_event_t* evt, int v)$/;"	f
fluid_midi_event_t	include/fluidsynth/types.h	/^typedef struct _fluid_midi_event_t fluid_midi_event_t;$/;"	t	typeref:struct:_fluid_midi_event_t
fluid_midi_event_type	fluid_midi.h	/^enum fluid_midi_event_type {$/;"	g
fluid_midi_file	fluid_midi.h	/^} fluid_midi_file;$/;"	t	typeref:struct:__anon25
fluid_midi_file_eot	fluid_midi.c	/^int fluid_midi_file_eot(fluid_midi_file* mf)$/;"	f
fluid_midi_file_get_division	fluid_midi.c	/^int fluid_midi_file_get_division(fluid_midi_file* midifile)$/;"	f
fluid_midi_file_getc	fluid_midi.c	/^int fluid_midi_file_getc(fluid_midi_file* mf)$/;"	f
fluid_midi_file_load_tracks	fluid_midi.c	/^int fluid_midi_file_load_tracks(fluid_midi_file* mf, fluid_player_t* player)$/;"	f
fluid_midi_file_push	fluid_midi.c	/^int fluid_midi_file_push(fluid_midi_file* mf, int c)$/;"	f
fluid_midi_file_read	fluid_midi.c	/^int fluid_midi_file_read(fluid_midi_file* mf, void* buf, int len)$/;"	f
fluid_midi_file_read_event	fluid_midi.c	/^int fluid_midi_file_read_event(fluid_midi_file* mf, fluid_track_t* track)$/;"	f
fluid_midi_file_read_mthd	fluid_midi.c	/^int fluid_midi_file_read_mthd(fluid_midi_file* mf)$/;"	f
fluid_midi_file_read_track	fluid_midi.c	/^int fluid_midi_file_read_track(fluid_midi_file* mf, fluid_player_t* player, int num)$/;"	f
fluid_midi_file_read_tracklen	fluid_midi.c	/^int fluid_midi_file_read_tracklen(fluid_midi_file* mf)$/;"	f
fluid_midi_file_read_varlen	fluid_midi.c	/^int fluid_midi_file_read_varlen(fluid_midi_file* mf)$/;"	f
fluid_midi_file_skip	fluid_midi.c	/^int fluid_midi_file_skip(fluid_midi_file* mf, int skip)$/;"	f
fluid_midi_parser_parse	fluid_midi.c	/^fluid_midi_event_t* fluid_midi_parser_parse(fluid_midi_parser_t* parser, unsigned char c)$/;"	f
fluid_midi_parser_t	fluid_midi.h	/^typedef struct _fluid_midi_parser_t fluid_midi_parser_t;$/;"	t	typeref:struct:_fluid_midi_parser_t
fluid_midi_router_begin	fluid_midi_router.c	/^int fluid_midi_router_begin(fluid_midi_router_t* router, fluid_midi_router_rule_t** dest)$/;"	f
fluid_midi_router_create_default_rules	fluid_midi_router.c	/^int fluid_midi_router_create_default_rules(fluid_midi_router_t* router)$/;"	f
fluid_midi_router_destroy_all_rules	fluid_midi_router.c	/^void fluid_midi_router_destroy_all_rules(fluid_midi_router_t* router){$/;"	f
fluid_midi_router_disable_all_rules	fluid_midi_router.c	/^void fluid_midi_router_disable_all_rules(fluid_midi_router_t* router)$/;"	f
fluid_midi_router_end	fluid_midi_router.c	/^int fluid_midi_router_end(fluid_midi_router_t* router){$/;"	f
fluid_midi_router_free_unused_rules	fluid_midi_router.c	/^void fluid_midi_router_free_unused_rules(fluid_midi_router_t* router)$/;"	f
fluid_midi_router_handle_begin	fluid_midi_router.c	/^int fluid_midi_router_handle_begin(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_chan	fluid_midi_router.c	/^int fluid_midi_router_handle_chan(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_clear	fluid_midi_router.c	/^int fluid_midi_router_handle_clear(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_default	fluid_midi_router.c	/^int fluid_midi_router_handle_default(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_end	fluid_midi_router.c	/^int fluid_midi_router_handle_end(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_midi_event	fluid_midi_router.c	/^fluid_midi_router_handle_midi_event(void* data, fluid_midi_event_t* event)$/;"	f
fluid_midi_router_handle_par1	fluid_midi_router.c	/^int fluid_midi_router_handle_par1(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_handle_par2	fluid_midi_router.c	/^int fluid_midi_router_handle_par2(fluid_synth_t* synth, int ac, char** av, fluid_ostream_t out)$/;"	f
fluid_midi_router_rule_t	include/fluidsynth/types.h	/^typedef struct _fluid_midi_router_rule_t fluid_midi_router_rule_t;$/;"	t	typeref:struct:_fluid_midi_router_rule_t
fluid_midi_router_t	include/fluidsynth/types.h	/^typedef struct _fluid_midi_router_t fluid_midi_router_t;$/;"	t	typeref:struct:_fluid_midi_router_t
fluid_midi_send_event	fluid_midi.c	/^int fluid_midi_send_event(fluid_synth_t* synth, fluid_player_t* player, fluid_midi_event_t* event)$/;"	f
fluid_midirule_state	fluid_midi_router.h	/^enum fluid_midirule_state {$/;"	g
fluid_midishare_close_appl	fluid_midishare.c	/^static void fluid_midishare_close_appl (fluid_midishare_midi_driver_t* dev)$/;"	f	file:
fluid_midishare_close_driver	fluid_midishare.c	/^static void fluid_midishare_close_driver (fluid_midishare_midi_driver_t* dev)$/;"	f	file:
fluid_midishare_keyoff_task	fluid_midishare.c	/^static void fluid_midishare_keyoff_task (long date, short ref, long a1, long a2, long a3)$/;"	f	file:
fluid_midishare_midi_driver_receive	fluid_midishare.c	/^static void fluid_midishare_midi_driver_receive(short ref)$/;"	f	file:
fluid_midishare_midi_driver_status	fluid_midishare.c	/^int fluid_midishare_midi_driver_status(fluid_midi_driver_t* p)$/;"	f
fluid_midishare_midi_driver_t	fluid_midishare.c	/^} fluid_midishare_midi_driver_t;$/;"	t	typeref:struct:__anon22	file:
fluid_midishare_open_appl	fluid_midishare.c	/^static int fluid_midishare_open_appl (fluid_midishare_midi_driver_t* dev)$/;"	f	file:
fluid_midishare_open_driver	fluid_midishare.c	/^static int fluid_midishare_open_driver (fluid_midishare_midi_driver_t* dev)$/;"	f	file:
fluid_midishare_sleep	fluid_midishare.c	/^ static void fluid_midishare_sleep (short r){}$/;"	f	file:
fluid_midishare_wakeup	fluid_midishare.c	/^ static void fluid_midishare_wakeup (short r)$/;"	f	file:
fluid_mlock	fluid_sys.h	288;"	d
fluid_mlock	fluid_sys.h	291;"	d
fluid_mod_clone	fluid_mod.c	/^fluid_mod_clone(fluid_mod_t* mod, fluid_mod_t* src)$/;"	f
fluid_mod_delete	fluid_mod.c	/^fluid_mod_delete(fluid_mod_t * mod)$/;"	f
fluid_mod_flags	include/fluidsynth/mod.h	/^enum fluid_mod_flags$/;"	g
fluid_mod_get_amount	fluid_mod.c	/^double fluid_mod_get_amount(fluid_mod_t* mod)$/;"	f
fluid_mod_get_dest	fluid_mod.c	/^int fluid_mod_get_dest(fluid_mod_t* mod)$/;"	f
fluid_mod_get_flags1	fluid_mod.c	/^int fluid_mod_get_flags1(fluid_mod_t* mod)$/;"	f
fluid_mod_get_flags2	fluid_mod.c	/^int fluid_mod_get_flags2(fluid_mod_t* mod)$/;"	f
fluid_mod_get_source1	fluid_mod.c	/^int fluid_mod_get_source1(fluid_mod_t* mod)$/;"	f
fluid_mod_get_source2	fluid_mod.c	/^int fluid_mod_get_source2(fluid_mod_t* mod)$/;"	f
fluid_mod_get_value	fluid_mod.c	/^fluid_mod_get_value(fluid_mod_t* mod, fluid_channel_t* chan, fluid_voice_t* voice)$/;"	f
fluid_mod_has_dest	fluid_mod.h	37;"	d
fluid_mod_has_source	fluid_mod.h	31;"	d
fluid_mod_new	fluid_mod.c	/^fluid_mod_new()$/;"	f
fluid_mod_set_amount	fluid_mod.c	/^fluid_mod_set_amount(fluid_mod_t* mod, double amount)$/;"	f
fluid_mod_set_dest	fluid_mod.c	/^fluid_mod_set_dest(fluid_mod_t* mod, int dest)$/;"	f
fluid_mod_set_source1	fluid_mod.c	/^fluid_mod_set_source1(fluid_mod_t* mod, int src, int flags)$/;"	f
fluid_mod_set_source2	fluid_mod.c	/^fluid_mod_set_source2(fluid_mod_t* mod, int src, int flags)$/;"	f
fluid_mod_src	include/fluidsynth/mod.h	/^enum fluid_mod_src$/;"	g
fluid_mod_t	include/fluidsynth/types.h	/^typedef struct _fluid_mod_t fluid_mod_t;$/;"	t	typeref:struct:_fluid_mod_t
fluid_mod_test_identity	fluid_mod.c	/^int fluid_mod_test_identity(fluid_mod_t * mod1, fluid_mod_t * mod2){$/;"	f
fluid_munlock	fluid_sys.h	289;"	d
fluid_munlock	fluid_sys.h	292;"	d
fluid_mutex_destroy	fluid_sys.h	138;"	d
fluid_mutex_destroy	fluid_sys.h	145;"	d
fluid_mutex_destroy	fluid_sys.h	152;"	d
fluid_mutex_destroy	fluid_sys.h	159;"	d
fluid_mutex_init	fluid_sys.h	137;"	d
fluid_mutex_init	fluid_sys.h	144;"	d
fluid_mutex_init	fluid_sys.h	151;"	d
fluid_mutex_init	fluid_sys.h	158;"	d
fluid_mutex_lock	fluid_sys.h	139;"	d
fluid_mutex_lock	fluid_sys.h	146;"	d
fluid_mutex_lock	fluid_sys.h	153;"	d
fluid_mutex_lock	fluid_sys.h	160;"	d
fluid_mutex_t	fluid_sys.h	/^typedef HANDLE fluid_mutex_t;$/;"	t
fluid_mutex_t	fluid_sys.h	/^typedef HMTX fluid_mutex_t;$/;"	t
fluid_mutex_t	fluid_sys.h	/^typedef int fluid_mutex_t;$/;"	t
fluid_mutex_t	fluid_sys.h	/^typedef pthread_mutex_t fluid_mutex_t;$/;"	t
fluid_mutex_unlock	fluid_sys.h	140;"	d
fluid_mutex_unlock	fluid_sys.h	147;"	d
fluid_mutex_unlock	fluid_sys.h	154;"	d
fluid_mutex_unlock	fluid_sys.h	161;"	d
fluid_num_setting_t	fluid_settings.c	/^} fluid_num_setting_t;$/;"	t	typeref:struct:__anon7	file:
fluid_num_update_t	fluid_settings.h	/^typedef int (*fluid_num_update_t)(void* data, char* name, double value);$/;"	t
fluid_oss_audio_driver_settings	fluid_oss.c	/^fluid_oss_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_oss_audio_driver_t	fluid_oss.c	/^} fluid_oss_audio_driver_t;$/;"	t	typeref:struct:__anon23	file:
fluid_oss_audio_run	fluid_oss.c	/^fluid_oss_audio_run(void* d)$/;"	f
fluid_oss_audio_run2	fluid_oss.c	/^fluid_oss_audio_run2(void* d)$/;"	f
fluid_oss_get_caps	fluid_oss.c	/^fluid_oss_get_caps(fluid_oss_audio_driver_t* dev)$/;"	f
fluid_oss_get_sample_formats	fluid_oss.c	/^fluid_oss_get_sample_formats(fluid_oss_audio_driver_t* dev)$/;"	f
fluid_oss_midi_driver_settings	fluid_oss.c	/^void fluid_oss_midi_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_oss_midi_driver_status	fluid_oss.c	/^fluid_oss_midi_driver_status(fluid_midi_driver_t* p)$/;"	f
fluid_oss_midi_driver_t	fluid_oss.c	/^} fluid_oss_midi_driver_t;$/;"	t	typeref:struct:__anon24	file:
fluid_oss_midi_run	fluid_oss.c	/^fluid_oss_midi_run(void* d)$/;"	f
fluid_oss_set_queue_size	fluid_oss.c	/^fluid_oss_set_queue_size(fluid_oss_audio_driver_t* dev, int ss, int ch, int qs, int bs)$/;"	f
fluid_ostream_printf	fluid_io.c	/^int fluid_ostream_printf(fluid_ostream_t out, char* format, ...)$/;"	f
fluid_ostream_t	include/fluidsynth/types.h	/^typedef int fluid_ostream_t;$/;"	t
fluid_pan	fluid_conv.c	/^fluid_pan(fluid_real_t c, int left)$/;"	f
fluid_pan_tab	fluid_conv.c	/^fluid_real_t fluid_pan_tab[FLUID_PAN_SIZE];$/;"	v
fluid_phase_decr	fluid_phase.h	106;"	d
fluid_phase_double	fluid_phase.h	95;"	d
fluid_phase_fract	fluid_phase.h	77;"	d
fluid_phase_fract_to_tablerow	fluid_phase.h	92;"	d
fluid_phase_from_index_fract	fluid_phase.h	70;"	d
fluid_phase_incr	fluid_phase.h	101;"	d
fluid_phase_index	fluid_phase.h	75;"	d
fluid_phase_index_plusplus	fluid_phase.h	115;"	d
fluid_phase_index_round	fluid_phase.h	81;"	d
fluid_phase_set	fluid_phase.h	57;"	d
fluid_phase_set_float	fluid_phase.h	65;"	d
fluid_phase_set_int	fluid_phase.h	59;"	d
fluid_phase_sub_int	fluid_phase.h	111;"	d
fluid_phase_t	fluid_phase.h	/^typedef unsigned long long fluid_phase_t;$/;"	t
fluid_player_add	fluid_midi.c	/^int fluid_player_add(fluid_player_t* player, char* midifile)$/;"	f
fluid_player_add_track	fluid_midi.c	/^int fluid_player_add_track(fluid_player_t* player, fluid_track_t* track)$/;"	f
fluid_player_callback	fluid_midi.c	/^int fluid_player_callback(void* data, unsigned int msec)$/;"	f
fluid_player_count_tracks	fluid_midi.c	/^int fluid_player_count_tracks(fluid_player_t* player)$/;"	f
fluid_player_get_track	fluid_midi.c	/^fluid_track_t* fluid_player_get_track(fluid_player_t* player, int i)$/;"	f
fluid_player_join	fluid_midi.c	/^int fluid_player_join(fluid_player_t* player)$/;"	f
fluid_player_load	fluid_midi.c	/^int fluid_player_load(fluid_player_t* player, char *filename)$/;"	f
fluid_player_play	fluid_midi.c	/^int fluid_player_play(fluid_player_t* player)$/;"	f
fluid_player_reset	fluid_midi.c	/^int fluid_player_reset(fluid_player_t* player)$/;"	f
fluid_player_set_bpm	fluid_midi.c	/^int fluid_player_set_bpm(fluid_player_t* player, int bpm)$/;"	f
fluid_player_set_loop	fluid_midi.c	/^int fluid_player_set_loop(fluid_player_t* player, int loop)$/;"	f
fluid_player_set_midi_tempo	fluid_midi.c	/^int fluid_player_set_midi_tempo(fluid_player_t* player, int tempo)$/;"	f
fluid_player_status	fluid_midi.h	/^enum fluid_player_status$/;"	g
fluid_player_stop	fluid_midi.c	/^int fluid_player_stop(fluid_player_t* player)$/;"	f
fluid_player_t	include/fluidsynth/types.h	/^typedef struct _fluid_player_t fluid_player_t;$/;"	t	typeref:struct:_fluid_player_t
fluid_portaudio_driver_settings	fluid_portaudio.c	/^fluid_portaudio_driver_settings (fluid_settings_t *settings)$/;"	f
fluid_portaudio_driver_t	fluid_portaudio.c	/^} fluid_portaudio_driver_t;$/;"	t	typeref:struct:__anon2	file:
fluid_portaudio_run	fluid_portaudio.c	/^fluid_portaudio_run (const void *input, void *output, unsigned long frameCount,$/;"	f	file:
fluid_posbp_tab	fluid_conv.c	/^fluid_real_t fluid_posbp_tab[128];$/;"	v
fluid_preset_get_banknum	fluid_sfont.h	49;"	d
fluid_preset_get_data	fluid_sfont.h	46;"	d
fluid_preset_get_name	fluid_sfont.h	48;"	d
fluid_preset_get_num	fluid_sfont.h	50;"	d
fluid_preset_noteon	fluid_sfont.h	52;"	d
fluid_preset_notify	fluid_sfont.h	55;"	d
fluid_preset_set_data	fluid_sfont.h	47;"	d
fluid_preset_t	include/fluidsynth/types.h	/^typedef struct _fluid_preset_t fluid_preset_t;$/;"	t	typeref:struct:_fluid_preset_t
fluid_preset_zone_get_inst	fluid_defsfont.c	/^fluid_preset_zone_get_inst(fluid_preset_zone_t* zone)$/;"	f
fluid_preset_zone_import_sfont	fluid_defsfont.c	/^fluid_preset_zone_import_sfont(fluid_preset_zone_t* zone, SFZone *sfzone, fluid_defsfont_t* sfont)$/;"	f
fluid_preset_zone_inside_range	fluid_defsfont.c	/^fluid_preset_zone_inside_range(fluid_preset_zone_t* zone, int key, int vel)$/;"	f
fluid_preset_zone_next	fluid_defsfont.c	/^fluid_preset_zone_next(fluid_preset_zone_t* preset)$/;"	f
fluid_preset_zone_t	fluid_defsfont.h	/^typedef struct _fluid_preset_zone_t fluid_preset_zone_t;$/;"	t	typeref:struct:_fluid_preset_zone_t
fluid_profile	fluid_sys.h	257;"	d
fluid_profile	fluid_sys.h	273;"	d
fluid_profile_data	fluid_sys.c	/^fluid_profile_data_t fluid_profile_data[] =$/;"	v
fluid_profile_data_t	fluid_sys.h	/^} fluid_profile_data_t;$/;"	t	typeref:struct:_fluid_profile_data_t
fluid_profile_ref	fluid_sys.h	253;"	d
fluid_profile_ref	fluid_sys.h	272;"	d
fluid_profiling_print	fluid_sys.c	/^void fluid_profiling_print(void)$/;"	f
fluid_profiling_print	fluid_sys.h	271;"	d
fluid_pulse_audio_driver_settings	fluid_pulse.c	/^void fluid_pulse_audio_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_pulse_audio_driver_t	fluid_pulse.c	/^} fluid_pulse_audio_driver_t;$/;"	t	typeref:struct:__anon14	file:
fluid_pulse_audio_run	fluid_pulse.c	/^static void* fluid_pulse_audio_run(void* d)$/;"	f	file:
fluid_pulse_audio_run2	fluid_pulse.c	/^static void* fluid_pulse_audio_run2(void* d)$/;"	f	file:
fluid_rampreset_add_sample	fluid_ramsfont.c	/^int fluid_rampreset_add_sample(fluid_rampreset_t* preset, fluid_sample_t* sample, int lokey, int hikey)$/;"	f
fluid_rampreset_add_zone	fluid_ramsfont.c	/^fluid_rampreset_add_zone(fluid_rampreset_t* preset, fluid_preset_zone_t* zone)$/;"	f
fluid_rampreset_get_banknum	fluid_ramsfont.c	/^fluid_rampreset_get_banknum(fluid_rampreset_t* preset)$/;"	f
fluid_rampreset_get_name	fluid_ramsfont.c	/^fluid_rampreset_get_name(fluid_rampreset_t* preset)$/;"	f
fluid_rampreset_get_num	fluid_ramsfont.c	/^fluid_rampreset_get_num(fluid_rampreset_t* preset)$/;"	f
fluid_rampreset_izone_set_gen	fluid_ramsfont.c	/^int fluid_rampreset_izone_set_gen(fluid_rampreset_t* preset, fluid_sample_t* sample,$/;"	f
fluid_rampreset_izone_set_loop	fluid_ramsfont.c	/^int fluid_rampreset_izone_set_loop(fluid_rampreset_t* preset, fluid_sample_t* sample,$/;"	f
fluid_rampreset_izoneforsample	fluid_ramsfont.c	/^fluid_inst_zone_t* fluid_rampreset_izoneforsample(fluid_rampreset_t* preset, fluid_sample_t* sample)$/;"	f
fluid_rampreset_next	fluid_ramsfont.c	/^fluid_rampreset_next(fluid_rampreset_t* preset)$/;"	f
fluid_rampreset_noteon	fluid_ramsfont.c	/^fluid_rampreset_noteon(fluid_rampreset_t* preset, fluid_synth_t* synth, int chan, int key, int vel)$/;"	f
fluid_rampreset_preset_delete	fluid_ramsfont.c	/^int fluid_rampreset_preset_delete(fluid_preset_t* preset)$/;"	f
fluid_rampreset_preset_get_banknum	fluid_ramsfont.c	/^int fluid_rampreset_preset_get_banknum(fluid_preset_t* preset)$/;"	f
fluid_rampreset_preset_get_name	fluid_ramsfont.c	/^char* fluid_rampreset_preset_get_name(fluid_preset_t* preset)$/;"	f
fluid_rampreset_preset_get_num	fluid_ramsfont.c	/^int fluid_rampreset_preset_get_num(fluid_preset_t* preset)$/;"	f
fluid_rampreset_preset_noteon	fluid_ramsfont.c	/^int fluid_rampreset_preset_noteon(fluid_preset_t* preset, fluid_synth_t* synth, int chan, int key, int vel)$/;"	f
fluid_rampreset_remembervoice	fluid_ramsfont.c	/^fluid_rampreset_remembervoice(fluid_rampreset_t* preset, fluid_voice_t* voice) {$/;"	f
fluid_rampreset_remove_izone	fluid_ramsfont.c	/^int fluid_rampreset_remove_izone(fluid_rampreset_t* preset, fluid_sample_t* sample) {$/;"	f
fluid_rampreset_t	include/fluidsynth/types.h	/^typedef struct _fluid_rampreset_t fluid_rampreset_t;$/;"	t	typeref:struct:_fluid_rampreset_t
fluid_rampreset_updatevoices	fluid_ramsfont.c	/^fluid_rampreset_updatevoices(fluid_rampreset_t* preset, int gen_type, float val) {$/;"	f
fluid_rampreset_voice_t	fluid_ramsfont.c	/^typedef struct _fluid_rampreset_voice_t fluid_rampreset_voice_t;$/;"	t	typeref:struct:_fluid_rampreset_voice_t	file:
fluid_ramsfont_add_izone	fluid_ramsfont.c	/^int fluid_ramsfont_add_izone(fluid_ramsfont_t* sfont,$/;"	f
fluid_ramsfont_add_preset	fluid_ramsfont.c	/^int fluid_ramsfont_add_preset(fluid_ramsfont_t* sfont, fluid_rampreset_t* preset)$/;"	f
fluid_ramsfont_create_sfont	fluid_ramsfont.c	/^fluid_ramsfont_create_sfont()$/;"	f
fluid_ramsfont_get_name	fluid_ramsfont.c	/^char* fluid_ramsfont_get_name(fluid_ramsfont_t* sfont)$/;"	f
fluid_ramsfont_get_preset	fluid_ramsfont.c	/^fluid_rampreset_t* fluid_ramsfont_get_preset(fluid_ramsfont_t* sfont, unsigned int bank, unsigned int num)$/;"	f
fluid_ramsfont_iteration_next	fluid_ramsfont.c	/^int fluid_ramsfont_iteration_next(fluid_ramsfont_t* sfont, fluid_preset_t* preset)$/;"	f
fluid_ramsfont_iteration_start	fluid_ramsfont.c	/^void fluid_ramsfont_iteration_start(fluid_ramsfont_t* sfont)$/;"	f
fluid_ramsfont_izone_set_gen	fluid_ramsfont.c	/^int fluid_ramsfont_izone_set_gen(fluid_ramsfont_t* sfont,$/;"	f
fluid_ramsfont_izone_set_loop	fluid_ramsfont.c	/^int fluid_ramsfont_izone_set_loop(fluid_ramsfont_t* sfont,$/;"	f
fluid_ramsfont_remove_izone	fluid_ramsfont.c	/^int fluid_ramsfont_remove_izone(fluid_ramsfont_t* sfont,$/;"	f
fluid_ramsfont_set_name	fluid_ramsfont.c	/^fluid_ramsfont_set_name(fluid_ramsfont_t* sfont, char * name)$/;"	f
fluid_ramsfont_sfont_delete	fluid_ramsfont.c	/^int fluid_ramsfont_sfont_delete(fluid_sfont_t* sfont)$/;"	f
fluid_ramsfont_sfont_get_name	fluid_ramsfont.c	/^char* fluid_ramsfont_sfont_get_name(fluid_sfont_t* sfont)$/;"	f
fluid_ramsfont_sfont_get_preset	fluid_ramsfont.c	/^fluid_preset_t* fluid_ramsfont_sfont_get_preset(fluid_sfont_t* sfont, unsigned int bank, unsigned int prenum)$/;"	f
fluid_ramsfont_sfont_iteration_next	fluid_ramsfont.c	/^int fluid_ramsfont_sfont_iteration_next(fluid_sfont_t* sfont, fluid_preset_t* preset)$/;"	f
fluid_ramsfont_sfont_iteration_start	fluid_ramsfont.c	/^void fluid_ramsfont_sfont_iteration_start(fluid_sfont_t* sfont)$/;"	f
fluid_ramsfont_t	include/fluidsynth/types.h	/^typedef struct _fluid_ramsfont_t fluid_ramsfont_t;$/;"	t	typeref:struct:_fluid_ramsfont_t
fluid_real_t	fluidsynth_priv.h	/^typedef double fluid_real_t;$/;"	t
fluid_real_t	fluidsynth_priv.h	/^typedef float fluid_real_t;$/;"	t
fluid_revmodel_getdamp	fluid_rev.c	/^fluid_revmodel_getdamp(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_getlevel	fluid_rev.c	/^fluid_revmodel_getlevel(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_getroomsize	fluid_rev.c	/^fluid_revmodel_getroomsize(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_getwidth	fluid_rev.c	/^fluid_revmodel_getwidth(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_init	fluid_rev.c	/^fluid_revmodel_init(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_presets_t	fluid_rev.h	/^} fluid_revmodel_presets_t;$/;"	t	typeref:struct:_fluid_revmodel_presets_t
fluid_revmodel_processmix	fluid_rev.c	/^fluid_revmodel_processmix(fluid_revmodel_t* rev, fluid_real_t *in,$/;"	f
fluid_revmodel_processreplace	fluid_rev.c	/^fluid_revmodel_processreplace(fluid_revmodel_t* rev, fluid_real_t *in,$/;"	f
fluid_revmodel_reset	fluid_rev.c	/^fluid_revmodel_reset(fluid_revmodel_t* rev)$/;"	f
fluid_revmodel_setdamp	fluid_rev.c	/^fluid_revmodel_setdamp(fluid_revmodel_t* rev, fluid_real_t value)$/;"	f
fluid_revmodel_setlevel	fluid_rev.c	/^fluid_revmodel_setlevel(fluid_revmodel_t* rev, fluid_real_t value)$/;"	f
fluid_revmodel_setroomsize	fluid_rev.c	/^fluid_revmodel_setroomsize(fluid_revmodel_t* rev, fluid_real_t value)$/;"	f
fluid_revmodel_setwidth	fluid_rev.c	/^fluid_revmodel_setwidth(fluid_revmodel_t* rev, fluid_real_t value)$/;"	f
fluid_revmodel_t	fluid_rev.h	/^typedef struct _fluid_revmodel_t fluid_revmodel_t;$/;"	t	typeref:struct:_fluid_revmodel_t
fluid_revmodel_update	fluid_rev.c	/^fluid_revmodel_update(fluid_revmodel_t* rev)$/;"	f
fluid_sample_decr_ref	fluid_sfont.h	61;"	d
fluid_sample_import_sfont	fluid_defsfont.c	/^fluid_sample_import_sfont(fluid_sample_t* sample, SFSample* sfsample, fluid_defsfont_t* sfont)$/;"	f
fluid_sample_in_rom	fluid_defsfont.c	/^fluid_sample_in_rom(fluid_sample_t* sample)$/;"	f
fluid_sample_incr_ref	fluid_sfont.h	59;"	d
fluid_sample_refcount	include/fluidsynth/sfont.h	176;"	d
fluid_sample_set_name	fluid_ramsfont.c	/^fluid_sample_set_name(fluid_sample_t* sample, char * name)$/;"	f
fluid_sample_set_sound_data	fluid_ramsfont.c	/^fluid_sample_set_sound_data(fluid_sample_t* sample, short *data, unsigned int nbframes, short copy_data, int rootkey)$/;"	f
fluid_sample_t	include/fluidsynth/types.h	/^typedef struct _fluid_sample_t fluid_sample_t;$/;"	t	typeref:struct:_fluid_sample_t
fluid_seq_cleartrace	fluid_seq.c	/^fluid_seq_cleartrace(fluid_sequencer_t* seq)$/;"	f
fluid_seq_dotrace	fluid_seq.c	/^fluid_seq_dotrace(fluid_sequencer_t* seq, char *fmt, ...)$/;"	f
fluid_seq_dotrace	fluid_seq.c	/^void fluid_seq_dotrace(fluid_sequencer_t* seq, char *fmt, ...) {}$/;"	f
fluid_seq_event_type	include/fluidsynth/event.h	/^enum fluid_seq_event_type {$/;"	g
fluid_seq_fluidsynth_callback	fluid_seqbind.c	/^void fluid_seq_fluidsynth_callback(unsigned int time, fluid_event_t* evt, fluid_sequencer_t* seq, void* data)$/;"	f
fluid_seq_gettrace	fluid_seq.c	/^fluid_seq_gettrace(fluid_sequencer_t* seq)$/;"	f
fluid_sequencer_client_is_dest	fluid_seq.c	/^int fluid_sequencer_client_is_dest(fluid_sequencer_t* seq, int id)$/;"	f
fluid_sequencer_client_t	fluid_seq.c	/^} fluid_sequencer_client_t;$/;"	t	typeref:struct:_fluid_sequencer_client_t	file:
fluid_sequencer_count_clients	fluid_seq.c	/^int fluid_sequencer_count_clients(fluid_sequencer_t* seq)$/;"	f
fluid_sequencer_get_client_id	fluid_seq.c	/^short fluid_sequencer_get_client_id(fluid_sequencer_t* seq, int index)$/;"	f
fluid_sequencer_get_client_name	fluid_seq.c	/^char* fluid_sequencer_get_client_name(fluid_sequencer_t* seq, int id)$/;"	f
fluid_sequencer_get_tick	fluid_seq.c	/^unsigned int fluid_sequencer_get_tick(fluid_sequencer_t* seq)$/;"	f
fluid_sequencer_get_time_scale	fluid_seq.c	/^double fluid_sequencer_get_time_scale(fluid_sequencer_t* seq)$/;"	f
fluid_sequencer_register_client	fluid_seq.c	/^short fluid_sequencer_register_client(fluid_sequencer_t* seq, char* name,$/;"	f
fluid_sequencer_register_fluidsynth	fluid_seqbind.c	/^short fluid_sequencer_register_fluidsynth(fluid_sequencer_t* seq, fluid_synth_t* synth)$/;"	f
fluid_sequencer_remove_events	fluid_seq.c	/^fluid_sequencer_remove_events(fluid_sequencer_t* seq, short source, short dest, int type)$/;"	f
fluid_sequencer_send_at	fluid_seq.c	/^fluid_sequencer_send_at(fluid_sequencer_t* seq, fluid_event_t* evt, unsigned int time, int absolute)$/;"	f
fluid_sequencer_send_now	fluid_seq.c	/^void fluid_sequencer_send_now(fluid_sequencer_t* seq, fluid_event_t* evt)$/;"	f
fluid_sequencer_set_time_scale	fluid_seq.c	/^void fluid_sequencer_set_time_scale(fluid_sequencer_t* seq, double scale)$/;"	f
fluid_sequencer_t	include/fluidsynth/types.h	/^typedef struct _fluid_sequencer_t fluid_sequencer_t;$/;"	t	typeref:struct:_fluid_sequencer_t
fluid_sequencer_unregister_client	fluid_seq.c	/^void fluid_sequencer_unregister_client(fluid_sequencer_t* seq, short id)$/;"	f
fluid_server_add_client	fluid_cmd.c	/^void fluid_server_add_client(fluid_server_t* server, fluid_client_t* client)$/;"	f
fluid_server_close	fluid_cmd.c	/^static void fluid_server_close(fluid_server_t* server)$/;"	f	file:
fluid_server_func_t	fluid_sys.h	/^typedef int (*fluid_server_func_t)(void* data, fluid_socket_t client_socket, char* addr);$/;"	t
fluid_server_handle_connection	fluid_cmd.c	/^fluid_server_handle_connection(fluid_server_t* server, fluid_socket_t client_socket, char* addr)$/;"	f	file:
fluid_server_join	fluid_cmd.c	/^int fluid_server_join(fluid_server_t* server)$/;"	f
fluid_server_newclient_func_t	include/fluidsynth/shell.h	/^typedef fluid_cmd_handler_t* (*fluid_server_newclient_func_t)(void* data, char* addr);$/;"	t
fluid_server_remove_client	fluid_cmd.c	/^void fluid_server_remove_client(fluid_server_t* server, fluid_client_t* client)$/;"	f
fluid_server_socket_join	fluid_sys.c	/^int fluid_server_socket_join(fluid_server_socket_t* server_socket)$/;"	f
fluid_server_socket_run	fluid_sys.c	/^static void fluid_server_socket_run(void* data)$/;"	f	file:
fluid_server_socket_t	fluidsynth_priv.h	/^typedef struct _fluid_server_socket_t fluid_server_socket_t;$/;"	t	typeref:struct:_fluid_server_socket_t
fluid_server_t	include/fluidsynth/types.h	/^typedef struct _fluid_server_t fluid_server_t;$/;"	t	typeref:struct:_fluid_server_t
fluid_set_hinstance	fluid_dll.c	/^void fluid_set_hinstance(void* hinstance)$/;"	f
fluid_set_log_function	fluid_sys.c	/^fluid_set_log_function(int level, fluid_log_function_t fun, void* data)$/;"	f
fluid_settings_add_option	fluid_settings.c	/^int fluid_settings_add_option(fluid_settings_t* settings, char* name, char* s)$/;"	f
fluid_settings_foreach	fluid_settings.c	/^void fluid_settings_foreach(fluid_settings_t* settings, void* data, fluid_settings_foreach_t func)$/;"	f
fluid_settings_foreach_data	fluid_settings.c	/^static void* fluid_settings_foreach_data;$/;"	v	file:
fluid_settings_foreach_func	fluid_settings.c	/^static fluid_settings_foreach_t fluid_settings_foreach_func;$/;"	v	file:
fluid_settings_foreach_iter	fluid_settings.c	/^int fluid_settings_foreach_iter(char* key, void* value, int type, void* data)$/;"	f
fluid_settings_foreach_option	fluid_settings.c	/^void fluid_settings_foreach_option(fluid_settings_t* settings, char* name, void* data,$/;"	f
fluid_settings_foreach_option_t	include/fluidsynth/settings.h	/^typedef void (*fluid_settings_foreach_option_t)(void* data, char* name, char* option);$/;"	t
fluid_settings_foreach_t	include/fluidsynth/settings.h	/^typedef void (*fluid_settings_foreach_t)(void* data, char* s, int type);$/;"	t
fluid_settings_get	fluid_settings.c	/^static int fluid_settings_get(fluid_settings_t* settings,$/;"	f	file:
fluid_settings_get_hints	fluid_settings.c	/^int fluid_settings_get_hints(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_get_type	fluid_settings.c	/^int fluid_settings_get_type(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_getint	fluid_settings.c	/^int fluid_settings_getint(fluid_settings_t* settings, char* name, int* val)$/;"	f
fluid_settings_getint_default	fluid_settings.c	/^fluid_settings_getint_default(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_getint_range	fluid_settings.c	/^void fluid_settings_getint_range(fluid_settings_t* settings, char* name, int* min, int* max)$/;"	f
fluid_settings_getnum	fluid_settings.c	/^int fluid_settings_getnum(fluid_settings_t* settings, char* name, double* val)$/;"	f
fluid_settings_getnum_default	fluid_settings.c	/^fluid_settings_getnum_default(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_getnum_range	fluid_settings.c	/^void fluid_settings_getnum_range(fluid_settings_t* settings, char* name, double* min, double* max)$/;"	f
fluid_settings_getstr	fluid_settings.c	/^int fluid_settings_getstr(fluid_settings_t* settings, char* name, char** str)$/;"	f
fluid_settings_getstr_default	fluid_settings.c	/^fluid_settings_getstr_default(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_hash_delete	fluid_settings.c	/^void fluid_settings_hash_delete(void* value, int type)$/;"	f
fluid_settings_init	fluid_settings.c	/^void fluid_settings_init(fluid_settings_t* settings)$/;"	f
fluid_settings_is_realtime	fluid_settings.c	/^int fluid_settings_is_realtime(fluid_settings_t* settings, char* name)$/;"	f
fluid_settings_register_int	fluid_settings.c	/^int fluid_settings_register_int(fluid_settings_t* settings, char* name, int def,$/;"	f
fluid_settings_register_num	fluid_settings.c	/^int fluid_settings_register_num(fluid_settings_t* settings, char* name, double def,$/;"	f
fluid_settings_register_str	fluid_settings.c	/^int fluid_settings_register_str(fluid_settings_t* settings, char* name, char* def, int hints,$/;"	f
fluid_settings_remove_option	fluid_settings.c	/^int fluid_settings_remove_option(fluid_settings_t* settings, char* name, char* s)$/;"	f
fluid_settings_set	fluid_settings.c	/^static int fluid_settings_set(fluid_settings_t* settings,$/;"	f	file:
fluid_settings_setint	fluid_settings.c	/^int fluid_settings_setint(fluid_settings_t* settings, char* name, int val)$/;"	f
fluid_settings_setnum	fluid_settings.c	/^int fluid_settings_setnum(fluid_settings_t* settings, char* name, double val)$/;"	f
fluid_settings_setstr	fluid_settings.c	/^int fluid_settings_setstr(fluid_settings_t* settings, char* name, char* str)$/;"	f
fluid_settings_str_equal	fluid_settings.c	/^int fluid_settings_str_equal(fluid_settings_t* settings, char* name, char* s)$/;"	f
fluid_settings_t	include/fluidsynth/types.h	/^typedef struct _fluid_hashtable_t fluid_settings_t;$/;"	t	typeref:struct:_fluid_hashtable_t
fluid_settings_tokenize	fluid_settings.c	/^static int fluid_settings_tokenize(char* s, char *buf, char** ptr)$/;"	f	file:
fluid_sfloader_delete	fluid_sfont.h	30;"	d
fluid_sfloader_load	fluid_sfont.h	31;"	d
fluid_sfloader_t	include/fluidsynth/types.h	/^typedef struct _fluid_sfloader_t fluid_sfloader_t;$/;"	t	typeref:struct:_fluid_sfloader_t
fluid_sfont_get_data	fluid_sfont.h	39;"	d
fluid_sfont_get_id	include/fluidsynth/sfont.h	115;"	d
fluid_sfont_get_name	fluid_sfont.h	35;"	d
fluid_sfont_get_preset	fluid_sfont.h	36;"	d
fluid_sfont_iteration_next	fluid_sfont.h	38;"	d
fluid_sfont_iteration_start	fluid_sfont.h	37;"	d
fluid_sfont_set_data	fluid_sfont.h	40;"	d
fluid_sfont_t	include/fluidsynth/types.h	/^typedef struct _fluid_sfont_t fluid_sfont_t;$/;"	t	typeref:struct:_fluid_sfont_t
fluid_shell_init	fluid_cmd.c	/^void fluid_shell_init(fluid_shell_t* shell,$/;"	f
fluid_shell_run	fluid_cmd.c	/^int fluid_shell_run(fluid_shell_t* shell)$/;"	f
fluid_shell_settings	fluid_cmd.c	/^void fluid_shell_settings(fluid_settings_t* settings)$/;"	f
fluid_shell_t	include/fluidsynth/types.h	/^typedef struct _fluid_shell_t fluid_shell_t;$/;"	t	typeref:struct:_fluid_shell_t
fluid_sndmgr_audio_driver_t	fluid_sndmgr.c	/^} fluid_sndmgr_audio_driver_t;$/;"	t	typeref:struct:__anon5	file:
fluid_sndmgr_callback	fluid_sndmgr.c	/^void  pascal fluid_sndmgr_callback(SndChannelPtr chan, SndDoubleBufferPtr doubleBuffer)$/;"	f
fluid_sndmgr_double_to_fix	fluid_sndmgr.c	/^Fixed fluid_sndmgr_double_to_fix(long double theLD) {$/;"	f
fluid_socket_close	fluid_sys.c	/^void fluid_socket_close(fluid_socket_t sock)$/;"	f
fluid_socket_get_istream	fluid_sys.c	/^fluid_istream_t fluid_socket_get_istream(fluid_socket_t sock)$/;"	f
fluid_socket_get_ostream	fluid_sys.c	/^fluid_ostream_t fluid_socket_get_ostream(fluid_socket_t sock)$/;"	f
fluid_socket_read	fluid_sys.c	1430;"	d	file:
fluid_socket_t	fluidsynth_priv.h	/^typedef SOCKET fluid_socket_t;$/;"	t
fluid_socket_t	fluidsynth_priv.h	/^typedef int fluid_socket_t;$/;"	t
fluid_socket_write	fluid_sys.c	1431;"	d	file:
fluid_source	fluid_cmd.c	/^fluid_source(fluid_cmd_handler_t* handler, char* filename)$/;"	f
fluid_status	fluidsynth_priv.h	/^} fluid_status;$/;"	t	typeref:enum:__anon9
fluid_str_hash	fluid_hash.c	/^fluid_str_hash(char* key)$/;"	f
fluid_str_setting_t	fluid_settings.c	/^} fluid_str_setting_t;$/;"	t	typeref:struct:__anon6	file:
fluid_str_update_t	fluid_settings.h	/^typedef int (*fluid_str_update_t)(void* data, char* name, char* value);$/;"	t
fluid_strtok	fluid_sys.c	/^char *fluid_strtok (char **str, char *delim)$/;"	f
fluid_synth_add_sfloader	fluid_synth.c	/^void fluid_synth_add_sfloader(fluid_synth_t* synth, fluid_sfloader_t* loader)$/;"	f
fluid_synth_add_sfont	fluid_synth.c	/^int fluid_synth_add_sfont(fluid_synth_t* synth, fluid_sfont_t* sfont)$/;"	f
fluid_synth_all_notes_off	fluid_synth.c	/^fluid_synth_all_notes_off(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_all_sounds_off	fluid_synth.c	/^fluid_synth_all_sounds_off(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_alloc_voice	fluid_synth.c	/^fluid_synth_alloc_voice(fluid_synth_t* synth, fluid_sample_t* sample, int chan, int key, int vel)$/;"	f
fluid_synth_bank_select	fluid_synth.c	/^int fluid_synth_bank_select(fluid_synth_t* synth, int chan, unsigned int bank)$/;"	f
fluid_synth_cc	fluid_synth.c	/^fluid_synth_cc(fluid_synth_t* synth, int chan, int num, int val)$/;"	f
fluid_synth_channel_pressure	fluid_synth.c	/^fluid_synth_channel_pressure(fluid_synth_t* synth, int chan, int val)$/;"	f
fluid_synth_count_audio_channels	fluid_synth.c	/^fluid_synth_count_audio_channels(fluid_synth_t* synth)$/;"	f
fluid_synth_count_audio_groups	fluid_synth.c	/^fluid_synth_count_audio_groups(fluid_synth_t* synth)$/;"	f
fluid_synth_count_effects_channels	fluid_synth.c	/^fluid_synth_count_effects_channels(fluid_synth_t* synth)$/;"	f
fluid_synth_count_midi_channels	fluid_synth.c	/^fluid_synth_count_midi_channels(fluid_synth_t* synth)$/;"	f
fluid_synth_create_key_tuning	fluid_synth.c	/^int fluid_synth_create_key_tuning(fluid_synth_t* synth,$/;"	f
fluid_synth_create_octave_tuning	fluid_synth.c	/^int fluid_synth_create_octave_tuning(fluid_synth_t* synth,$/;"	f
fluid_synth_create_tuning	fluid_synth.c	/^fluid_synth_create_tuning(fluid_synth_t* synth, int bank, int prog, char* name)$/;"	f	file:
fluid_synth_damp_voices	fluid_synth.c	/^fluid_synth_damp_voices(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_dither_s16	fluid_synth.c	/^fluid_synth_dither_s16(int *dither_index, int len, float* lin, float* rin,$/;"	f
fluid_synth_error	fluid_synth.c	/^fluid_synth_error(fluid_synth_t* synth)$/;"	f
fluid_synth_find_preset	fluid_synth.c	/^fluid_preset_t* fluid_synth_find_preset(fluid_synth_t* synth,$/;"	f
fluid_synth_free_voice_by_kill	fluid_synth.c	/^fluid_synth_free_voice_by_kill(fluid_synth_t* synth)$/;"	f
fluid_synth_get_bank_offset	fluid_synth.c	/^fluid_synth_get_bank_offset(fluid_synth_t* synth, int sfont_id)$/;"	f
fluid_synth_get_bank_offset0	fluid_synth.c	/^fluid_synth_get_bank_offset0(fluid_synth_t* synth, int sfont_id)$/;"	f
fluid_synth_get_cc	fluid_synth.c	/^fluid_synth_get_cc(fluid_synth_t* synth, int chan, int num, int* pval)$/;"	f
fluid_synth_get_channel_preset	fluid_synth.c	/^fluid_synth_get_channel_preset(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_get_chorus_depth_ms	fluid_synth.c	/^double fluid_synth_get_chorus_depth_ms(fluid_synth_t* synth)$/;"	f
fluid_synth_get_chorus_level	fluid_synth.c	/^double fluid_synth_get_chorus_level(fluid_synth_t* synth)$/;"	f
fluid_synth_get_chorus_nr	fluid_synth.c	/^int fluid_synth_get_chorus_nr(fluid_synth_t* synth)$/;"	f
fluid_synth_get_chorus_speed_Hz	fluid_synth.c	/^double fluid_synth_get_chorus_speed_Hz(fluid_synth_t* synth)$/;"	f
fluid_synth_get_chorus_type	fluid_synth.c	/^int fluid_synth_get_chorus_type(fluid_synth_t* synth)$/;"	f
fluid_synth_get_cpu_load	fluid_synth.c	/^double fluid_synth_get_cpu_load(fluid_synth_t* synth)$/;"	f
fluid_synth_get_gain	fluid_synth.c	/^float fluid_synth_get_gain(fluid_synth_t* synth)$/;"	f
fluid_synth_get_gen	fluid_synth.c	/^float fluid_synth_get_gen(fluid_synth_t* synth, int chan, int param)$/;"	f
fluid_synth_get_internal_bufsize	fluid_synth.c	/^int fluid_synth_get_internal_bufsize(fluid_synth_t* synth)$/;"	f
fluid_synth_get_pitch_bend	fluid_synth.c	/^fluid_synth_get_pitch_bend(fluid_synth_t* synth, int chan, int* ppitch_bend)$/;"	f
fluid_synth_get_pitch_wheel_sens	fluid_synth.c	/^fluid_synth_get_pitch_wheel_sens(fluid_synth_t* synth, int chan, int* pval)$/;"	f
fluid_synth_get_polyphony	fluid_synth.c	/^int fluid_synth_get_polyphony(fluid_synth_t* synth)$/;"	f
fluid_synth_get_preset	fluid_synth.c	/^fluid_synth_get_preset(fluid_synth_t* synth, unsigned int sfontnum,$/;"	f
fluid_synth_get_preset2	fluid_synth.c	/^fluid_synth_get_preset2(fluid_synth_t* synth, char* sfont_name,$/;"	f
fluid_synth_get_program	fluid_synth.c	/^fluid_synth_get_program(fluid_synth_t* synth, int chan,$/;"	f
fluid_synth_get_reverb_damp	fluid_synth.c	/^double fluid_synth_get_reverb_damp(fluid_synth_t* synth)$/;"	f
fluid_synth_get_reverb_level	fluid_synth.c	/^double fluid_synth_get_reverb_level(fluid_synth_t* synth)$/;"	f
fluid_synth_get_reverb_roomsize	fluid_synth.c	/^double fluid_synth_get_reverb_roomsize(fluid_synth_t* synth)$/;"	f
fluid_synth_get_reverb_width	fluid_synth.c	/^double fluid_synth_get_reverb_width(fluid_synth_t* synth)$/;"	f
fluid_synth_get_settings	fluid_synth.c	/^fluid_settings_t* fluid_synth_get_settings(fluid_synth_t* synth)$/;"	f
fluid_synth_get_sfont	fluid_synth.c	/^fluid_synth_get_sfont(fluid_synth_t* synth, unsigned int num)$/;"	f
fluid_synth_get_sfont_by_id	fluid_synth.c	/^fluid_sfont_t* fluid_synth_get_sfont_by_id(fluid_synth_t* synth, unsigned int id)$/;"	f
fluid_synth_get_sfont_by_name	fluid_synth.c	/^fluid_sfont_t* fluid_synth_get_sfont_by_name(fluid_synth_t* synth, char *name)$/;"	f
fluid_synth_get_tuning	fluid_synth.c	/^fluid_synth_get_tuning(fluid_synth_t* synth, int bank, int prog)$/;"	f	file:
fluid_synth_get_voicelist	fluid_synth.c	/^fluid_synth_get_voicelist(fluid_synth_t* synth, fluid_voice_t* buf[], int bufsize, int ID)$/;"	f
fluid_synth_getint	fluid_synth.c	/^int fluid_synth_getint(fluid_synth_t* synth, char* name, int* val)$/;"	f
fluid_synth_getnum	fluid_synth.c	/^int fluid_synth_getnum(fluid_synth_t* synth, char* name, double* val)$/;"	f
fluid_synth_getstr	fluid_synth.c	/^int fluid_synth_getstr(fluid_synth_t* synth, char* name, char** str)$/;"	f
fluid_synth_handle_midi_event	fluid_synth.c	/^int fluid_synth_handle_midi_event(void* data, fluid_midi_event_t* event)$/;"	f
fluid_synth_init	fluid_synth.c	/^fluid_synth_init()$/;"	f	file:
fluid_synth_initialized	fluid_synth.c	/^static int fluid_synth_initialized = 0;$/;"	v	file:
fluid_synth_kill_by_exclusive_class	fluid_synth.c	/^void fluid_synth_kill_by_exclusive_class(fluid_synth_t* synth, fluid_voice_t* new_voice)$/;"	f
fluid_synth_modulate_voices	fluid_synth.c	/^fluid_synth_modulate_voices(fluid_synth_t* synth, int chan, int is_cc, int ctrl)$/;"	f
fluid_synth_modulate_voices_all	fluid_synth.c	/^fluid_synth_modulate_voices_all(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_noteoff	fluid_synth.c	/^fluid_synth_noteoff(fluid_synth_t* synth, int chan, int key)$/;"	f
fluid_synth_noteon	fluid_synth.c	/^fluid_synth_noteon(fluid_synth_t* synth, int chan, int key, int vel)$/;"	f
fluid_synth_nwrite_float	fluid_synth.c	/^fluid_synth_nwrite_float(fluid_synth_t* synth, int len,$/;"	f
fluid_synth_one_block	fluid_synth.c	/^fluid_synth_one_block(fluid_synth_t* synth, int do_not_mix_fx_to_out)$/;"	f
fluid_synth_pitch_bend	fluid_synth.c	/^fluid_synth_pitch_bend(fluid_synth_t* synth, int chan, int val)$/;"	f
fluid_synth_pitch_wheel_sens	fluid_synth.c	/^fluid_synth_pitch_wheel_sens(fluid_synth_t* synth, int chan, int val)$/;"	f
fluid_synth_process	fluid_synth.c	/^int fluid_synth_process(fluid_synth_t* synth, int len,$/;"	f
fluid_synth_program_change	fluid_synth.c	/^fluid_synth_program_change(fluid_synth_t* synth, int chan, int prognum)$/;"	f
fluid_synth_program_reset	fluid_synth.c	/^fluid_synth_program_reset(fluid_synth_t* synth)$/;"	f
fluid_synth_program_select	fluid_synth.c	/^int fluid_synth_program_select(fluid_synth_t* synth,$/;"	f
fluid_synth_program_select2	fluid_synth.c	/^int fluid_synth_program_select2(fluid_synth_t* synth,$/;"	f
fluid_synth_release_voice_on_same_note	fluid_synth.c	/^void fluid_synth_release_voice_on_same_note(fluid_synth_t* synth, int chan, int key){$/;"	f
fluid_synth_remove_bank_offset	fluid_synth.c	/^fluid_synth_remove_bank_offset(fluid_synth_t* synth, int sfont_id)$/;"	f
fluid_synth_remove_sfont	fluid_synth.c	/^void fluid_synth_remove_sfont(fluid_synth_t* synth, fluid_sfont_t* sfont)$/;"	f
fluid_synth_reset_tuning	fluid_synth.c	/^int fluid_synth_reset_tuning(fluid_synth_t* synth, int chan)$/;"	f
fluid_synth_select_tuning	fluid_synth.c	/^int fluid_synth_select_tuning(fluid_synth_t* synth, int chan,$/;"	f
fluid_synth_set_bank_offset	fluid_synth.c	/^fluid_synth_set_bank_offset(fluid_synth_t* synth, int sfont_id, int offset)$/;"	f
fluid_synth_set_chorus	fluid_synth.c	/^void fluid_synth_set_chorus(fluid_synth_t* synth, int nr, double level,$/;"	f
fluid_synth_set_chorus_on	fluid_synth.c	/^void fluid_synth_set_chorus_on(fluid_synth_t* synth, int on)$/;"	f
fluid_synth_set_gain	fluid_synth.c	/^void fluid_synth_set_gain(fluid_synth_t* synth, float gain)$/;"	f
fluid_synth_set_gen	fluid_synth.c	/^fluid_synth_set_gen(fluid_synth_t* synth, int chan, int param, float value)$/;"	f
fluid_synth_set_gen2	fluid_synth.c	/^fluid_synth_set_gen2(fluid_synth_t* synth, int chan, int param,$/;"	f
fluid_synth_set_interp_method	fluid_synth.c	/^int fluid_synth_set_interp_method(fluid_synth_t* synth, int chan, int interp_method){$/;"	f
fluid_synth_set_midi_router	fluid_synth.c	/^void fluid_synth_set_midi_router(fluid_synth_t* synth, fluid_midi_router_t* router){$/;"	f
fluid_synth_set_polyphony	fluid_synth.c	/^int fluid_synth_set_polyphony(fluid_synth_t* synth, int polyphony)$/;"	f
fluid_synth_set_reverb	fluid_synth.c	/^void fluid_synth_set_reverb(fluid_synth_t* synth, double roomsize, double damping,$/;"	f
fluid_synth_set_reverb_on	fluid_synth.c	/^void fluid_synth_set_reverb_on(fluid_synth_t* synth, int on)$/;"	f
fluid_synth_set_reverb_preset	fluid_synth.c	/^int fluid_synth_set_reverb_preset(fluid_synth_t* synth, int num)$/;"	f
fluid_synth_setint	fluid_synth.c	/^int fluid_synth_setint(fluid_synth_t* synth, char* name, int val)$/;"	f
fluid_synth_setnum	fluid_synth.c	/^int fluid_synth_setnum(fluid_synth_t* synth, char* name, double val)$/;"	f
fluid_synth_setstr	fluid_synth.c	/^int fluid_synth_setstr(fluid_synth_t* synth, char* name, char* str)$/;"	f
fluid_synth_settings	fluid_synth.c	/^void fluid_synth_settings(fluid_settings_t* settings)$/;"	f
fluid_synth_sfcount	fluid_synth.c	/^fluid_synth_sfcount(fluid_synth_t* synth)$/;"	f
fluid_synth_sfload	fluid_synth.c	/^fluid_synth_sfload(fluid_synth_t* synth, const char* filename, int reset_presets)$/;"	f
fluid_synth_sfont_select	fluid_synth.c	/^int fluid_synth_sfont_select(fluid_synth_t* synth, int chan, unsigned int sfont_id)$/;"	f
fluid_synth_sfreload	fluid_synth.c	/^int fluid_synth_sfreload(fluid_synth_t* synth, unsigned int id)$/;"	f
fluid_synth_sfunload	fluid_synth.c	/^fluid_synth_sfunload(fluid_synth_t* synth, unsigned int id, int reset_presets)$/;"	f
fluid_synth_sfunload_callback	fluid_synth.c	/^static int fluid_synth_sfunload_callback(void* data, unsigned int msec)$/;"	f	file:
fluid_synth_sfunload_macos9	fluid_synth.c	/^void fluid_synth_sfunload_macos9(fluid_synth_t* synth)$/;"	f
fluid_synth_start	fluid_synth.c	/^int fluid_synth_start(fluid_synth_t* synth, unsigned int id, fluid_preset_t* preset,$/;"	f
fluid_synth_start_voice	fluid_synth.c	/^void fluid_synth_start_voice(fluid_synth_t* synth, fluid_voice_t* voice)$/;"	f
fluid_synth_status	fluid_synth.h	/^enum fluid_synth_status$/;"	g
fluid_synth_stop	fluid_synth.c	/^int fluid_synth_stop(fluid_synth_t* synth, unsigned int id)$/;"	f
fluid_synth_system_reset	fluid_synth.c	/^fluid_synth_system_reset(fluid_synth_t* synth)$/;"	f
fluid_synth_t	include/fluidsynth/types.h	/^typedef struct _fluid_synth_t fluid_synth_t;$/;"	t	typeref:struct:_fluid_synth_t
fluid_synth_tune_notes	fluid_synth.c	/^int fluid_synth_tune_notes(fluid_synth_t* synth, int bank, int prog,$/;"	f
fluid_synth_tuning_dump	fluid_synth.c	/^int fluid_synth_tuning_dump(fluid_synth_t* synth, int bank, int prog,$/;"	f
fluid_synth_tuning_iteration_next	fluid_synth.c	/^int fluid_synth_tuning_iteration_next(fluid_synth_t* synth, int* bank, int* prog)$/;"	f
fluid_synth_tuning_iteration_start	fluid_synth.c	/^void fluid_synth_tuning_iteration_start(fluid_synth_t* synth)$/;"	f
fluid_synth_update_gain	fluid_synth.c	/^int fluid_synth_update_gain(fluid_synth_t* synth, char* name, double value)$/;"	f
fluid_synth_update_polyphony	fluid_synth.c	/^int fluid_synth_update_polyphony(fluid_synth_t* synth, char* name, int value)$/;"	f
fluid_synth_update_presets	fluid_synth.c	/^void fluid_synth_update_presets(fluid_synth_t* synth)$/;"	f
fluid_synth_verify_settings	fluid_synth.c	/^int fluid_synth_verify_settings(fluid_settings_t *settings)$/;"	f
fluid_synth_write_float	fluid_synth.c	/^fluid_synth_write_float(fluid_synth_t* synth, int len,$/;"	f
fluid_synth_write_s16	fluid_synth.c	/^fluid_synth_write_s16(fluid_synth_t* synth, int len,$/;"	f
fluid_sys_config	fluid_sys.c	/^void fluid_sys_config()$/;"	f
fluid_tc2sec	fluid_conv.c	/^fluid_tc2sec(fluid_real_t tc)$/;"	f
fluid_tc2sec_attack	fluid_conv.c	/^fluid_tc2sec_attack(fluid_real_t tc)$/;"	f
fluid_tc2sec_delay	fluid_conv.c	/^fluid_tc2sec_delay(fluid_real_t tc)$/;"	f
fluid_tc2sec_release	fluid_conv.c	/^fluid_tc2sec_release(fluid_real_t tc)$/;"	f
fluid_thread_func_t	fluid_sys.h	/^typedef void (*fluid_thread_func_t)(void* data);$/;"	t
fluid_thread_join	fluid_sys.c	/^int fluid_thread_join(fluid_thread_t* thread) { return 0; }$/;"	f
fluid_thread_join	fluid_sys.c	/^int fluid_thread_join(fluid_thread_t* thread)$/;"	f
fluid_thread_start	fluid_sys.c	/^static DWORD WINAPI fluid_thread_start(LPVOID data)$/;"	f	file:
fluid_thread_start	fluid_sys.c	/^static void fluid_thread_start(void *data)$/;"	f	file:
fluid_thread_start	fluid_sys.c	/^static void* fluid_thread_start(void *data)$/;"	f	file:
fluid_thread_t	fluid_sys.h	/^typedef struct _fluid_thread_t fluid_thread_t;$/;"	t	typeref:struct:_fluid_thread_t
fluid_time_config	fluid_sys.c	/^void fluid_time_config(void)$/;"	f
fluid_timer_callback_t	fluid_sys.h	/^typedef int (*fluid_timer_callback_t)(void* data, unsigned int msec);$/;"	t
fluid_timer_count	fluid_sys.c	/^static int fluid_timer_count = 0;$/;"	v	file:
fluid_timer_join	fluid_sys.c	/^fluid_timer_join(fluid_timer_t* timer)$/;"	f
fluid_timer_run	fluid_sys.c	/^fluid_timer_run(LPVOID data)$/;"	f
fluid_timer_run	fluid_sys.c	/^fluid_timer_run(void *data)$/;"	f
fluid_timer_start	fluid_sys.c	/^fluid_timer_start(void *data)$/;"	f
fluid_timer_t	fluid_sys.h	/^typedef struct _fluid_timer_t fluid_timer_t;$/;"	t	typeref:struct:_fluid_timer_t
fluid_track_add_event	fluid_midi.c	/^int fluid_track_add_event(fluid_track_t* track, fluid_midi_event_t* evt)$/;"	f
fluid_track_count_events	fluid_midi.c	/^int fluid_track_count_events(fluid_track_t* track, int* on, int* off)$/;"	f
fluid_track_eot	fluid_midi.h	240;"	d
fluid_track_first_event	fluid_midi.c	/^fluid_midi_event_t* fluid_track_first_event(fluid_track_t* track)$/;"	f
fluid_track_get_duration	fluid_midi.c	/^int fluid_track_get_duration(fluid_track_t* track)$/;"	f
fluid_track_get_name	fluid_midi.c	/^char* fluid_track_get_name(fluid_track_t* track)$/;"	f
fluid_track_next_event	fluid_midi.c	/^fluid_midi_event_t* fluid_track_next_event(fluid_track_t* track)$/;"	f
fluid_track_reset	fluid_midi.c	/^fluid_track_reset(fluid_track_t* track)$/;"	f
fluid_track_send_events	fluid_midi.c	/^fluid_track_send_events(fluid_track_t* track,$/;"	f
fluid_track_set_name	fluid_midi.c	/^int fluid_track_set_name(fluid_track_t* track, char* name)$/;"	f
fluid_track_t	fluid_midi.h	/^typedef struct _fluid_track_t fluid_track_t;$/;"	t	typeref:struct:_fluid_track_t
fluid_tuning_get_all	fluid_tuning.h	59;"	d
fluid_tuning_get_bank	fluid_tuning.h	50;"	d
fluid_tuning_get_name	fluid_tuning.c	/^char* fluid_tuning_get_name(fluid_tuning_t* tuning)$/;"	f
fluid_tuning_get_pitch	fluid_tuning.h	54;"	d
fluid_tuning_get_prog	fluid_tuning.h	51;"	d
fluid_tuning_set_all	fluid_tuning.c	/^void fluid_tuning_set_all(fluid_tuning_t* tuning, double* pitch)$/;"	f
fluid_tuning_set_key	fluid_tuning.c	/^void fluid_tuning_set_key(fluid_tuning_t* tuning, int key, double pitch)$/;"	f
fluid_tuning_set_name	fluid_tuning.c	/^void fluid_tuning_set_name(fluid_tuning_t* tuning, char* name)$/;"	f
fluid_tuning_set_octave	fluid_tuning.c	/^void fluid_tuning_set_octave(fluid_tuning_t* tuning, double* pitch_deriv)$/;"	f
fluid_tuning_set_pitch	fluid_tuning.c	/^void fluid_tuning_set_pitch(fluid_tuning_t* tuning, int key, double pitch)$/;"	f
fluid_tuning_t	fluidsynth_priv.h	/^typedef struct _fluid_tuning_t fluid_tuning_t;$/;"	t	typeref:struct:_fluid_tuning_t
fluid_types_enum	include/fluidsynth/settings.h	/^enum fluid_types_enum {$/;"	g
fluid_usershell	fluid_cmd.c	/^fluid_usershell(fluid_settings_t* settings, fluid_cmd_handler_t* handler)$/;"	f
fluid_utime	fluid_sys.c	/^double fluid_utime(void)$/;"	f
fluid_utime	fluid_sys.h	91;"	d
fluid_version	fluid_synth.c	/^void fluid_version(int *major, int *minor, int *micro)$/;"	f
fluid_version_str	fluid_synth.c	/^char* fluid_version_str(void)$/;"	f
fluid_voice_add_mod	fluid_voice.c	/^fluid_voice_add_mod(fluid_voice_t* voice, fluid_mod_t* mod, int mode)$/;"	f
fluid_voice_add_mod	include/fluidsynth/voice.h	/^enum fluid_voice_add_mod{$/;"	g
fluid_voice_calculate_runtime_synthesis_parameters	fluid_voice.c	/^fluid_voice_calculate_runtime_synthesis_parameters(fluid_voice_t* voice)$/;"	f
fluid_voice_check_sample_sanity	fluid_voice.c	/^void fluid_voice_check_sample_sanity(fluid_voice_t* voice)$/;"	f
fluid_voice_effects	fluid_voice.c	/^fluid_voice_effects (fluid_voice_t *voice, int count,$/;"	f	file:
fluid_voice_envelope_index_t	fluid_voice.h	/^enum fluid_voice_envelope_index_t{$/;"	g
fluid_voice_gen_get	fluid_voice.c	/^float fluid_voice_gen_get(fluid_voice_t* voice, int gen)$/;"	f
fluid_voice_gen_incr	fluid_voice.c	/^void fluid_voice_gen_incr(fluid_voice_t* voice, int i, float val)$/;"	f
fluid_voice_gen_set	fluid_voice.c	/^void fluid_voice_gen_set(fluid_voice_t* voice, int i, float val)$/;"	f
fluid_voice_gen_value	fluid_voice.c	/^fluid_real_t fluid_voice_gen_value(fluid_voice_t* voice, int num)$/;"	f
fluid_voice_get_chan	fluid_voice.h	257;"	d
fluid_voice_get_channel	fluid_voice.c	/^fluid_voice_get_channel(fluid_voice_t* voice)$/;"	f
fluid_voice_get_id	fluid_voice.c	/^unsigned int fluid_voice_get_id(fluid_voice_t* voice)$/;"	f
fluid_voice_get_lower_boundary_for_attenuation	fluid_voice.c	/^fluid_real_t fluid_voice_get_lower_boundary_for_attenuation(fluid_voice_t* voice)$/;"	f
fluid_voice_init	fluid_voice.c	/^fluid_voice_init(fluid_voice_t* voice, fluid_sample_t* sample,$/;"	f
fluid_voice_is_playing	fluid_voice.c	/^int fluid_voice_is_playing(fluid_voice_t* voice)$/;"	f
fluid_voice_kill_excl	fluid_voice.c	/^fluid_voice_kill_excl(fluid_voice_t* voice){$/;"	f
fluid_voice_modulate	fluid_voice.c	/^int fluid_voice_modulate(fluid_voice_t* voice, int cc, int ctrl)$/;"	f
fluid_voice_modulate_all	fluid_voice.c	/^int fluid_voice_modulate_all(fluid_voice_t* voice)$/;"	f
fluid_voice_noteoff	fluid_voice.c	/^fluid_voice_noteoff(fluid_voice_t* voice)$/;"	f
fluid_voice_off	fluid_voice.c	/^fluid_voice_off(fluid_voice_t* voice)$/;"	f
fluid_voice_optimize_sample	fluid_voice.c	/^int fluid_voice_optimize_sample(fluid_sample_t* s)$/;"	f
fluid_voice_set_gain	fluid_voice.c	/^int fluid_voice_set_gain(fluid_voice_t* voice, fluid_real_t gain)$/;"	f
fluid_voice_set_id	fluid_voice.h	256;"	d
fluid_voice_set_param	fluid_voice.c	/^int fluid_voice_set_param(fluid_voice_t* voice, int gen, fluid_real_t nrpn_value, int abs)$/;"	f
fluid_voice_start	fluid_voice.c	/^void fluid_voice_start(fluid_voice_t* voice)$/;"	f
fluid_voice_status	fluid_voice.h	/^enum fluid_voice_status$/;"	g
fluid_voice_t	include/fluidsynth/types.h	/^typedef struct _fluid_voice_t fluid_voice_t;$/;"	t	typeref:struct:_fluid_voice_t
fluid_voice_update_param	fluid_voice.c	/^fluid_voice_update_param(fluid_voice_t* voice, int gen)$/;"	f
fluid_voice_write	fluid_voice.c	/^fluid_voice_write(fluid_voice_t* voice,$/;"	f
fluid_win32_create_window	fluid_dll.c	/^int fluid_win32_create_window(void)$/;"	f
fluid_win32_error	fluid_dsound.c	/^char* fluid_win32_error(HRESULT hr) {$/;"	f
fluid_win32_get_window	fluid_dll.c	/^HWND fluid_win32_get_window(void)$/;"	f
fluid_win32_wndproc	fluid_dll.c	/^static long FAR PASCAL fluid_win32_wndproc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	file:
fluid_winmidi_callback	fluid_winmidi.c	/^fluid_winmidi_callback(HMIDIIN hmi, UINT wMsg, DWORD dwInstance, DWORD msg, DWORD extra)$/;"	f
fluid_winmidi_driver_status	fluid_winmidi.c	/^fluid_winmidi_driver_status(fluid_midi_driver_t* p)$/;"	f
fluid_winmidi_driver_t	fluid_winmidi.c	/^} fluid_winmidi_driver_t;$/;"	t	typeref:struct:__anon1	file:
fluid_winmidi_error_buffer	fluid_winmidi.c	/^static char fluid_winmidi_error_buffer[256];$/;"	v	file:
fluid_winmidi_input_error	fluid_winmidi.c	/^fluid_winmidi_input_error(int no)$/;"	f	file:
fluid_winmidi_midi_driver_settings	fluid_winmidi.c	/^void fluid_winmidi_midi_driver_settings(fluid_settings_t* settings)$/;"	f
fluid_wnd	fluid_dll.c	/^static HWND fluid_wnd = NULL;$/;"	v	file:
fname	fluid_defsfont.h	/^  char *fname;			\/* file name *\/$/;"	m	struct:_SFData
format	fluid_alsa.c	/^  snd_pcm_format_t format;$/;"	m	struct:fluid_alsa_formats_t	file:
format	fluid_coreaudio.c	/^  AudioStreamBasicDescription format;$/;"	m	struct:__anon27	file:
format	fluid_dsound.c	/^  WAVEFORMATEX* format;$/;"	m	struct:__anon15	file:
format	fluid_oss.c	/^  int format;$/;"	m	struct:__anon23	file:
formats	fluid_oss.c	/^  int formats;$/;"	m	struct:__anon23	file:
fp	fluid_midi.h	/^  fluid_file fp;$/;"	m	struct:__anon25
frame_size	fluid_dart.c	/^    int frame_size;$/;"	m	struct:__anon10	file:
frame_size	fluid_dsound.c	/^  DWORD frame_size;$/;"	m	struct:__anon15	file:
free	fluid_adriver.c	/^  int (*free)(fluid_audio_driver_t* driver);$/;"	m	struct:_fluid_audriver_definition_t	file:
free	fluid_mdriver.c	/^  int (*free)(fluid_midi_driver_t* p);$/;"	m	struct:fluid_mdriver_definition_t	file:
free	include/fluidsynth/sfont.h	/^  int (*free)(fluid_preset_t* preset);$/;"	m	struct:_fluid_preset_t
free	include/fluidsynth/sfont.h	/^  int (*free)(fluid_sfloader_t* loader);$/;"	m	struct:_fluid_sfloader_t
free	include/fluidsynth/sfont.h	/^  int (*free)(fluid_sfont_t* sfont);$/;"	m	struct:_fluid_sfont_t
freelist	fluid_event_priv.h	/^  fluid_evt_entry* freelist;$/;"	m	struct:_fluid_evt_heap_t
fres	fluid_voice.h	/^	fluid_real_t fres;              \/* the resonance frequency, in cents (not absolute cents) *\/$/;"	m	struct:_fluid_voice_t
func	fluid_sys.c	/^  fluid_server_func_t func;$/;"	m	struct:_fluid_server_socket_t	file:
func	fluid_sys.c	/^  fluid_thread_func_t func;$/;"	m	struct:_fluid_thread_t	file:
fx_left_buf	fluid_synth.h	/^  fluid_real_t** fx_left_buf;$/;"	m	struct:_fluid_synth_t
fx_right_buf	fluid_synth.h	/^  fluid_real_t** fx_right_buf;$/;"	m	struct:_fluid_synth_t
gain	fluid_rev.c	/^  fluid_real_t gain;$/;"	m	struct:_fluid_revmodel_t	file:
gain	fluid_synth.h	/^  double gain;                        \/** master gain *\/$/;"	m	struct:_fluid_synth_t
gen	fluid_chan.h	/^  fluid_real_t gen[GEN_LAST];$/;"	m	struct:_fluid_channel_t
gen	fluid_defsfont.h	/^  fluid_gen_t gen[GEN_LAST];$/;"	m	struct:_fluid_inst_zone_t
gen	fluid_defsfont.h	/^  fluid_gen_t gen[GEN_LAST];$/;"	m	struct:_fluid_preset_zone_t
gen	fluid_defsfont.h	/^  fluid_list_t *gen;			\/* list of generators *\/$/;"	m	struct:_SFZone
gen	fluid_voice.h	/^	fluid_gen_t gen[GEN_LAST];$/;"	m	struct:_fluid_voice_t
gen_abs	fluid_chan.h	/^  char gen_abs[GEN_LAST];$/;"	m	struct:_fluid_channel_t
gen_inlist	fluid_defsfont.c	/^gen_inlist (int gen, fluid_list_t * genlist)$/;"	f
gen_valid	fluid_defsfont.c	/^gen_valid (int gen)$/;"	f
gen_validp	fluid_defsfont.c	/^gen_validp (int gen)$/;"	f
genndx	fluid_defsfont.h	/^  unsigned short genndx;		\/* index into generator list *\/$/;"	m	struct:_SFBag
genre	fluid_defsfont.h	/^  unsigned int genre;		\/* Not used (preserved) *\/$/;"	m	struct:_SFPreset
genre	fluid_defsfont.h	/^  unsigned int genre;		\/* Not used *\/$/;"	m	struct:_SFPhdr
gerr	fluid_defsfont.c	/^gerr (int ev, char * fmt, ...)$/;"	f
get_banknum	include/fluidsynth/sfont.h	/^  int (*get_banknum)(fluid_preset_t* preset);$/;"	m	struct:_fluid_preset_t
get_name	include/fluidsynth/sfont.h	/^  char* (*get_name)(fluid_preset_t* preset);$/;"	m	struct:_fluid_preset_t
get_name	include/fluidsynth/sfont.h	/^  char* (*get_name)(fluid_sfont_t* sfont);$/;"	m	struct:_fluid_sfont_t
get_num	include/fluidsynth/sfont.h	/^  int (*get_num)(fluid_preset_t* preset);$/;"	m	struct:_fluid_preset_t
get_preset	include/fluidsynth/sfont.h	/^  fluid_preset_t* (*get_preset)(fluid_sfont_t* sfont, unsigned int bank, unsigned int prenum);$/;"	m	struct:_fluid_sfont_t
global_zone	fluid_defsfont.h	/^  fluid_inst_zone_t* global_zone;$/;"	m	struct:_fluid_inst_t
global_zone	fluid_defsfont.h	/^  fluid_preset_zone_t* global_zone;        \/* the global zone of the preset *\/$/;"	m	struct:_fluid_defpreset_t
global_zone	fluid_ramsfont.h	/^  fluid_preset_zone_t* global_zone;        \/* the global zone of the preset *\/$/;"	m	struct:_fluid_rampreset_t
handle_midi_event_func_t	include/fluidsynth/midi.h	/^typedef int (*handle_midi_event_func_t)(void* data, fluid_midi_event_t* event);$/;"	t
handle_signal	fluidsynth.c	/^void handle_signal(int sig_num)$/;"	f
handler	fluid_cmd.c	/^  fluid_cmd_handler_t* handler;$/;"	m	struct:_fluid_client_t	file:
handler	fluid_cmd.c	/^  fluid_cmd_handler_t* handler;$/;"	m	struct:_fluid_shell_t	file:
handler	fluid_mdriver.h	/^  handle_midi_event_func_t handler;$/;"	m	struct:_fluid_midi_driver_t
handler	include/fluidsynth/shell.h	/^  fluid_cmd_func_t handler;              \/** Pointer to the handler for this command *\/$/;"	m	struct:__anon3
has_looped	fluid_voice.h	/^	int has_looped;                 \/* Flag that is set as soon as the first loop is completed. *\/$/;"	m	struct:_fluid_voice_t
heap	fluid_seq.c	/^	fluid_evt_heap_t* heap;$/;"	m	struct:_fluid_sequencer_t	file:
help	include/fluidsynth/shell.h	/^  char* help;                           \/** A help string *\/$/;"	m	struct:__anon3
hi	fluid_defsfont.h	/^    unsigned char hi;			\/* high value for ranges *\/$/;"	m	struct:_SFGenAmount::__anon17
hints	fluid_settings.c	/^  int hints;$/;"	m	struct:__anon6	file:
hints	fluid_settings.c	/^  int hints;$/;"	m	struct:__anon7	file:
hints	fluid_settings.c	/^  int hints;$/;"	m	struct:__anon8	file:
hist1	fluid_voice.h	/^	fluid_real_t hist1, hist2;      \/* Sample history for the IIR filter *\/$/;"	m	struct:_fluid_voice_t
hist2	fluid_voice.h	/^	fluid_real_t hist1, hist2;      \/* Sample history for the IIR filter *\/$/;"	m	struct:_fluid_voice_t
hmidiin	fluid_winmidi.c	/^  HMIDIIN hmidiin;$/;"	m	struct:__anon1	file:
ibagndx	fluid_defsfont.h	/^  unsigned short ibagndx;		\/* Instrument bag index *\/$/;"	m	struct:_SFIhdr
id	fluid_coreaudio.c	/^  AudioDeviceID id;$/;"	m	struct:__anon27	file:
id	fluid_defsfont.h	/^  unsigned int id;			\/* chunk id *\/$/;"	m	struct:_SFChunk
id	fluid_defsfont.h	/^  unsigned short id;			\/* generator ID *\/$/;"	m	struct:_SFGen
id	fluid_event_priv.h	/^	short id; \/\/?? unused ?$/;"	m	struct:_fluid_event_t
id	fluid_seq.c	/^	short id;$/;"	m	struct:_fluid_sequencer_client_t	file:
id	fluid_voice.h	/^	unsigned int id;                \/* the id is incremented for every new noteon.$/;"	m	struct:_fluid_voice_t
id	include/fluidsynth/sfont.h	/^  unsigned int id;$/;"	m	struct:_fluid_sfont_t
idlist	fluid_defsfont.c	/^char idlist[] = {$/;"	v
in	fluid_cmd.c	/^  fluid_istream_t in;$/;"	m	struct:_fluid_shell_t	file:
incr	fluid_voice.h	/^	fluid_real_t incr;$/;"	m	struct:_fluid_env_data_t
info	fluid_defsfont.h	/^  fluid_list_t *info;		     \/* linked list of info strings (1st byte is ID) *\/$/;"	m	struct:_SFData
init	fluid_gen.h	/^	char init;		\/* Does the generator need to be initialized (cfr. fluid_voice_init()) *\/$/;"	m	struct:_fluid_gen_info_t
init_dither	fluid_synth.c	/^static void init_dither(void)$/;"	f	file:
initialdamp	fluid_rev.c	234;"	d	file:
initialdry	fluid_rev.c	236;"	d	file:
initialroom	fluid_rev.c	233;"	d	file:
initialwet	fluid_rev.c	235;"	d	file:
initialwidth	fluid_rev.c	237;"	d	file:
inline	config_win32.h	39;"	d
inst	fluid_defsfont.h	/^  fluid_inst_t* inst;$/;"	m	struct:_fluid_preset_zone_t
inst	fluid_defsfont.h	/^  fluid_list_t *inst;			\/* linked list of instrument info *\/$/;"	m	struct:_SFData
instsamp	fluid_defsfont.h	/^  fluid_list_t *instsamp;		\/* instrument\/sample pointer for zone *\/$/;"	m	struct:_SFZone
interp	fluid_synth.h	/^  int interp;                     \/** default interpolation type *\/$/;"	m	struct:_fluid_synth_t
interp_coeff	fluid_dsp_float.c	/^static fluid_real_t interp_coeff[FLUID_INTERP_MAX][4];$/;"	v	file:
interp_coeff_linear	fluid_dsp_float.c	/^static fluid_real_t interp_coeff_linear[FLUID_INTERP_MAX][2];$/;"	v	file:
interp_method	fluid_chan.h	/^  int interp_method;$/;"	m	struct:_fluid_channel_t
interp_method	fluid_voice.h	/^	int interp_method;$/;"	m	struct:_fluid_voice_t
isInstalled	fluid_sys.c	/^  int isInstalled;$/;"	m	struct:_fluid_timer_t	file:
iter_cur	fluid_defsfont.h	/^  fluid_defpreset_t* iter_cur;       \/* the current preset in the iteration *\/$/;"	m	struct:_fluid_defsfont_t
iter_cur	fluid_ramsfont.h	/^  fluid_rampreset_t* iter_cur;       \/* the current preset in the iteration *\/$/;"	m	struct:_fluid_ramsfont_t
iter_preset	fluid_defsfont.h	/^  fluid_preset_t iter_preset;        \/* preset interface used in the iteration *\/$/;"	m	struct:_fluid_defsfont_t
iter_preset	fluid_ramsfont.h	/^  fluid_preset_t iter_preset;        \/* preset interface used in the iteration *\/$/;"	m	struct:_fluid_ramsfont_t
iteration_next	include/fluidsynth/sfont.h	/^  int (*iteration_next)(fluid_sfont_t* sfont, fluid_preset_t* preset);$/;"	m	struct:_fluid_sfont_t
iteration_start	include/fluidsynth/sfont.h	/^  void (*iteration_start)(fluid_sfont_t* sfont);$/;"	m	struct:_fluid_sfont_t
kTwoPower32	fluid_sys.c	615;"	d	file:
key	fluid_event_priv.h	/^	short key;$/;"	m	struct:_fluid_event_t
key	fluid_hash.c	/^  char* key;$/;"	m	struct:_fluid_hashnode_t	file:
key	fluid_voice.h	/^	unsigned char key;              \/* the key, quick acces for noteoff *\/$/;"	m	struct:_fluid_voice_t
key_pressure	fluid_chan.h	/^  short key_pressure;$/;"	m	struct:_fluid_channel_t
key_pressure_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* key_pressure_rules;$/;"	m	struct:_fluid_midi_router_t
keyhi	fluid_defsfont.h	/^  int keyhi;$/;"	m	struct:_fluid_inst_zone_t
keyhi	fluid_defsfont.h	/^  int keyhi;$/;"	m	struct:_fluid_preset_zone_t
keylo	fluid_defsfont.h	/^  int keylo;$/;"	m	struct:_fluid_inst_zone_t
keylo	fluid_defsfont.h	/^  int keylo;$/;"	m	struct:_fluid_preset_zone_t
keys_cc	fluid_midi_router.h	/^    char keys_cc[128];                         \/* Flags, whether a key is down \/ controller is set (sustain) *\/$/;"	m	struct:_fluid_midi_router_rule_t
last	fluid_midi.h	/^  fluid_midi_event_t *last;$/;"	m	struct:_fluid_track_t
last_fres	fluid_voice.h	/^	fluid_real_t last_fres;         \/* Current resonance frequency of the IIR filter *\/$/;"	m	struct:_fluid_voice_t
left	fluid_aufile.c	/^	float* left;$/;"	m	struct:__anon28	file:
left_buf	fluid_synth.h	/^  fluid_real_t** left_buf;$/;"	m	struct:_fluid_synth_t
len	fluid_cmd.c	/^  int len;$/;"	m	struct:_fluid_handle_settings_data_t	file:
level	fluid_chorus.c	/^  fluid_real_t level;         \/* current value *\/$/;"	m	struct:_fluid_chorus_t	file:
level	fluid_rev.h	/^  fluid_real_t level;$/;"	m	struct:_fluid_revmodel_presets_t
libr	fluid_defsfont.h	/^  unsigned int libr;			\/* Not used (preserved) *\/$/;"	m	struct:_SFPreset
library	fluid_defsfont.h	/^  unsigned int library;		\/* just for preserving them *\/$/;"	m	struct:_SFPhdr
lo	fluid_defsfont.h	/^    unsigned char lo;			\/* low value for ranges *\/$/;"	m	struct:_SFGenAmount::__anon17
load	include/fluidsynth/sfont.h	/^  fluid_sfont_t* (*load)(fluid_sfloader_t* loader, const char* filename);$/;"	m	struct:_fluid_sfloader_t
load_body	fluid_defsfont.c	/^load_body (unsigned int size, SFData * sf, FILE * fd)$/;"	f	file:
load_ibag	fluid_defsfont.c	/^load_ibag (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_igen	fluid_defsfont.c	/^load_igen (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_ihdr	fluid_defsfont.c	/^load_ihdr (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_imod	fluid_defsfont.c	/^load_imod (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_pbag	fluid_defsfont.c	/^load_pbag (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_pgen	fluid_defsfont.c	/^load_pgen (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_phdr	fluid_defsfont.c	/^load_phdr (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_pmod	fluid_defsfont.c	/^load_pmod (int size, SFData * sf, FILE * fd)$/;"	f	file:
load_shdr	fluid_defsfont.c	/^load_shdr (unsigned int size, SFData * sf, FILE * fd)$/;"	f	file:
loaders	fluid_synth.h	/^  fluid_list_t *loaders;              \/** the soundfont loaders *\/$/;"	m	struct:_fluid_synth_t
lookup_tab	fluid_chorus.c	/^  int *lookup_tab;$/;"	m	struct:_fluid_chorus_t	file:
loop	fluid_midi.h	/^  int loop;$/;"	m	struct:_fluid_player_t
loopend	fluid_defsfont.h	/^  unsigned int loopend;		\/* Offset from start to end of loop,$/;"	m	struct:_SFSample
loopend	fluid_defsfont.h	/^  unsigned int loopend;		\/* Offset to end of loop *\/$/;"	m	struct:_SFShdr
loopend	fluid_voice.h	/^	int loopend;	\/* Note: first point following the loop (superimposed on loopstart) *\/$/;"	m	struct:_fluid_voice_t
loopend	include/fluidsynth/sfont.h	/^  unsigned int loopend;	\/* Note: first point following the loop (superimposed on loopstart) *\/$/;"	m	struct:_fluid_sample_t
loopstart	fluid_defsfont.h	/^  unsigned int loopstart;		\/* Offset from start to start of loop *\/$/;"	m	struct:_SFSample
loopstart	fluid_defsfont.h	/^  unsigned int loopstart;		\/* Offset to start of loop *\/$/;"	m	struct:_SFShdr
loopstart	fluid_voice.h	/^	int loopstart;$/;"	m	struct:_fluid_voice_t
loopstart	include/fluidsynth/sfont.h	/^  unsigned int loopstart;$/;"	m	struct:_fluid_sample_t
m_dev	fluid_dart.c	/^static fluid_dart_audio_driver_t* m_dev;$/;"	v	file:
m_hmodMDM	fluid_dart.c	/^static HMODULE m_hmodMDM = NULLHANDLE;$/;"	v	file:
m_pfnmciSendCommand	fluid_dart.c	/^static ULONG (APIENTRY *m_pfnmciSendCommand)(USHORT, USHORT, ULONG, PVOID, USHORT) = NULL;$/;"	v	file:
main	fluidsynth.c	/^int main(int argc, char** argv)$/;"	f
major	fluid_defsfont.h	/^  unsigned short major;$/;"	m	struct:_SFVersion
max	fluid_gen.h	/^	float max;		\/* The maximum value *\/$/;"	m	struct:_fluid_gen_info_t
max	fluid_settings.c	/^  double max;$/;"	m	struct:__anon7	file:
max	fluid_settings.c	/^  int max;$/;"	m	struct:__anon8	file:
max	fluid_sys.h	/^  double min, max, total;$/;"	m	struct:_fluid_profile_data_t
max	fluid_voice.h	/^	fluid_real_t max;$/;"	m	struct:_fluid_env_data_t
midi_channels	fluid_synth.h	/^  int midi_channels;                 \/** the number of MIDI channels (>= 16) *\/$/;"	m	struct:_fluid_synth_t
midi_message_buffer	fluid_midi.c	/^char midi_message_buffer[MIDI_MESSAGE_LENGTH];$/;"	v
midi_meta_event	fluid_midi.h	/^enum midi_meta_event {$/;"	g
midi_port	fluid_jack.c	/^  jack_port_t *midi_port;$/;"	m	struct:__anon31	file:
midi_router	fluid_synth.h	/^  fluid_midi_router_t* midi_router;     \/* The midi router. Could be done nicer. *\/$/;"	m	struct:_fluid_synth_t
midi_rpn_event	fluid_midi.h	/^enum midi_rpn_event {$/;"	g
miditempo	fluid_midi.h	/^  int miditempo;            \/* as indicated by MIDI SetTempo: n 24th of a usec per midi-clock. bravo! *\/$/;"	m	struct:_fluid_player_t
min	fluid_gen.h	/^	float min;		\/* The minimum value *\/$/;"	m	struct:_fluid_gen_info_t
min	fluid_settings.c	/^  double min;$/;"	m	struct:__anon7	file:
min	fluid_settings.c	/^  int min;$/;"	m	struct:__anon8	file:
min	fluid_sys.h	/^  double min, max, total;$/;"	m	struct:_fluid_profile_data_t
min	fluid_voice.h	/^	fluid_real_t min;$/;"	m	struct:_fluid_env_data_t
min_attenuation_cB	fluid_voice.h	/^	fluid_real_t min_attenuation_cB; \/* Estimate on the smallest possible attenuation$/;"	m	struct:_fluid_voice_t
minor	fluid_defsfont.h	/^  unsigned short minor;$/;"	m	struct:_SFVersion
mod	fluid_defsfont.h	/^  fluid_list_t *mod;			\/* list of modulators *\/$/;"	m	struct:_SFZone
mod	fluid_defsfont.h	/^  fluid_mod_t * mod; \/* List of modulators *\/$/;"	m	struct:_fluid_inst_zone_t
mod	fluid_defsfont.h	/^  fluid_mod_t * mod; \/* List of modulators *\/$/;"	m	struct:_fluid_preset_zone_t
mod	fluid_voice.h	/^	fluid_mod_t mod[FLUID_NUM_MOD];$/;"	m	struct:_fluid_voice_t
mod	include/fluidsynth/gen.h	/^  double mod;          \/**< Change by modulators *\/$/;"	m	struct:_fluid_gen_t
mod_count	fluid_voice.h	/^	int mod_count;$/;"	m	struct:_fluid_voice_t
modenv_count	fluid_voice.h	/^	unsigned int modenv_count;$/;"	m	struct:_fluid_voice_t
modenv_data	fluid_voice.h	/^	fluid_env_data_t modenv_data[FLUID_VOICE_ENVLAST];$/;"	m	struct:_fluid_voice_t
modenv_section	fluid_voice.h	/^	int modenv_section;$/;"	m	struct:_fluid_voice_t
modenv_to_fc	fluid_voice.h	/^	fluid_real_t modenv_to_fc;$/;"	m	struct:_fluid_voice_t
modenv_to_pitch	fluid_voice.h	/^	fluid_real_t modenv_to_pitch;$/;"	m	struct:_fluid_voice_t
modenv_val	fluid_voice.h	/^	fluid_real_t modenv_val;         \/* the value of the modulation envelope *\/$/;"	m	struct:_fluid_voice_t
modlfo_delay	fluid_voice.h	/^	unsigned int modlfo_delay;       \/* the delay of the lfo in samples *\/$/;"	m	struct:_fluid_voice_t
modlfo_incr	fluid_voice.h	/^	fluid_real_t modlfo_incr;         \/* the lfo frequency is converted to a per-buffer increment *\/$/;"	m	struct:_fluid_voice_t
modlfo_to_fc	fluid_voice.h	/^	fluid_real_t modlfo_to_fc;$/;"	m	struct:_fluid_voice_t
modlfo_to_pitch	fluid_voice.h	/^	fluid_real_t modlfo_to_pitch;$/;"	m	struct:_fluid_voice_t
modlfo_to_vol	fluid_voice.h	/^	fluid_real_t modlfo_to_vol;$/;"	m	struct:_fluid_voice_t
modlfo_val	fluid_voice.h	/^	fluid_real_t modlfo_val;          \/* the value of the modulation LFO *\/$/;"	m	struct:_fluid_voice_t
modndx	fluid_defsfont.h	/^  unsigned short modndx;		\/* index into modulator list *\/$/;"	m	struct:_SFBag
modulation_period_samples	fluid_chorus.c	/^  long modulation_period_samples;$/;"	m	struct:_fluid_chorus_t	file:
morph	fluid_defsfont.h	/^  unsigned int morph;		\/* Not used (preserved) *\/$/;"	m	struct:_SFPreset
morphology	fluid_defsfont.h	/^  unsigned int morphology;		\/* Not used *\/$/;"	m	struct:_SFPhdr
msec	fluid_sys.c	/^  long msec;$/;"	m	struct:_fluid_timer_t	file:
msg_chan	fluid_winmidi.c	46;"	d	file:
msg_p1	fluid_winmidi.c	47;"	d	file:
msg_p2	fluid_winmidi.c	48;"	d	file:
msg_type	fluid_winmidi.c	45;"	d	file:
mutex	fluid_cmd.c	/^  fluid_mutex_t mutex;$/;"	m	struct:_fluid_server_t	file:
mutex	fluid_event_priv.h	/^  fluid_mutex_t mutex;$/;"	m	struct:_fluid_evt_heap_t
mutex	fluid_ladspa.h	/^  pthread_mutex_t mutex;$/;"	m	struct:__anon36
mutex	fluid_seq.c	/^	fluid_mutex_t mutex;$/;"	m	struct:_fluid_sequencer_t	file:
myTimerUPP	fluid_sys.c	/^static TimerUPP	myTimerUPP;$/;"	v	file:
myTmTask	fluid_sys.c	/^	TMTask myTmTask;$/;"	m	struct:_fluid_timer_t	file:
name	fluid_adriver.c	/^  char* name;$/;"	m	struct:_fluid_audriver_definition_t	file:
name	fluid_adriver.h	/^  char* name;$/;"	m	struct:_fluid_audio_driver_t
name	fluid_alsa.c	/^  char* name;$/;"	m	struct:fluid_alsa_formats_t	file:
name	fluid_defsfont.h	/^  char name[20];		\/* Name of instrument *\/$/;"	m	struct:_SFIhdr
name	fluid_defsfont.h	/^  char name[20];		\/* Sample name *\/$/;"	m	struct:_SFShdr
name	fluid_defsfont.h	/^  char name[21];		\/* Name of instrument *\/$/;"	m	struct:_SFInst
name	fluid_defsfont.h	/^  char name[21];		\/* Name of sample *\/$/;"	m	struct:_SFSample
name	fluid_defsfont.h	/^  char name[21];		\/* preset name *\/$/;"	m	struct:_SFPreset
name	fluid_defsfont.h	/^  char name[21];                        \/* the name of the preset *\/$/;"	m	struct:_fluid_defpreset_t
name	fluid_defsfont.h	/^  char name[21];$/;"	m	struct:_fluid_inst_t
name	fluid_defsfont.h	/^  char* name;$/;"	m	struct:_fluid_inst_zone_t
name	fluid_defsfont.h	/^  char* name;$/;"	m	struct:_fluid_preset_zone_t
name	fluid_defsfont.h	/^  unsigned char name[20];		\/* preset name *\/$/;"	m	struct:_SFPhdr
name	fluid_mdriver.c	/^  char* name;$/;"	m	struct:fluid_mdriver_definition_t	file:
name	fluid_mdriver.h	/^  char* name;$/;"	m	struct:_fluid_midi_driver_t
name	fluid_midi.h	/^  char* name;$/;"	m	struct:_fluid_track_t
name	fluid_ramsfont.h	/^  char name[21];                        \/* the name of the preset *\/$/;"	m	struct:_fluid_rampreset_t
name	fluid_ramsfont.h	/^  char name[21];                        \/* the name of the soundfont *\/$/;"	m	struct:_fluid_ramsfont_t
name	fluid_rev.h	/^  char* name;$/;"	m	struct:_fluid_revmodel_presets_t
name	fluid_seq.c	/^	char* name;$/;"	m	struct:_fluid_sequencer_client_t	file:
name	fluid_tuning.h	/^  char* name;$/;"	m	struct:_fluid_tuning_t
name	include/fluidsynth/sfont.h	/^  char name[21];$/;"	m	struct:_fluid_sample_t
name	include/fluidsynth/shell.h	/^  char* name;                           \/** The name of the command, as typed in in the shell *\/$/;"	m	struct:__anon3
nbuf	fluid_synth.h	/^  int nbuf;                           \/** How many audio buffers are used? (depends on nr of audio channels \/ groups)*\/$/;"	m	struct:_fluid_synth_t
new	fluid_adriver.c	/^  fluid_audio_driver_t* (*new)(fluid_settings_t* settings, fluid_synth_t* synth);$/;"	m	struct:_fluid_audriver_definition_t	file:
new	fluid_mdriver.c	/^  fluid_midi_driver_t* (*new)(fluid_settings_t* settings,$/;"	m	struct:fluid_mdriver_definition_t	file:
new2	fluid_adriver.c	/^  fluid_audio_driver_t* (*new2)(fluid_settings_t* settings,$/;"	m	struct:_fluid_audriver_definition_t	file:
new_depth_ms	fluid_chorus.c	/^  fluid_real_t new_depth_ms;  \/* next value, if parameter check is OK *\/$/;"	m	struct:_fluid_chorus_t	file:
new_fluid_LADSPA_FxUnit	fluid_ladspa.c	/^fluid_LADSPA_FxUnit_t* new_fluid_LADSPA_FxUnit(fluid_synth_t* synth){$/;"	f
new_fluid_alsa_audio_driver	fluid_alsa.c	/^new_fluid_alsa_audio_driver(fluid_settings_t* settings,$/;"	f
new_fluid_alsa_audio_driver2	fluid_alsa.c	/^new_fluid_alsa_audio_driver2(fluid_settings_t* settings,$/;"	f
new_fluid_alsa_rawmidi_driver	fluid_alsa.c	/^new_fluid_alsa_rawmidi_driver(fluid_settings_t* settings,$/;"	f
new_fluid_alsa_seq_driver	fluid_alsa.c	/^new_fluid_alsa_seq_driver(fluid_settings_t* settings,$/;"	f
new_fluid_audio_driver	fluid_adriver.c	/^new_fluid_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_audio_driver2	fluid_adriver.c	/^new_fluid_audio_driver2(fluid_settings_t* settings, fluid_audio_func_t func, void* data)$/;"	f
new_fluid_channel	fluid_chan.c	/^new_fluid_channel(fluid_synth_t* synth, int num)$/;"	f
new_fluid_chorus	fluid_chorus.c	/^new_fluid_chorus(fluid_real_t sample_rate)$/;"	f
new_fluid_client	fluid_cmd.c	/^new_fluid_client(fluid_server_t* server, fluid_settings_t* settings,$/;"	f
new_fluid_cmd_handler	fluid_cmd.c	/^fluid_cmd_handler_t* new_fluid_cmd_handler(fluid_synth_t* synth)$/;"	f
new_fluid_core_audio_driver	fluid_coreaudio.c	/^new_fluid_core_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_core_audio_driver2	fluid_coreaudio.c	/^new_fluid_core_audio_driver2(fluid_settings_t* settings, fluid_audio_func_t func, void* data)$/;"	f
new_fluid_coremidi_driver	fluid_coremidi.c	/^new_fluid_coremidi_driver(fluid_settings_t* settings, handle_midi_event_func_t handler, void* data)$/;"	f
new_fluid_dart_audio_driver	fluid_dart.c	/^new_fluid_dart_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_defpreset	fluid_defsfont.c	/^new_fluid_defpreset(fluid_defsfont_t* sfont)$/;"	f
new_fluid_defsfloader	fluid_defsfont.c	/^fluid_sfloader_t* new_fluid_defsfloader()$/;"	f
new_fluid_defsfont	fluid_defsfont.c	/^fluid_defsfont_t* new_fluid_defsfont()$/;"	f
new_fluid_dsound_audio_driver	fluid_dsound.c	/^new_fluid_dsound_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_event	fluid_event.c	/^new_fluid_event()$/;"	f
new_fluid_file_audio_driver	fluid_aufile.c	/^new_fluid_file_audio_driver(fluid_settings_t* settings,$/;"	f
new_fluid_hashnode	fluid_hash.c	/^new_fluid_hashnode(char* key, void* value, int type)$/;"	f	file:
new_fluid_hashtable	fluid_hash.c	/^new_fluid_hashtable(fluid_hash_delete_t del)$/;"	f
new_fluid_inst	fluid_defsfont.c	/^new_fluid_inst()$/;"	f
new_fluid_inst_zone	fluid_defsfont.c	/^new_fluid_inst_zone(char* name)$/;"	f
new_fluid_int_setting	fluid_settings.c	/^new_fluid_int_setting(int min, int max, int def,$/;"	f	file:
new_fluid_jack_audio_driver	fluid_jack.c	/^new_fluid_jack_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_jack_audio_driver2	fluid_jack.c	/^new_fluid_jack_audio_driver2(fluid_settings_t* settings, fluid_audio_func_t func, void* data) {$/;"	f
new_fluid_jack_midi_driver	fluid_jack.c	/^new_fluid_jack_midi_driver (fluid_settings_t *settings,$/;"	f
new_fluid_list	fluid_list.c	/^new_fluid_list(void)$/;"	f
new_fluid_midi_driver	fluid_mdriver.c	/^fluid_midi_driver_t* new_fluid_midi_driver(fluid_settings_t* settings, handle_midi_event_func_t handler, void* event_handler_data)$/;"	f
new_fluid_midi_event	fluid_midi.c	/^fluid_midi_event_t* new_fluid_midi_event()$/;"	f
new_fluid_midi_file	fluid_midi.c	/^fluid_midi_file* new_fluid_midi_file(char* filename)$/;"	f
new_fluid_midi_parser	fluid_midi.c	/^fluid_midi_parser_t* new_fluid_midi_parser()$/;"	f
new_fluid_midi_router	fluid_midi_router.c	/^new_fluid_midi_router(fluid_settings_t* settings, handle_midi_event_func_t handler, void* event_handler_data)$/;"	f
new_fluid_midi_router_rule	fluid_midi_router.c	/^fluid_midi_router_rule_t* new_fluid_midi_router_rule(void)$/;"	f
new_fluid_midishare_midi_driver	fluid_midishare.c	/^new_fluid_midishare_midi_driver(fluid_settings_t* settings,$/;"	f
new_fluid_num_setting	fluid_settings.c	/^new_fluid_num_setting(double min, double max, double def,$/;"	f	file:
new_fluid_oss_audio_driver	fluid_oss.c	/^new_fluid_oss_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_oss_audio_driver2	fluid_oss.c	/^new_fluid_oss_audio_driver2(fluid_settings_t* settings, fluid_audio_func_t func, void* data)$/;"	f
new_fluid_oss_midi_driver	fluid_oss.c	/^new_fluid_oss_midi_driver(fluid_settings_t* settings,$/;"	f
new_fluid_player	fluid_midi.c	/^fluid_player_t* new_fluid_player(fluid_synth_t* synth)$/;"	f
new_fluid_portaudio_driver	fluid_portaudio.c	/^new_fluid_portaudio_driver (fluid_settings_t *settings, fluid_synth_t *synth)$/;"	f
new_fluid_preset_zone	fluid_defsfont.c	/^new_fluid_preset_zone(char *name)$/;"	f
new_fluid_pulse_audio_driver	fluid_pulse.c	/^new_fluid_pulse_audio_driver(fluid_settings_t* settings,$/;"	f
new_fluid_pulse_audio_driver2	fluid_pulse.c	/^new_fluid_pulse_audio_driver2(fluid_settings_t* settings,$/;"	f
new_fluid_rampreset	fluid_ramsfont.c	/^new_fluid_rampreset(fluid_ramsfont_t* sfont)$/;"	f
new_fluid_ramsample	fluid_ramsfont.c	/^new_fluid_ramsample()$/;"	f
new_fluid_ramsfont	fluid_ramsfont.c	/^fluid_ramsfont_t* new_fluid_ramsfont()$/;"	f
new_fluid_revmodel	fluid_rev.c	/^new_fluid_revmodel()$/;"	f
new_fluid_sample	fluid_defsfont.c	/^new_fluid_sample()$/;"	f
new_fluid_sequencer	fluid_seq.c	/^new_fluid_sequencer()$/;"	f
new_fluid_server	fluid_cmd.c	/^new_fluid_server(fluid_settings_t* settings,$/;"	f
new_fluid_server_socket	fluid_sys.c	/^new_fluid_server_socket(int port, fluid_server_func_t func, void* data)$/;"	f
new_fluid_settings	fluid_settings.c	/^fluid_settings_t* new_fluid_settings()$/;"	f
new_fluid_shell	fluid_cmd.c	/^fluid_shell_t* new_fluid_shell(fluid_settings_t* settings, fluid_cmd_handler_t* handler,$/;"	f
new_fluid_sndmgr_audio_driver	fluid_sndmgr.c	/^new_fluid_sndmgr_audio_driver(fluid_settings_t* settings, fluid_synth_t* synth)$/;"	f
new_fluid_sndmgr_audio_driver2	fluid_sndmgr.c	/^new_fluid_sndmgr_audio_driver2(fluid_settings_t* settings, fluid_audio_func_t func, void* data)$/;"	f
new_fluid_str_setting	fluid_settings.c	/^new_fluid_str_setting(char* value, char* def, int hints, fluid_str_update_t fun, void* data)$/;"	f	file:
new_fluid_synth	fluid_synth.c	/^new_fluid_synth(fluid_settings_t *settings)$/;"	f
new_fluid_thread	fluid_sys.c	/^fluid_thread_t* new_fluid_thread(fluid_thread_func_t func, void* data, int detach) { return NULL; }$/;"	f
new_fluid_thread	fluid_sys.c	/^fluid_thread_t* new_fluid_thread(fluid_thread_func_t func, void* data, int detach)$/;"	f
new_fluid_timer	fluid_sys.c	/^new_fluid_timer(int msec, fluid_timer_callback_t callback, void* data,$/;"	f
new_fluid_track	fluid_midi.c	/^fluid_track_t* new_fluid_track(int num)$/;"	f
new_fluid_tuning	fluid_tuning.c	/^fluid_tuning_t* new_fluid_tuning(char* name, int bank, int prog)$/;"	f
new_fluid_voice	fluid_voice.c	/^new_fluid_voice(fluid_real_t output_rate)$/;"	f
new_fluid_winmidi_driver	fluid_winmidi.c	/^new_fluid_winmidi_driver(fluid_settings_t* settings,$/;"	f
new_level	fluid_chorus.c	/^  fluid_real_t new_level;     \/* next value, if parameter check is OK *\/$/;"	m	struct:_fluid_chorus_t	file:
new_number_blocks	fluid_chorus.c	/^  int new_number_blocks;     \/* next value, if parameter check is OK *\/$/;"	m	struct:_fluid_chorus_t	file:
new_rule_chan_add	fluid_midi_router.h	/^  int new_rule_chan_add;$/;"	m	struct:_fluid_midi_router_t
new_rule_chan_max	fluid_midi_router.h	/^  int new_rule_chan_max;$/;"	m	struct:_fluid_midi_router_t
new_rule_chan_min	fluid_midi_router.h	/^  int new_rule_chan_min;$/;"	m	struct:_fluid_midi_router_t
new_rule_chan_mul	fluid_midi_router.h	/^  double new_rule_chan_mul;$/;"	m	struct:_fluid_midi_router_t
new_rule_par1_add	fluid_midi_router.h	/^  int new_rule_par1_add;$/;"	m	struct:_fluid_midi_router_t
new_rule_par1_max	fluid_midi_router.h	/^  int new_rule_par1_max;$/;"	m	struct:_fluid_midi_router_t
new_rule_par1_min	fluid_midi_router.h	/^  int new_rule_par1_min;$/;"	m	struct:_fluid_midi_router_t
new_rule_par1_mul	fluid_midi_router.h	/^  double new_rule_par1_mul;$/;"	m	struct:_fluid_midi_router_t
new_rule_par2_add	fluid_midi_router.h	/^  int new_rule_par2_add;$/;"	m	struct:_fluid_midi_router_t
new_rule_par2_max	fluid_midi_router.h	/^  int new_rule_par2_max;$/;"	m	struct:_fluid_midi_router_t
new_rule_par2_min	fluid_midi_router.h	/^  int new_rule_par2_min;$/;"	m	struct:_fluid_midi_router_t
new_rule_par2_mul	fluid_midi_router.h	/^  double new_rule_par2_mul;$/;"	m	struct:_fluid_midi_router_t
new_speed_Hz	fluid_chorus.c	/^  fluid_real_t new_speed_Hz;  \/* next value, if parameter check is OK *\/$/;"	m	struct:_fluid_chorus_t	file:
new_type	fluid_chorus.c	/^  int new_type;              \/* next value, if parameter check is OK *\/$/;"	m	struct:_fluid_chorus_t	file:
newclient	fluid_cmd.c	/^  fluid_server_newclient_func_t newclient;$/;"	m	struct:_fluid_server_t	file:
newclient	fluidsynth.c	/^static fluid_cmd_handler_t* newclient(void* data, char* addr)$/;"	f	file:
next	fluid_defsfont.h	/^  fluid_defpreset_t* next;$/;"	m	struct:_fluid_defpreset_t
next	fluid_defsfont.h	/^  fluid_inst_zone_t* next;$/;"	m	struct:_fluid_inst_zone_t
next	fluid_defsfont.h	/^  fluid_preset_zone_t* next;$/;"	m	struct:_fluid_preset_zone_t
next	fluid_event_priv.h	/^	fluid_evt_entry *next;$/;"	m	struct:_fluid_evt_entry
next	fluid_hash.c	/^  fluid_hashnode_t *next;$/;"	m	struct:_fluid_hashnode_t	file:
next	fluid_list.h	/^  fluid_list_t *next;$/;"	m	struct:_fluid_list_t
next	fluid_midi.h	/^  fluid_midi_event_t* next;  \/* Don't use it, it will dissappear. Used in midi tracks.  *\/$/;"	m	struct:_fluid_midi_event_t
next	fluid_midi_router.h	/^    fluid_midi_router_rule_t* next;             \/* next entry *\/$/;"	m	struct:_fluid_midi_router_rule_t
next	fluid_ramsfont.h	/^  fluid_rampreset_t* next;$/;"	m	struct:_fluid_rampreset_t
next	include/fluidsynth/mod.h	/^  fluid_mod_t * next;$/;"	m	struct:_fluid_mod_t
nnodes	fluid_hash.c	/^  unsigned int nnodes;$/;"	m	struct:_fluid_hashtable_t	file:
nodes	fluid_hash.c	/^  fluid_hashnode_t **nodes;$/;"	m	struct:_fluid_hashtable_t	file:
note_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* note_rules;$/;"	m	struct:_fluid_midi_router_t
noteid	fluid_synth.h	/^  unsigned int noteid;                \/** the id is incremented for every new note. it's used for noteoff's  *\/$/;"	m	struct:_fluid_synth_t
noteon	include/fluidsynth/sfont.h	/^  int (*noteon)(fluid_preset_t* preset, fluid_synth_t* synth, int chan, int key, int vel);$/;"	m	struct:_fluid_preset_t
notify	include/fluidsynth/sfont.h	/^  int (*notify)(fluid_preset_t* preset, int reason, int chan);$/;"	m	struct:_fluid_preset_t
notify	include/fluidsynth/sfont.h	/^  int (*notify)(fluid_sample_t* sample, int reason);$/;"	m	struct:_fluid_sample_t
npfd	fluid_alsa.c	/^  int npfd;$/;"	m	struct:__anon12	file:
npfd	fluid_alsa.c	/^  int npfd;$/;"	m	struct:__anon13	file:
nr_bytes	fluid_midi.h	/^  unsigned int nr_bytes;          \/* How many bytes have been read for the current event? *\/$/;"	m	struct:_fluid_midi_parser_t
nr_bytes_total	fluid_midi.h	/^  unsigned int nr_bytes_total;    \/* How many bytes does the current event type include? *\/$/;"	m	struct:_fluid_midi_parser_t
nr_midi_channels	fluid_midi_router.h	/^  int nr_midi_channels;                      \/* For clipping the midi channel *\/$/;"	m	struct:_fluid_midi_router_t
nrpn	include/fluidsynth/gen.h	/^  double nrpn;         \/**< Change by NRPN messages *\/$/;"	m	struct:_fluid_gen_t
nrpn_active	fluid_chan.h	/^  short nrpn_active;    \/* 1 if data entry CCs are for NRPN, 0 if RPN *\/$/;"	m	struct:_fluid_channel_t
nrpn_scale	fluid_gen.h	/^	char nrpn_scale;	\/* The scale to convert from NRPN (cfr. fluid_gen_map_nrpn()) *\/$/;"	m	struct:_fluid_gen_info_t
nrpn_select	fluid_chan.h	/^  short nrpn_select;$/;"	m	struct:_fluid_channel_t
ntracks	fluid_midi.h	/^  int ntracks;$/;"	m	struct:__anon25
ntracks	fluid_midi.h	/^  int ntracks;$/;"	m	struct:_fluid_player_t
num	fluid_defsfont.h	/^  unsigned int num;                     \/* the preset number *\/$/;"	m	struct:_fluid_defpreset_t
num	fluid_gen.h	/^	char num;		\/* Generator number *\/$/;"	m	struct:_fluid_gen_info_t
num	fluid_midi.h	/^  int num;$/;"	m	struct:_fluid_track_t
num	fluid_ramsfont.h	/^  unsigned int num;                     \/* the preset number *\/$/;"	m	struct:_fluid_rampreset_t
num	fluid_sys.h	/^  int num;$/;"	m	struct:_fluid_profile_data_t
num_channels	fluid_synth.h	/^  int num_channels;                   \/** the number of channels *\/$/;"	m	struct:_fluid_synth_t
num_output_ports	fluid_jack.c	/^  int num_output_ports;$/;"	m	struct:__anon30	file:
numallpasses	fluid_rev.c	227;"	d	file:
number_blocks	fluid_chorus.c	/^  int number_blocks;         \/* current value *\/$/;"	m	struct:_fluid_chorus_t	file:
numcombs	fluid_rev.c	226;"	d	file:
nvoice	fluid_synth.h	/^  int nvoice;                         \/** the length of the synthesis process array *\/$/;"	m	struct:_fluid_synth_t
offset	fluid_synth.h	/^	int offset;$/;"	m	struct:_fluid_bank_offset_t
offsetroom	fluid_rev.c	232;"	d	file:
option_help	fluidsynth.c	/^int option_help = 0;		\/* set to 1 if "-o help" is specified *\/$/;"	v
options	fluid_settings.c	/^  fluid_list_t* options;$/;"	m	struct:__anon6	file:
origpitch	fluid_defsfont.h	/^  unsigned char origpitch;		\/* root midi key number *\/$/;"	m	struct:_SFSample
origpitch	fluid_defsfont.h	/^  unsigned char origpitch;		\/* root midi key number *\/$/;"	m	struct:_SFShdr
origpitch	include/fluidsynth/sfont.h	/^  int origpitch;$/;"	m	struct:_fluid_sample_t
out	fluid_cmd.c	/^  fluid_ostream_t out;$/;"	m	struct:_fluid_handle_option_data_t	file:
out	fluid_cmd.c	/^  fluid_ostream_t out;$/;"	m	struct:_fluid_handle_settings_data_t	file:
out	fluid_cmd.c	/^  fluid_ostream_t out;$/;"	m	struct:_fluid_shell_t	file:
outbuf	fluid_synth.h	/^  char outbuf[256];                  \/** buffer for message output *\/$/;"	m	struct:_fluid_synth_t
output_bufs	fluid_jack.c	/^  float **output_bufs;$/;"	m	struct:__anon30	file:
output_ports	fluid_jack.c	/^  jack_port_t **output_ports;$/;"	m	struct:__anon30	file:
output_rate	fluid_voice.h	/^	fluid_real_t output_rate;        \/* the sample rate of the synthesizer *\/$/;"	m	struct:_fluid_voice_t
p	fluid_midi.h	/^  unsigned short p[FLUID_MIDI_PARSER_MAX_PAR]; \/* The parameters *\/$/;"	m	struct:_fluid_midi_parser_t
pa_handle	fluid_pulse.c	/^  pa_simple *pa_handle;$/;"	m	struct:__anon14	file:
pan	fluid_voice.h	/^	fluid_real_t pan;$/;"	m	struct:_fluid_voice_t
par1_add	fluid_midi_router.h	/^    int par1_add;$/;"	m	struct:_fluid_midi_router_rule_t
par1_max	fluid_midi_router.h	/^    int par1_max;$/;"	m	struct:_fluid_midi_router_rule_t
par1_min	fluid_midi_router.h	/^    int par1_min;                             \/* Parameter 1 window, for which this rule is valid *\/$/;"	m	struct:_fluid_midi_router_rule_t
par1_mul	fluid_midi_router.h	/^    fluid_real_t par1_mul;$/;"	m	struct:_fluid_midi_router_rule_t
par2_add	fluid_midi_router.h	/^    int par2_add;$/;"	m	struct:_fluid_midi_router_rule_t
par2_max	fluid_midi_router.h	/^    int par2_max;$/;"	m	struct:_fluid_midi_router_rule_t
par2_min	fluid_midi_router.h	/^    int par2_min;                              \/* Parameter 2 window, for which this rule is valid *\/$/;"	m	struct:_fluid_midi_router_rule_t
par2_mul	fluid_midi_router.h	/^    fluid_real_t par2_mul;$/;"	m	struct:_fluid_midi_router_rule_t
param1	fluid_midi.h	/^  unsigned int param1;      \/* First parameter *\/$/;"	m	struct:_fluid_midi_event_t
param2	fluid_midi.h	/^  unsigned int param2;      \/* Second parameter *\/$/;"	m	struct:_fluid_midi_event_t
parser	fluid_alsa.c	/^  fluid_midi_parser_t* parser;$/;"	m	struct:__anon12	file:
parser	fluid_coremidi.c	/^  fluid_midi_parser_t* parser;$/;"	m	struct:__anon29	file:
parser	fluid_jack.c	/^  fluid_midi_parser_t *parser;$/;"	m	struct:__anon31	file:
parser	fluid_oss.c	/^  fluid_midi_parser_t* parser;$/;"	m	struct:__anon24	file:
pbagndx	fluid_defsfont.h	/^  unsigned short pbagndx;		\/* index into preset bag *\/$/;"	m	struct:_SFPhdr
pcm	fluid_alsa.c	/^  snd_pcm_t* pcm;$/;"	m	struct:__anon11	file:
pdtahelper	fluid_defsfont.c	/^pdtahelper (unsigned int expid, unsigned int reclen, SFChunk * chunk,$/;"	f	file:
pending_events	fluid_midi_router.h	/^    int pending_events;                        \/* In case of noteon: How many keys are still down? *\/$/;"	m	struct:_fluid_midi_router_rule_t
period_size	fluid_aufile.c	/^	int period_size;$/;"	m	struct:__anon28	file:
pfd	fluid_alsa.c	/^  struct pollfd *pfd;$/;"	m	struct:__anon12	typeref:struct:__anon12::pollfd	file:
pfd	fluid_alsa.c	/^  struct pollfd *pfd;$/;"	m	struct:__anon13	typeref:struct:__anon13::pollfd	file:
phase	fluid_chorus.c	/^  long phase[MAX_CHORUS];$/;"	m	struct:_fluid_chorus_t	file:
phase	fluid_coreaudio.c	/^  double phase;$/;"	m	struct:__anon27	file:
phase	fluid_voice.h	/^	fluid_phase_t phase;             \/* the phase of the sample wave *\/$/;"	m	struct:_fluid_voice_t
phase_incr	fluid_voice.h	/^	fluid_real_t phase_incr;	\/* the phase increment for the next 64 samples *\/$/;"	m	struct:_fluid_voice_t
pitch	fluid_event_priv.h	/^	int pitch;$/;"	m	struct:_fluid_event_t
pitch	fluid_tuning.h	/^  double pitch[128];  \/* the pitch of every key, in cents *\/$/;"	m	struct:_fluid_tuning_t
pitch	fluid_voice.h	/^	fluid_real_t pitch;              \/* the pitch in midicents *\/$/;"	m	struct:_fluid_voice_t
pitch_bend	fluid_chan.h	/^  short pitch_bend;$/;"	m	struct:_fluid_channel_t
pitch_wheel_sensitivity	fluid_chan.h	/^  short pitch_wheel_sensitivity;$/;"	m	struct:_fluid_channel_t
pitchadj	fluid_defsfont.h	/^  signed char pitchadj;		\/* pitch correction in cents *\/$/;"	m	struct:_SFSample
pitchadj	fluid_defsfont.h	/^  signed char pitchadj;		\/* pitch correction in cents *\/$/;"	m	struct:_SFShdr
pitchadj	include/fluidsynth/sfont.h	/^  int pitchadj;$/;"	m	struct:_fluid_sample_t
pitchbend_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* pitchbend_rules;$/;"	m	struct:_fluid_midi_router_t
playlist	fluid_midi.h	/^  fluid_list_t* playlist;$/;"	m	struct:_fluid_player_t
polyphony	fluid_synth.h	/^  int polyphony;                     \/** maximum polyphony *\/$/;"	m	struct:_fluid_synth_t
port_count	fluid_alsa.c	/^  int port_count;$/;"	m	struct:__anon13	file:
ppvPluginLibNames	fluid_ladspa.h	/^  char * ppvPluginLibNames[FLUID_LADSPA_MaxLibs];$/;"	m	struct:__anon36
ppvPluginLibs	fluid_ladspa.h	/^  void * ppvPluginLibs[FLUID_LADSPA_MaxLibs];$/;"	m	struct:__anon36
preQueue	fluid_seq.c	/^	fluid_evt_entry* preQueue;$/;"	m	struct:_fluid_sequencer_t	file:
preQueueLast	fluid_seq.c	/^	fluid_evt_entry* preQueueLast;$/;"	m	struct:_fluid_sequencer_t	file:
prenum	fluid_defsfont.h	/^  unsigned short prenum;		\/* preset number *\/$/;"	m	struct:_SFPreset
preset	fluid_chan.h	/^  fluid_preset_t* preset;$/;"	m	struct:_fluid_channel_t
preset	fluid_defsfont.h	/^  fluid_defpreset_t* preset; \/* the presets of this soundfont *\/$/;"	m	struct:_fluid_defsfont_t
preset	fluid_defsfont.h	/^  fluid_list_t *preset;		\/* linked list of preset info *\/$/;"	m	struct:_SFData
preset	fluid_defsfont.h	/^  unsigned short preset;		\/* preset number *\/$/;"	m	struct:_SFPhdr
preset	fluid_ramsfont.h	/^  fluid_rampreset_t* preset;    \/* the presets of this soundfont *\/$/;"	m	struct:_fluid_ramsfont_t
presetvoices	fluid_ramsfont.h	/^  fluid_list_t *presetvoices;									\/* chained list of used voices *\/$/;"	m	struct:_fluid_rampreset_t
prevCellNb	fluid_seq.c	/^	short prevCellNb;$/;"	m	struct:_fluid_sequencer_t	file:
prim_buffer	fluid_dsound.c	/^  LPDIRECTSOUNDBUFFER prim_buffer;$/;"	m	struct:__anon15	file:
print_help	fluidsynth.c	/^print_help()$/;"	f
print_pretty_int	fluidsynth.c	/^print_pretty_int (int i)$/;"	f	file:
print_usage	fluidsynth.c	/^print_usage()$/;"	f
print_welcome	fluidsynth.c	/^print_welcome()$/;"	f
process_info	fluid_defsfont.c	/^process_info (int size, SFData * sf, FILE * fd)$/;"	f	file:
process_o_cmd_line_option	fluidsynth.c	/^void process_o_cmd_line_option(fluid_settings_t* settings, char* optarg){$/;"	f
process_pdta	fluid_defsfont.c	/^process_pdta (int size, SFData * sf, FILE * fd)$/;"	f	file:
process_sdta	fluid_defsfont.c	/^process_sdta (int size, SFData * sf, FILE * fd)$/;"	f	file:
prog	fluid_tuning.h	/^  int prog;$/;"	m	struct:_fluid_tuning_t
progchange_rules	fluid_midi_router.h	/^  fluid_midi_router_rule_t* progchange_rules;$/;"	m	struct:_fluid_midi_router_t
prognum	fluid_chan.h	/^  unsigned int prognum;$/;"	m	struct:_fluid_channel_t
pthread	fluid_sys.c	/^  pthread_t pthread;$/;"	m	struct:_fluid_thread_t	file:
q_lin	fluid_voice.h	/^	fluid_real_t q_lin;             \/* the q-factor on a linear scale *\/$/;"	m	struct:_fluid_voice_t
queue0	fluid_seq.c	/^	fluid_evt_entry* queue0[256][2];$/;"	m	struct:_fluid_sequencer_t	file:
queue0StartTime	fluid_seq.c	/^	int queue0StartTime;$/;"	m	struct:_fluid_sequencer_t	file:
queue1	fluid_seq.c	/^	fluid_evt_entry* queue1[255][2];$/;"	m	struct:_fluid_sequencer_t	file:
queueLater	fluid_seq.c	/^	fluid_evt_entry* queueLater;$/;"	m	struct:_fluid_sequencer_t	file:
queue_byte_size	fluid_dsound.c	/^  DWORD queue_byte_size;$/;"	m	struct:__anon15	file:
rand_table	fluid_synth.c	/^static float rand_table[DITHER_CHANNELS][DITHER_SIZE];$/;"	v	file:
range	fluid_defsfont.h	/^  range;$/;"	m	union:_SFGenAmount	typeref:struct:_SFGenAmount::__anon17
rawmidi_in	fluid_alsa.c	/^  snd_rawmidi_t *rawmidi_in;$/;"	m	struct:__anon12	file:
rdtsc	fluid_sys.c	/^double rdtsc(void)$/;"	f
read	fluid_oss.c	/^  fluid_audio_callback_t read;$/;"	m	struct:__anon23	file:
read	fluid_portaudio.c	/^  fluid_audio_callback_t read;$/;"	m	struct:__anon2	file:
read_listchunk	fluid_defsfont.c	/^read_listchunk (SFChunk * chunk, FILE * fd)$/;"	f	file:
ref	fluid_voice.h	/^	double ref;$/;"	m	struct:_fluid_voice_t
refcount	include/fluidsynth/sfont.h	/^  unsigned int refcount;$/;"	m	struct:_fluid_sample_t
refnum	fluid_midishare.c	/^  short refnum;$/;"	m	struct:__anon22	file:
remains_80e0	fluid_midi.c	/^static int remains_80e0[] = {$/;"	v	file:
remains_f0f6	fluid_midi.c	/^static int remains_f0f6[] = {$/;"	v	file:
reverb	fluid_synth.h	/^  fluid_revmodel_t* reverb;$/;"	m	struct:_fluid_synth_t
reverb_send	fluid_voice.h	/^	fluid_real_t reverb_send;$/;"	m	struct:_fluid_voice_t
revmodel_preset	fluid_synth.c	/^static fluid_revmodel_presets_t revmodel_preset[] = {$/;"	v	file:
right	fluid_aufile.c	/^	float* right;$/;"	m	struct:__anon28	file:
right_buf	fluid_synth.h	/^  fluid_real_t** right_buf;$/;"	m	struct:_fluid_synth_t
romver	fluid_defsfont.h	/^  SFVersion romver;		\/* ROM version *\/$/;"	m	struct:_SFData
roomsize	fluid_rev.c	/^  fluid_real_t roomsize;$/;"	m	struct:_fluid_revmodel_t	file:
roomsize	fluid_rev.h	/^  fluid_real_t roomsize;$/;"	m	struct:_fluid_revmodel_presets_t
root_pitch	fluid_voice.h	/^	fluid_real_t root_pitch;$/;"	m	struct:_fluid_voice_t
roundi	fluid_synth.c	/^roundi (float x)$/;"	f	file:
ruletables_mutex	fluid_midi_router.h	/^  fluid_mutex_t ruletables_mutex;$/;"	m	struct:_fluid_midi_router_t
run	fluid_alsa.c	/^  void* (*run)(void* d);$/;"	m	struct:fluid_alsa_formats_t	file:
running_status	fluid_midi.h	/^  int running_status;$/;"	m	struct:__anon25
safe_fread	fluid_defsfont.c	/^safe_fread (void *buf, int count, FILE * fd)$/;"	f
safe_fseek	fluid_defsfont.c	/^safe_fseek (FILE * fd, long ofs, int whence)$/;"	f
samfile	fluid_defsfont.h	/^  unsigned char samfile;		\/* Loaded sfont\/sample buffer = 0\/1 *\/$/;"	m	struct:_SFSample
sample	fluid_defsfont.h	/^  fluid_list_t *sample;		\/* linked list of sample info *\/$/;"	m	struct:_SFData
sample	fluid_defsfont.h	/^  fluid_list_t* sample;      \/* the samples in this soundfont *\/$/;"	m	struct:_fluid_defsfont_t
sample	fluid_defsfont.h	/^  fluid_sample_t* sample;$/;"	m	struct:_fluid_inst_zone_t
sample	fluid_ramsfont.h	/^  fluid_list_t* sample;    \/* the samples in this soundfont *\/$/;"	m	struct:_fluid_ramsfont_t
sample	fluid_voice.h	/^	fluid_sample_t* sample;$/;"	m	struct:_fluid_voice_t
sample_rate	fluid_aufile.c	/^	double sample_rate;$/;"	m	struct:__anon28	file:
sample_rate	fluid_chorus.c	/^  fluid_real_t sample_rate;$/;"	m	struct:_fluid_chorus_t	file:
sample_rate	fluid_synth.h	/^  double sample_rate;                \/** The sample rate *\/$/;"	m	struct:_fluid_synth_t
sampledata	fluid_defsfont.h	/^  short* sampledata;        \/* the sample data, loaded in ram *\/$/;"	m	struct:_fluid_defsfont_t
samplelink	fluid_defsfont.h	/^  unsigned short samplelink;		\/* Not used *\/$/;"	m	struct:_SFShdr
samplepos	fluid_defsfont.h	/^  unsigned int samplepos;		\/* position within sffd of the sample chunk *\/$/;"	m	struct:_SFData
samplepos	fluid_defsfont.h	/^  unsigned int samplepos;   \/* the position in the file at which the sample data starts *\/$/;"	m	struct:_fluid_defsfont_t
samplerate	fluid_defsfont.h	/^  unsigned int samplerate;		\/* Sample rate recorded at *\/$/;"	m	struct:_SFSample
samplerate	fluid_defsfont.h	/^  unsigned int samplerate;		\/* Sample rate recorded at *\/$/;"	m	struct:_SFShdr
samplerate	include/fluidsynth/sfont.h	/^  unsigned int samplerate;$/;"	m	struct:_fluid_sample_t
samples	fluid_aufile.c	/^	unsigned int samples;$/;"	m	struct:__anon28	file:
samplesize	fluid_defsfont.h	/^  unsigned int samplesize;		\/* length within sffd of the sample chunk *\/$/;"	m	struct:_SFData
samplesize	fluid_defsfont.h	/^  unsigned int samplesize;  \/* the size of the sample data *\/$/;"	m	struct:_fluid_defsfont_t
sampletype	fluid_defsfont.h	/^  unsigned short sampletype;		\/* 1 mono,2 right,4 left,linked 8,0x8000=ROM *\/$/;"	m	struct:_SFSample
sampletype	fluid_defsfont.h	/^  unsigned short sampletype;		\/* 1 mono,2 right,4 left,linked 8,0x8000=ROM *\/$/;"	m	struct:_SFShdr
sampletype	include/fluidsynth/sfont.h	/^  int sampletype;$/;"	m	struct:_fluid_sample_t
scale	fluid_seq.c	/^	double scale; \/\/ ticks per second$/;"	m	struct:_fluid_sequencer_t	file:
scaledamp	fluid_rev.c	230;"	d	file:
scaleroom	fluid_rev.c	231;"	d	file:
scalewet	fluid_rev.c	229;"	d	file:
sdtachunk_size	fluid_defsfont.c	/^static unsigned int sdtachunk_size;$/;"	v	file:
sec_buffer	fluid_dsound.c	/^  LPDIRECTSOUNDBUFFER sec_buffer;$/;"	m	struct:__anon15	file:
send_program_change	fluid_midi.h	/^  char send_program_change; \/* should we ignore the program changes? *\/$/;"	m	struct:_fluid_player_t
seq_handle	fluid_alsa.c	/^  snd_seq_t *seq_handle;$/;"	m	struct:__anon13	file:
server	fluid_cmd.c	/^  fluid_server_t* server;$/;"	m	struct:_fluid_client_t	file:
settings	fluid_adriver.c	/^  void (*settings)(fluid_settings_t* settings);$/;"	m	struct:_fluid_audriver_definition_t	file:
settings	fluid_cmd.c	/^  fluid_settings_t* settings;$/;"	m	struct:_fluid_client_t	file:
settings	fluid_cmd.c	/^  fluid_settings_t* settings;$/;"	m	struct:_fluid_server_t	file:
settings	fluid_cmd.c	/^  fluid_settings_t* settings;$/;"	m	struct:_fluid_shell_t	file:
settings	fluid_mdriver.c	/^  void (*settings)(fluid_settings_t* settings);$/;"	m	struct:fluid_mdriver_definition_t	file:
settings	fluid_synth.h	/^  fluid_settings_t* settings;         \/** the synthesizer settings *\/$/;"	m	struct:_fluid_synth_t
settings_foreach_func	fluidsynth.c	/^settings_foreach_func (void *data, char *name, int type)$/;"	f	file:
sffd	fluid_defsfont.h	/^  FILE *sffd;			\/* loaded sfont file descriptor *\/$/;"	m	struct:_SFData
sfload_file	fluid_defsfont.c	/^sfload_file (const char * fname)$/;"	f
sfont	fluid_defsfont.h	/^  fluid_defsfont_t* sfont;                  \/* the soundfont this preset belongs to *\/$/;"	m	struct:_fluid_defpreset_t
sfont	fluid_ramsfont.h	/^  fluid_ramsfont_t* sfont;                  \/* the soundfont this preset belongs to *\/$/;"	m	struct:_fluid_rampreset_t
sfont	fluid_synth.h	/^  fluid_list_t* sfont;                \/** the loaded soundfont *\/$/;"	m	struct:_fluid_synth_t
sfont	include/fluidsynth/sfont.h	/^  fluid_sfont_t* sfont;$/;"	m	struct:_fluid_preset_t
sfont_close	fluid_defsfont.c	/^sfont_close (SFData * sf)$/;"	f
sfont_free_zone	fluid_defsfont.c	/^sfont_free_zone (SFZone * zone)$/;"	f
sfont_id	fluid_synth.h	/^	int sfont_id;$/;"	m	struct:_fluid_bank_offset_t
sfont_id	fluid_synth.h	/^  unsigned int sfont_id;$/;"	m	struct:_fluid_synth_t
sfont_preset_compare_func	fluid_defsfont.c	/^sfont_preset_compare_func (void* a, void* b)$/;"	f
sfont_zone_delete	fluid_defsfont.c	/^sfont_zone_delete (SFData * sf, fluid_list_t ** zlist, SFZone * zone)$/;"	f
sfontnum	fluid_chan.h	/^  unsigned int sfontnum;$/;"	m	struct:_fluid_channel_t
sinc_table	fluid_chorus.c	/^  fluid_real_t sinc_table[INTERPOLATION_SAMPLES][INTERPOLATION_SUBSAMPLES];$/;"	m	struct:_fluid_chorus_t	file:
sinc_table7	fluid_dsp_float.c	/^static fluid_real_t sinc_table7[FLUID_INTERP_MAX][7];$/;"	v	file:
sint16	fluidsynth_priv.h	/^typedef int16_t            sint16;$/;"	t
sint16	fluidsynth_priv.h	/^typedef signed __int16     sint16;$/;"	t
sint16	fluidsynth_priv.h	/^typedef signed short       sint16;$/;"	t
sint32	fluidsynth_priv.h	/^typedef int32_t            sint32;$/;"	t
sint32	fluidsynth_priv.h	/^typedef signed __int32     sint32;$/;"	t
sint32	fluidsynth_priv.h	/^typedef signed int         sint32;$/;"	t
sint64	fluidsynth_priv.h	/^typedef int64_t            sint64;$/;"	t
sint64	fluidsynth_priv.h	/^typedef long long          sint64;$/;"	t
sint64	fluidsynth_priv.h	/^typedef signed __int64     sint64;$/;"	t
sint8	fluidsynth_priv.h	/^typedef int8_t             sint8;$/;"	t
sint8	fluidsynth_priv.h	/^typedef signed __int8      sint8;$/;"	t
sint8	fluidsynth_priv.h	/^typedef signed char        sint8;$/;"	t
size	fluid_defsfont.h	/^  unsigned int size;			\/* size of the following chunk *\/$/;"	m	struct:_SFChunk
size	fluid_hash.c	/^  unsigned int size;$/;"	m	struct:_fluid_hashtable_t	file:
slotRef	fluid_midishare.c	/^  SlotRefNum	slotRef;$/;"	m	struct:__anon22	file:
smpte_fps	fluid_midi.h	/^  unsigned int smpte_fps;$/;"	m	struct:__anon25
smpte_res	fluid_midi.h	/^  unsigned int smpte_res;$/;"	m	struct:__anon25
snprintf	config_win32.h	17;"	d
snprintf	fluidsynth_priv.h	121;"	d
socket	fluid_cmd.c	/^  fluid_server_socket_t* socket;$/;"	m	struct:_fluid_server_t	file:
socket	fluid_cmd.c	/^  fluid_socket_t socket;$/;"	m	struct:_fluid_client_t	file:
socket	fluid_sys.c	/^  fluid_socket_t socket;$/;"	m	struct:_fluid_server_socket_t	file:
socklen_t	fluid_sys.h	/^typedef int socklen_t;$/;"	t
speed_Hz	fluid_chorus.c	/^  fluid_real_t speed_Hz;      \/* current value *\/$/;"	m	struct:_fluid_chorus_t	file:
src	fluid_defsfont.h	/^  unsigned short src;			\/* source modulator *\/$/;"	m	struct:_SFMod
src	fluid_event_priv.h	/^	short src;$/;"	m	struct:_fluid_event_t
src1	include/fluidsynth/mod.h	/^  unsigned char src1;$/;"	m	struct:_fluid_mod_t
src2	include/fluidsynth/mod.h	/^  unsigned char src2;$/;"	m	struct:_fluid_mod_t
start	fluid_defsfont.h	/^  unsigned int start;		\/* Offset in sample area to start of sample *\/$/;"	m	struct:_SFSample
start	fluid_defsfont.h	/^  unsigned int start;		\/* Offset to start of sample *\/$/;"	m	struct:_SFShdr
start	fluid_synth.h	/^  unsigned int start;                \/** the start in msec, as returned by system clock *\/$/;"	m	struct:_fluid_synth_t
start	fluid_sys.c	/^  unsigned int start;$/;"	m	struct:_fluid_timer_t	file:
start	fluid_voice.h	/^	int start;$/;"	m	struct:_fluid_voice_t
start	include/fluidsynth/sfont.h	/^  unsigned int start;$/;"	m	struct:_fluid_sample_t
startMs	fluid_seq.c	/^	unsigned int startMs;$/;"	m	struct:_fluid_sequencer_t	file:
start_fluid_sndmgr_audio_driver	fluid_sndmgr.c	/^start_fluid_sndmgr_audio_driver(fluid_settings_t* settings,$/;"	f
start_msec	fluid_midi.h	/^  int start_msec;           \/* the start time of the last tempo change *\/$/;"	m	struct:_fluid_player_t
start_ticks	fluid_midi.h	/^  int start_ticks;          \/* the number of tempo ticks passed at the last tempo change *\/$/;"	m	struct:_fluid_player_t
start_time	fluid_voice.h	/^	unsigned int start_time;$/;"	m	struct:_fluid_voice_t
state	fluid_midi_router.h	/^    int state;                                 \/* Does this rule expire, as soon as (for example) all keys are up? *\/$/;"	m	struct:_fluid_midi_router_rule_t
state	fluid_synth.h	/^  unsigned int state;                \/** the synthesizer state *\/$/;"	m	struct:_fluid_synth_t
status	fluid_alsa.c	/^  int status;$/;"	m	struct:__anon12	file:
status	fluid_alsa.c	/^  int status;$/;"	m	struct:__anon13	file:
status	fluid_midi.h	/^  int status;$/;"	m	struct:_fluid_player_t
status	fluid_midi.h	/^  unsigned char status;           \/* Identifies the type of event, that is currently received ('Noteon', 'Pitch Bend' etc). *\/$/;"	m	struct:_fluid_midi_parser_t
status	fluid_midishare.c	/^  int status;$/;"	m	struct:__anon22	file:
status	fluid_oss.c	/^  int status;$/;"	m	struct:__anon24	file:
status	fluid_voice.h	/^	unsigned char status;$/;"	m	struct:_fluid_voice_t
stereospread	fluid_rev.c	238;"	d	file:
storeid	fluid_synth.h	/^  unsigned int storeid;$/;"	m	struct:_fluid_synth_t
strcasecmp	config_win32.h	18;"	d
stream	fluid_portaudio.c	/^  PaStream *stream;$/;"	m	struct:__anon2	file:
sword	fluid_defsfont.h	/^  signed short sword;			\/* signed 16 bit value *\/$/;"	m	union:_SFGenAmount
synth	fluid_chan.h	/^  fluid_synth_t* synth;$/;"	m	struct:_fluid_channel_t
synth	fluid_cmd.c	/^  fluid_synth_t* synth;$/;"	m	struct:_fluid_handle_settings_data_t	file:
synth	fluid_dart.c	/^    fluid_synth_t* synth;$/;"	m	struct:__anon10	file:
synth	fluid_dsound.c	/^  fluid_synth_t* synth;$/;"	m	struct:__anon15	file:
synth	fluid_ladspa.h	/^  fluid_synth_t* synth;$/;"	m	struct:__anon36
synth	fluid_midi.h	/^  fluid_synth_t* synth;$/;"	m	struct:_fluid_player_t
synth	fluid_midi_router.h	/^  fluid_synth_t* synth;$/;"	m	struct:_fluid_midi_router_t
synth	fluid_oss.c	/^  fluid_synth_t* synth;$/;"	m	struct:__anon23	file:
synth	fluid_portaudio.c	/^  fluid_synth_t *synth;$/;"	m	struct:__anon2	file:
synth_gain	fluid_voice.h	/^	fluid_real_t synth_gain;$/;"	m	struct:_fluid_voice_t
tempo	fluid_midi.h	/^  double tempo;                \/* Beats per second (SI rules =) *\/$/;"	m	struct:__anon25
thread	fluid_alsa.c	/^  pthread_t thread;$/;"	m	struct:__anon11	file:
thread	fluid_alsa.c	/^  pthread_t thread;$/;"	m	struct:__anon12	file:
thread	fluid_alsa.c	/^  pthread_t thread;$/;"	m	struct:__anon13	file:
thread	fluid_cmd.c	/^  fluid_thread_t* thread;$/;"	m	struct:_fluid_client_t	file:
thread	fluid_cmd.c	/^  fluid_thread_t* thread;$/;"	m	struct:_fluid_shell_t	file:
thread	fluid_dsound.c	/^  HANDLE thread;$/;"	m	struct:__anon15	file:
thread	fluid_oss.c	/^  pthread_t thread;$/;"	m	struct:__anon23	file:
thread	fluid_oss.c	/^  pthread_t thread;$/;"	m	struct:__anon24	file:
thread	fluid_pulse.c	/^  pthread_t thread;$/;"	m	struct:__anon14	file:
thread	fluid_sys.c	/^  HANDLE thread;$/;"	m	struct:_fluid_thread_t	file:
thread	fluid_sys.c	/^  HANDLE thread;$/;"	m	struct:_fluid_timer_t	file:
thread	fluid_sys.c	/^  fluid_thread_t* thread;$/;"	m	struct:_fluid_server_socket_t	file:
thread	fluid_sys.c	/^  pthread_t thread;$/;"	m	struct:_fluid_timer_t	file:
threadID	fluid_dsound.c	/^  DWORD threadID;$/;"	m	struct:__anon15	file:
thread_id	fluid_sys.c	/^  DWORD thread_id;$/;"	m	struct:_fluid_thread_t	file:
thread_id	fluid_sys.c	/^  DWORD thread_id;$/;"	m	struct:_fluid_timer_t	file:
thread_id	fluid_sys.c	/^  int thread_id;$/;"	m	struct:_fluid_thread_t	file:
thread_id	fluid_sys.c	/^  int thread_id;$/;"	m	struct:_fluid_timer_t	file:
ticks	fluid_midi.h	/^  unsigned int ticks;$/;"	m	struct:_fluid_track_t
ticks	fluid_synth.h	/^  unsigned int ticks;                \/** the number of audio samples since the start *\/$/;"	m	struct:_fluid_synth_t
ticks	fluid_voice.h	/^	unsigned int ticks;$/;"	m	struct:_fluid_voice_t
time	fluid_event_priv.h	/^	unsigned int time;$/;"	m	struct:_fluid_event_t
timer	fluid_aufile.c	/^	fluid_timer_t* timer;$/;"	m	struct:__anon28	file:
timer	fluid_midi.h	/^  fluid_timer_t* timer;$/;"	m	struct:_fluid_player_t
timer	fluid_seq.c	/^	fluid_timer_t* timer;$/;"	m	struct:_fluid_sequencer_t	file:
topic	include/fluidsynth/shell.h	/^  char* topic;                          \/** The help topic group of this command *\/ $/;"	m	struct:__anon3
total	fluid_sys.h	/^  double min, max, total;$/;"	m	struct:_fluid_profile_data_t
tracebuf	fluid_seq.c	/^	char *tracebuf;$/;"	m	struct:_fluid_sequencer_t	file:
tracelen	fluid_seq.c	/^	int tracelen;$/;"	m	struct:_fluid_sequencer_t	file:
traceptr	fluid_seq.c	/^	char *traceptr;$/;"	m	struct:_fluid_sequencer_t	file:
track	fluid_midi.h	/^  fluid_track_t *track[MAX_NUMBER_OF_TRACKS];$/;"	m	struct:_fluid_player_t
tracklen	fluid_midi.h	/^  int tracklen;$/;"	m	struct:__anon25
trackpos	fluid_midi.h	/^  int trackpos;$/;"	m	struct:__anon25
trans	fluid_defsfont.h	/^  unsigned short trans;		\/* transform applied to source *\/$/;"	m	struct:_SFMod
tuning	fluid_chan.h	/^  fluid_tuning_t* tuning;$/;"	m	struct:_fluid_channel_t
tuning	fluid_synth.h	/^  fluid_tuning_t*** tuning;           \/** 128 banks of 128 programs for the tunings *\/$/;"	m	struct:_fluid_synth_t
type	fluid_chorus.c	/^  int type;                  \/* current value *\/$/;"	m	struct:_fluid_chorus_t	file:
type	fluid_event_priv.h	/^	int type;$/;"	m	struct:_fluid_event_t
type	fluid_hash.c	/^  int type;$/;"	m	struct:_fluid_hashnode_t	file:
type	fluid_midi.h	/^  int type;$/;"	m	struct:__anon25
type	fluid_midi.h	/^  unsigned char type;       \/* MIDI event type *\/$/;"	m	struct:_fluid_midi_event_t
uint16	fluidsynth_priv.h	/^typedef u_int16_t          uint16;$/;"	t
uint16	fluidsynth_priv.h	/^typedef uint16_t           uint16;$/;"	t
uint16	fluidsynth_priv.h	/^typedef unsigned __int16   uint16;$/;"	t
uint16	fluidsynth_priv.h	/^typedef unsigned short     uint16;$/;"	t
uint32	fluidsynth_priv.h	/^typedef u_int32_t          uint32;$/;"	t
uint32	fluidsynth_priv.h	/^typedef uint32_t           uint32;$/;"	t
uint32	fluidsynth_priv.h	/^typedef unsigned __int32   uint32;$/;"	t
uint32	fluidsynth_priv.h	/^typedef unsigned int       uint32;$/;"	t
uint64	fluidsynth_priv.h	/^typedef u_int64_t          uint64;$/;"	t
uint64	fluidsynth_priv.h	/^typedef uint64_t           uint64;$/;"	t
uint64	fluidsynth_priv.h	/^typedef unsigned __int64   uint64;$/;"	t
uint64	fluidsynth_priv.h	/^typedef unsigned long long uint64;$/;"	t
uint8	fluidsynth_priv.h	/^typedef u_int8_t           uint8;$/;"	t
uint8	fluidsynth_priv.h	/^typedef uint8_t            uint8;$/;"	t
uint8	fluidsynth_priv.h	/^typedef unsigned __int8    uint8;$/;"	t
uint8	fluidsynth_priv.h	/^typedef unsigned char      uint8;$/;"	t
unloading	fluid_synth.h	/^  fluid_list_t* unloading;            \/** the soundfonts that need to be unloaded *\/$/;"	m	struct:_fluid_synth_t
update	fluid_settings.c	/^  fluid_int_update_t update;$/;"	m	struct:__anon8	file:
update	fluid_settings.c	/^  fluid_num_update_t update;$/;"	m	struct:__anon7	file:
update	fluid_settings.c	/^  fluid_str_update_t update;$/;"	m	struct:__anon6	file:
upp_alarm_ptr	fluid_midishare.c	/^  	UPPRcvAlarmPtr upp_alarm_ptr;$/;"	m	struct:__anon22	file:
upp_sleep_ptr	fluid_midishare.c	/^  	UPPDriverPtr   upp_sleep_ptr;$/;"	m	struct:__anon22	file:
upp_task_ptr	fluid_midishare.c	/^  	UPPTaskPtr     upp_task_ptr;$/;"	m	struct:__anon22	file:
upp_wakeup_ptr	fluid_midishare.c	/^  	UPPDriverPtr   upp_wakeup_ptr;$/;"	m	struct:__anon22	file:
usDeviceID	fluid_dart.c	/^    USHORT usDeviceID;                          \/* Amp Mixer device id     *\/$/;"	m	struct:__anon10	file:
userdata	include/fluidsynth/sfont.h	/^  void* userdata;$/;"	m	struct:_fluid_sample_t
uses_smpte	fluid_midi.h	/^  int uses_smpte;$/;"	m	struct:__anon25
uword	fluid_defsfont.h	/^  unsigned short uword;		\/* unsigned 16 bit value *\/$/;"	m	union:_SFGenAmount
val	include/fluidsynth/gen.h	/^  double val;          \/**< The nominal value *\/$/;"	m	struct:_fluid_gen_t
valid	include/fluidsynth/sfont.h	/^  int valid;$/;"	m	struct:_fluid_sample_t
value	fluid_event_priv.h	/^	short value;$/;"	m	struct:_fluid_event_t
value	fluid_hash.c	/^  void* value;$/;"	m	struct:_fluid_hashnode_t	file:
value	fluid_settings.c	/^  char* value;$/;"	m	struct:__anon6	file:
value	fluid_settings.c	/^  double value;$/;"	m	struct:__anon7	file:
value	fluid_settings.c	/^  int value;$/;"	m	struct:__anon8	file:
varlen	fluid_midi.h	/^  int varlen;$/;"	m	struct:__anon25
vel	fluid_event_priv.h	/^	short vel;$/;"	m	struct:_fluid_event_t
vel	fluid_voice.h	/^	unsigned char vel;              \/* the velocity *\/$/;"	m	struct:_fluid_voice_t
velhi	fluid_defsfont.h	/^  int velhi;$/;"	m	struct:_fluid_inst_zone_t
velhi	fluid_defsfont.h	/^  int velhi;$/;"	m	struct:_fluid_preset_zone_t
vello	fluid_defsfont.h	/^  int vello;$/;"	m	struct:_fluid_inst_zone_t
vello	fluid_defsfont.h	/^  int vello;$/;"	m	struct:_fluid_preset_zone_t
verbose	fluid_synth.h	/^  char verbose;                      \/** Turn verbose mode on? *\/$/;"	m	struct:_fluid_synth_t
version	fluid_defsfont.h	/^  SFVersion version;		\/* sound font version *\/$/;"	m	struct:_SFData
viblfo_delay	fluid_voice.h	/^	unsigned int viblfo_delay;      \/* the delay of the lfo in samples *\/$/;"	m	struct:_fluid_voice_t
viblfo_incr	fluid_voice.h	/^	fluid_real_t viblfo_incr;       \/* the lfo frequency is converted to a per-buffer increment *\/$/;"	m	struct:_fluid_voice_t
viblfo_to_pitch	fluid_voice.h	/^	fluid_real_t viblfo_to_pitch;$/;"	m	struct:_fluid_voice_t
viblfo_val	fluid_voice.h	/^	fluid_real_t viblfo_val;        \/* the value of the vibrato LFO *\/$/;"	m	struct:_fluid_voice_t
voice	fluid_ramsfont.c	/^	fluid_voice_t *voice;$/;"	m	struct:_fluid_rampreset_voice_t	file:
voice	fluid_synth.h	/^  fluid_voice_t** voice;              \/** the synthesis processes *\/$/;"	m	struct:_fluid_synth_t
voiceID	fluid_ramsfont.c	/^	unsigned int voiceID;$/;"	m	struct:_fluid_rampreset_voice_t	file:
volenv_count	fluid_voice.h	/^	unsigned int volenv_count;$/;"	m	struct:_fluid_voice_t
volenv_data	fluid_voice.h	/^	fluid_env_data_t volenv_data[FLUID_VOICE_ENVLAST];$/;"	m	struct:_fluid_voice_t
volenv_section	fluid_voice.h	/^	int volenv_section;$/;"	m	struct:_fluid_voice_t
volenv_val	fluid_voice.h	/^	fluid_real_t volenv_val;$/;"	m	struct:_fluid_voice_t
vsnprintf	config_win32.h	21;"	d
vsnprintf	fluidsynth_priv.h	122;"	d
wet	fluid_rev.c	/^  fluid_real_t wet, wet1, wet2;$/;"	m	struct:_fluid_revmodel_t	file:
wet1	fluid_rev.c	/^  fluid_real_t wet, wet1, wet2;$/;"	m	struct:_fluid_revmodel_t	file:
wet2	fluid_rev.c	/^  fluid_real_t wet, wet1, wet2;$/;"	m	struct:_fluid_revmodel_t	file:
width	fluid_rev.c	/^  fluid_real_t width;$/;"	m	struct:_fluid_revmodel_t	file:
width	fluid_rev.h	/^  fluid_real_t width;$/;"	m	struct:_fluid_revmodel_presets_t
with_chorus	fluid_synth.h	/^  char with_chorus;                  \/** Should the synth use the built-in chorus unit? *\/$/;"	m	struct:_fluid_synth_t
with_reverb	fluid_synth.h	/^  char with_reverb;                  \/** Should the synth use the built-in reverb unit? *\/$/;"	m	struct:_fluid_synth_t
write	fluid_dsound.c	/^  fluid_audio_callback_t write;$/;"	m	struct:__anon15	file:
zap_almost_zero	fluid_rev.c	44;"	d	file:
zap_almost_zero	fluid_rev.c	47;"	d	file:
zone	fluid_defsfont.h	/^  fluid_inst_zone_t* zone;$/;"	m	struct:_fluid_inst_t
zone	fluid_defsfont.h	/^  fluid_list_t *zone;			\/* list of instrument zones *\/$/;"	m	struct:_SFInst
zone	fluid_defsfont.h	/^  fluid_list_t *zone;			\/* list of preset zones *\/$/;"	m	struct:_SFPreset
zone	fluid_defsfont.h	/^  fluid_preset_zone_t* zone;               \/* the chained list of preset zones *\/$/;"	m	struct:_fluid_defpreset_t
zone	fluid_ramsfont.h	/^  fluid_preset_zone_t* zone;               \/* the chained list of preset zones *\/$/;"	m	struct:_fluid_rampreset_t
